#+title: New Doom Config
#+property: header-args:emacs-lisp  :mkdirp yes :lexical t :exports code
#+property: header-args:emacs-lisp+ :tangle ~/.config/doom-config/config.el
#+property: header-args:emacs-lisp+ :mkdirp yes :noweb no-export

* Still to fix
** TODO org
- [ ] org-clock doesn't start automatically when marking item as STARTED
- [ ] setup org-capture
  - have a look at phundrak's template
  - use capture templates (and tables)
** TODO org-roam
- [ ] review org-roam-capture-templates
** TODO embark
- [X] function for embark to open url in xwidget
** TODO add elfeed
** TODO smartparens
- how to use it
- 2023-08-28 ◦ [[https://xenodium.com/emacs-smartparens-auto-indent/][Emacs smartparens auto-indent]]
- maybe use as an alternative 👉 2023-08-28 ◦ [[https://github.com/AmaiKinono/puni][GitHub - AmaiKinono/puni: Structured editing (soft deletion, expression navigating & manipulating) that supports many major modes out of the box.]]
** WIP add mu4e
- [ ] Implement trashing (esp. for gmail accounts)
* Basics
:PROPERTIES:
:header-args:emacs-lisp: :tangle ~/.config/doom-config/config.el :mkdirp yes
:header-args:emacs-lisp+: :exports code :results silent :lexical t
:END:
** Defaults
Some defaults I'd like to use

#+begin_src emacs-lisp
(setq-default
 cursor-in-non-selected-windows t                 ; Hide the cursor in inactive windows
 display-time-default-load-average nil            ; Don't display load average
 fill-column 80                                   ; Set width for automatic line breaks
 help-window-select t                             ; Focus new help windows when opened
 initial-scratch-message ""                       ; Empty the initial *scratch* buffer
 kill-ring-max 128                                ; Maximum length of kill ring
 load-prefer-newer t                              ; Prefer the newest version of a file
 mark-ring-max 128                                ; Maximum length of mark ring
 read-process-output-max (* 1024 1024)            ; Increase the amount of data reads from the process
 ;; scroll-conservatively most-positive-fixnum       ; Always scroll by one line
 select-enable-clipboard t                        ; Merge system's and Emacs' clipboard
 tab-width 4                                      ; Set width for tabs
 use-package-always-ensure t                      ; Avoid the :ensure keyword for each package
 user-full-name "Victor Dorneanu"                 ; Set the full name of the current user
 user-mail-address ""                             ; Set the email address of the current user
 vc-follow-symlinks t                             ; Always follow the symlinks
 ;; custom-safe-themes t                             ; Allo all themes
 view-read-only t)                                ; Always open read-only buffers in view-mode

(column-number-mode t)                            ; Show the column number
(fset 'yes-or-no-p 'y-or-n-p)                     ; Replace yes/no prompts with y/n
(global-hl-line-mode)                             ; Hightlight current line
(set-default-coding-systems 'utf-8)               ; Default to utf-8 encoding
(show-paren-mode t)                               ; Show the parent
#+end_src

** Emacs Behavior
** Key management
*** general

#+begin_src emacs-lisp
(use-package! general
  :config
  (general-create-definer dorneanu/undefine
    :keymaps 'override
    :states '(normal emacs))

  (general-create-definer dorneanu/evil
    :states '(normal))

  (general-create-definer dorneanu/leader-key
    :keymaps '(normal insert visual emacs)
    :prefix "SPC"
    :global-prefix "C-SPC")

  (general-create-definer dorneanu/major-leader-key
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC"
    :global-prefix "M-m"))
#+end_src

Some helpful macro for generating keybindings out of tables:

#+name: general-keybindings-gen
#+header: :tangle no :exports none :results value :cache yes
#+begin_src emacs-lisp :var table=keybinds-windows prefix=""
(mapconcat (lambda (line)
             (let* ((key      (nth 0 line))
                    (function (nth 1 line))
                    (comment  (or (nth 2 line) ""))
                    (package  (or (nth 3 line) "")))
               (format "\"%s%s\" %s"
                       prefix
                       key
                       (if (string= "" comment)
                           (if (member function '("" "nil")) "nil" (concat "#'" function))
                         (format "'(%s :wk %s%s)"
                                 (if (member function '("" "nil")) ":ignore t" function)
                                 (if (member function '("none" "nil")) "t" (concat "\"" comment "\""))
                                 (if (string-blank-p package) "" (concat ":package " package)))))))
           table
           "\n")
#+end_src
**
*** mouse
I still use the mouse for scrolling, changing frame sizes:

#+begin_src emacs-lisp
(unless (display-graphic-p)
  (xterm-mouse-mode 1))

;; Automatically focus frame
(setq mouse-autoselect-window t)

;; Some keybindings
(global-set-key (kbd "C-S-<wheel-up>") 'enlarge-window-horizontally)
(global-set-key (kbd "S-<wheel-up>") 'enlarge-window)
(global-set-key (kbd "C-S-<mouse-4>") 'enlarge-window-horizontally)
(global-set-key (kbd "S-<mouse-4>") 'enlarge-window)

(global-set-key (kbd "C-S-<wheel-down>") 'shrink-window-horizontally)
(global-set-key (kbd "S-<wheel-down>") 'shrink-window)
(global-set-key (kbd "C-S-<mouse-5>") 'shrink-window-horizontally)
(global-set-key (kbd "S-<mouse-5>") 'shrink-window)
#+end_src
*** Leaders
Change default Doom leaders:

#+begin_src emacs-lisp
(setq doom-leader-key "SPC")
(setq doom-leader-alt-key "M-n")

(setq doom-localleader-key ",")
(setq doom-localleader-alt-key "M-#")
#+end_src

*** Buffer switching
#+begin_src emacs-lisp
(general-define-key
  :keymaps 'override
  "C-<right>" 'evil-window-right
  "C-<left>" 'evil-window-left
  "C-<up>" 'evil-window-up
  "C-<down>" 'evil-window-down
  "C-h" 'evil-window-left
  "C-l" 'evil-window-right
  "C-k" 'evil-window-up
  "C-j" 'evil-window-down
  "C-x h" 'previous-buffer
  "C-x l" 'next-buffer)
#+end_src
*** Hydras

Zen mode for focus:

#+begin_src emacs-lisp
(defhydra zen-mode (:color blue :hint nil)
  "
  Commands for zen mode^:
  "
  ("o"  olivetti-mode "olivetti-mode" :exit nil)
  ("e"  olivetti-expand "olivetti-expand" :exit nil)
  ("s" olivetti-shrink "olivetti-shrink" :exit nil)
  ("f" visual-fill-column-mode "visual-fill-column-mode" :exit nil)
  ("F" set-fill-column "Set fill column" :exit nil)
  ("q" nil "quit" :color red))
#+end_src

#+begin_src emacs-lisp
(defhydra hydra-buffer-menu (:color pink
                             :hint nil)
  "
^Mark^             ^Unmark^           ^Actions^          ^Search
^^^^^^^^-----------------------------------------------------------------
_m_: mark          _u_: unmark        _x_: execute       _R_: re-isearch
_s_: save          _U_: unmark up     _b_: bury          _I_: isearch
_d_: delete        ^ ^                _g_: refresh       _O_: multi-occur
_D_: delete up     ^ ^                _T_: files only: % -28`Buffer-menu-files-only
_~_: modified
"
  ("m" Buffer-menu-mark)
  ("u" Buffer-menu-unmark)
  ("U" Buffer-menu-backup-unmark)
  ("d" Buffer-menu-delete)
  ("D" Buffer-menu-delete-backwards)
  ("s" Buffer-menu-save)
  ("~" Buffer-menu-not-modified)
  ("x" Buffer-menu-execute)
  ("b" Buffer-menu-bury)
  ("g" revert-buffer)
  ("T" Buffer-menu-toggle-files-only)
  ("O" Buffer-menu-multi-occur :color blue)
  ("I" Buffer-menu-isearch-buffers :color blue)
  ("R" Buffer-menu-isearch-buffers-regexp :color blue)
  ("c" nil "cancel")
  ("v" Buffer-menu-select "select" :color blue)
  ("o" Buffer-menu-other-window "other-window" :color blue)
  ("q" quit-window "quit" :color blue))
#+end_src

** Security
*** pass

Use ~pass~ with auth-source

#+begin_src emacs-lisp
(use-package! auth-source-pass
    :config
    (message "Enabling auth-source-pass")
    (auth-source-pass-enable))
#+end_src
*** ssh-agent
Making sure we use ~ssh-agent~:
#+begin_src emacs-lisp
(use-package! exec-path-from-shell)
(exec-path-from-shell-copy-env "SSH_AGENT_PID")
(exec-path-from-shell-copy-env "SSH_AUTH_SOCK")
#+end_src
** epa-file

Configure GPG assistant

#+begin_src emacs-lisp
(use-package! epa-file
  :config
  (setq
   epa-file-encrypt-to '("BF2828095372F24D")
   password-cache nil
   password-cache-expiry nil
   epa-pinentry-mode 'ask)
  :custom
  (epa-file-select-keys 'silent))
#+end_src

* ORG mode
:PROPERTIES:
:header-args:emacs-lisp: :tangle ~/.config/doom-config/config.el :mkdirp yes
:header-args:emacs-lisp+: :exports code :results silent :lexical t
:END:
** Basics
#+begin_src emacs-lisp :noweb yes
(use-package! org
  ;; :hook (
         ;; (org-mode . visual-line-mode)
         ;;(org-mode . org-num-mode))
  :custom-face
  (org-macro ((t (:foreground "#b48ead"))))
  :init
  (auto-fill-mode t)

  :config
  ;; <<org-hydra-babel>>
  ;; (require 'ox-beamer)
  ;; (require 'org-protocol)
  (setq org-hide-leading-stars             nil
        org-hide-macro-markers             t
        ;; org-ellipsis                       " ⤵"
        org-ellipsis                       "..."
        org-image-actual-width             600
        org-redisplay-inline-images        t
        org-display-inline-images          t
        org-startup-with-inline-images     "inlineimages"
        org-pretty-entities                t
        org-fontify-whole-heading-line     t
        org-fontify-done-headline          t
        org-fontify-quote-and-verse-blocks t
        org-startup-indented               t
        org-startup-align-all-tables       t
        org-use-property-inheritance       t
        org-list-allow-alphabetical        t
        org-M-RET-may-split-line           nil
        org-src-window-setup               'split-window-below
        org-src-fontify-natively           t
        org-src-tab-acts-natively          t
        org-src-preserve-indentation       t
        org-log-done                       'time
        ;; org-tags-column                    (- 4 (window-width))
        org-tags-column                    60
        org-directory                      "~/work/repos/org"
        org-default-notes-file             (expand-file-name "notes.org" org-directory))

  ;; Default column view headings
  (setq org-columns-default-format "%50ITEM(Task) %10TODO %10CLOCKSUM %18CLOSED %18TIMESTAMP_IA")

  ;; Use the special C-a, C-e and C-k definitions for Org, which enable some special behavior in headings.
  (setq org-special-ctrl-a/e t)
  (setq org-special-ctrl-k t)

  ;; No blank lines before new entries
  (setq org-blank-before-new-entry
        '((heading . nil)
          (plain-list-item . nil)))

    ;; do logging
  (setq org-log-into-drawer t)
  (setq org-log-done t)
  (setq org-log-reschedule nil)
  (setq org-log-redeadline nil)

  ;; Refiling
  ;; Allow to create new nodes when refiling
  (setq org-refile-targets '((nil :maxlevel . 9)
                         (org-agenda-files :maxlevel . 9)))
  (setq org-refile-allow-creating-parent-nodes 'confirm)

  <<org-mode-visual-prettify-symbols>>

)

;; Disable flyspell-mode
;; (add-hook! 'org-mode-hook (setq-local flyspell-mode -1))
(remove-hook 'text-mode-hook #'flyspell-mode)

;; Disable flycheck-mode
;; (add-hook! 'org-mode-hook (setq-local flycheck-mode nil))
(remove-hook 'text-mode-hook #'flycheck-mode)

;; Open GPG files in org mode
(add-to-list 'auto-mode-alist '("\\.gpg\\'" . org-mode))

;; Set TODO keywords
;; (setq org-todo-keywords '((sequence "TODO(t)" "WIP(i)"  "MEETING(m)" "STARTED(s)" "NEXT(n)" "WAITING(w)" "|" "DONE(d)" "CANCELED(c)")))

(setq org-todo-keywords
        '((sequence
           "TODO(t)"
           "STARTED(s)"
           "NEXT(n)"
           "WIP(i)"
           "WAITING(w!)"
           "|"
           "DONE(d)"
           "CANCELED(c)")
          (sequence
           "PROJ(p)"
           "MEETING(m)"
           "REVIEW(r)"
           "IDEA(i)"
           "|"
           "STOP(c)"
           "EVENT(m)"
           ))
        org-todo-keyword-faces
        '(("[-]"  . +org-todo-active)
          ("NEXT" . +org-todo-active)
          ("STARTED" . +org-todo-active)
          ("WAITING" . +org-todo-onhold)
          ("CANCELED" . +org-archived)
          ("PROJ" . +org-todo-project)
          ("DONE"   . +org-todo-cancel)))
#+end_src
** Custom functions
*** Prefetch HTML title (org-link-insert)
Prefetch HTML title whenever ~org-link-insert~ (~C-c C-l~) is called:

#+begin_src emacs-lisp
;; Found here: https://gist.github.com/jmn/34cd4205fa30ccf83f94cb1bc0198f3f
(defun jmn/url-get-title (url &optional descr)
  "Takes a URL and returns the value of the <title> HTML tag,
   Thanks to https://frozenlock.org/tag/url-retrieve/ for documenting url-retrieve"
  (let ((buffer (url-retrieve-synchronously url))
        (title nil))
    (save-excursion
      (set-buffer buffer)
      (goto-char (point-min))
      (search-forward-regexp "<title>\\([^<]+?\\)</title>")
      (setq title (match-string 1 ) )
      (kill-buffer (current-buffer)))
    title))

(setq org-make-link-description-function 'jmn/url-get-title)
#+end_src
*** Create ORG heading from clipboard link
#+begin_src emacs-lisp
(defun dorneanu/org-insert-link-from-clipboard (&optional pURL)
  "Extend org-web-tools to create to take URL from clipboard or kill-ring"
  (interactive)
  (let*
      ((url (or pURL (org-web-tools--get-first-url)))
       (html (org-web-tools--get-url url))
       (title (org-web-tools--html-title html)))
    (insert (format "%s ◦ [[%s][%s]]" (format-time-string "%Y-%m-%d") url title))))
#+end_src

*** Auto clock-in when task is started
#+begin_src emacs-lisp
;; From https://github.com/svetlyak40wt/dot-emacs/blob/master/.emacs.d/lib/org-auto-clock.el
;; Auto clock-in when task is marked STARTED
(defun wicked/org-clock-in-if-starting ()
  "Clock in when the task is marked STARTED."
  (when (and (string= org-state "STARTED")
             (not (string= org-last-state org-state)))
    (org-clock-in)))

(defun wicked/org-clock-out-if-waiting ()
  "Clock out when the task is marked WAITING or WIP (Work in Progress)."
  (when (and (or (string= org-state "WAITING")
                 (string= org-state "WIP"))
             (equal (marker-buffer org-clock-marker) (current-buffer))
             (< (point) org-clock-marker)
             (> (save-excursion (outline-next-heading) (point))
                org-clock-marker)
             (not (string= org-last-state org-state)))
    (org-clock-out)))

(after! org
     (add-hook! 'org-after-todo-state-change-hook #'wicked/org-clock-in-if-starting)
     (defadvice org-clock-in (after wicked activate)
       "Set this task's status to 'STARTED'."
       (org-todo "STARTED"))
     (add-hook! 'org-after-todo-state-change-hook #'wicked/org-clock-out-if-waiting))
#+end_src

*** enter clock data manually
From https://mbork.pl/2023-03-20_Manually_entering_clocking_data

#+begin_src emacs-lisp
(defun dorneanu/org-clock-enter-manually (begin end)
  "Enter a clock item manually."
  (interactive (list (org-read-date t t) (org-read-date t t)))
  (save-excursion
    (org-clock-find-position nil)
    (insert-before-markers-and-inherit "\n")
    (backward-char 1)
    (insert-and-inherit org-clock-string " ")
    (org-insert-time-stamp begin t t)
    (org-insert-time-stamp end t t "--")
    (org-evaluate-time-range t)))

(map! :map org-mode-map
    :localleader
    :prefix ("c" . "clock")
    "m" #'dorneanu/org-clock-enter-manually)
#+end_src
** Exports
*** hugo
#+begin_src emacs-lisp
(use-package! ox-hugo)

;; Tell hugo how to deal with sidenotes
(add-to-list 'org-hugo-special-block-type-properties '("sidenote" . (:trim-pre t :trim-post t)))
(setq org-hugo-paired-shortcodes "%sidenote")

#+end_src
**** Functions
#+begin_src emacs-lisp
(defun vd/hugo-add-slug ()
  "Adds a Hugo slug as EXPORT_FILE_NAME property"
 (interactive)
 (org-set-property "EXPORT_FILE_NAME"
 (concat (format-time-string "%Y") "-" (org-hugo-slug (org-get-heading :no-tags :no-todo)))))

 ;; see https://www.reddit.com/r/emacs/comments/q0nlgy/extract_link_from_org_header_and_insert_as/
(defun dorneanu/hugo-org-replace-link-by-link-description ()
  "Replace an org link by its description or if empty its address and adds hugo front matter as URL"
  (interactive)
  (if (org-in-regexp org-link-bracket-re 1)
      (save-excursion
        (let ((remove (list (match-beginning 0) (match-end 0)))
              (description
               (if (match-end 2)
                   (org-match-string-no-properties 2)
                 (org-match-string-no-properties 1)))
              (url (org-match-string-no-properties 1)))
          (apply 'delete-region remove)
          (insert description)
          (org-entry-put nil "EXPORT_HUGO_CUSTOM_FRONT_MATTER" (concat ":posturl " url))))))
#+end_src

** org-agenda
#+begin_src emacs-lisp
(use-package! org-agenda
  :after org
  :config
  (setq
   ;; Set agenda files
   org-agenda-files (list org-directory)

   org-agenda-file-regexp
   (replace-regexp-in-string "\\\\\\.org" "\\\\.org\\\\(\\\\.gpg\\\\)?"
                             org-agenda-file-regexp)

   ;; Skip unavailable agenda files
   org-agenda-skip-unavailable-files t

   ;; Skip done tasks
   org-agenda-skip-scheduled-if-done t
   org-agenda-skip-deadline-if-done t

   ;; Show warnings for deadlines 7 days in advance.
   org-deadline-warning-days 5
   org-agenda-include-deadlines t
   org-agenda-todo-list-sublevels t

   ;; Set column width for tags in agenda
   org-agenda-tags-column 80


   ;; org-agenda-todo-ignore-scheduled 'all
   ;; org-agenda-todo-ignore-deadlines 'all
   ;; org-agenda-todo-ignore-with-date 'all

   ;; Use straight line as separator between agenda blocks
   ;; https://www.utf8-chartable.de/unicode-utf8-table.pl?start=9472&utf8=dec&unicodeinhtml=dec
   ;; org-agenda-block-separator 9472
   org-agenda-compact-blocks t
   org-agenda-start-day nil ;; i.e. today
   org-agenda-span 1
   org-agenda-start-on-weekday nil

   ;; Clock report settings
   org-agenda-start-with-clockreport-mode t
   org-clock-report-include-clocking-task t
   org-agenda-clockreport-parameter-plist '(:link nil :maxlevel 6 :fileskip0 t :compact nil)

   ;; Time grid
   org-agenda-time-grid
   '((daily today require-timed)
     (0900 01000 1100 1200 1300 1400 1500 1600 1700 1800)
     "-"
     "────────────────")


   ;; http://doc.endlessparentheses.com/Var/org-agenda-prefix-format.html
   org-agenda-prefix-format
   '(
     (agenda . "%5c %4e %?-12t %s")
     (todo   . " %4e %-12c")
     (tags   . " %-22c")
     (search . " %-12c"))
   )

  ;; (add-hook 'org-agenda-mode-hook
  ;;           (lambda ()
  ;;             (visual-line-mode -1)
  ;;             (toggle-truncate-lines 1)
  ;;             (display-line-numbers-mode 0)))

  ;; Add extra files to org-agenda-files
  (add-to-list 'org-agenda-files "~/syncthing/org/brainfck.org")
)

#+end_src

** org-super-agenda
Define custom org agenda commands.
Inspired by https://www.rousette.org.uk/archives/doom-emacs-tweaks-org-journal-and-org-super-agenda/

#+begin_src emacs-lisp
(use-package! org-super-agenda
  :after org-agenda
  :config
  ;; Toogle org links display
  ;; (org-toggle-link-display)

  ;; Enable it
  (org-super-agenda-mode)

  ;; Toggle org links display
  (setq org-link-descriptive t)

  ;; Set agenda custom commands
  (setq org-agenda-custom-commands
        '(
          ("a" "Agenda"
           ((agenda "" ((org-agend-span 'day)
                        (org-super-agenda-groups
                         '(
                           (:name "Today"
                            :time-grid t
                            :date today
                            :scheduled today
                            :order 1)
                           (:discard (:anything))))))
            (alltodo "" ((org-agenda-overriding-header "")
                         (org-agenda-prefix-format '(
                                                     (agenda . "%7c %4e %?-12t %s")
                                                     (todo . " %-8c [%-4e] %?-12t %s")
                                                     (tags   . " %-22c")
                                                     (search . " %-12c")
                                                     ))
                         (org-super-agenda-groups
                          '(
                            (:log t)
                            (:discard (:tag "inactive"))
                            (:discard (:tag "jira"))
                            (:name "Started"
                             :todo ("STARTED")
                             :order 1)
                            (:name "Quickies"
                             :and (:effort< "0:15" :not (:tag "recurring"))
                             )
                            (:name "This Week"
                             :auto-property "week"
                             )
                            (:name "Overdue"
                             :deadline past
                             :scheduled past
                             :order 2)
                            (:name "Soon"
                             :deadline feature
                             :scheduled feature
                             :order 2)
                            (:name "Waiting"
                             :todo "WAITING"
                             :order 2)
                            (:name "To refile"
                             :category "inbox"
                             :todo ""
                             :order 10)
                            (:name "Next to do"
                             :todo "NEXT"
                             :order 20)
                            ;; (:name "WIP"
                            ;;  :todo ("WIP")
                            ;;  :order 40)
                            (:discard (:anything))))))
            (alltodo "" ((org-agenda-overriding-header "")
                         (org-agenda-hide-tags-regexp "project\\|ticket\\|active")
                         (org-agenda-prefix-format '((todo . " %-8c [%-4e] %?-12t %s")))
                         (org-super-agenda-groups
                          '(
                            (:log t)
                            (:discard (:tag "inactive"))
                            (:name "Projects"
                             :auto-property "project"
                             :todo t
                             :order 1)
                            (:discard (:anything))))))
            )
           )
          ("r" "Resonance"
           ((alltodo "" ((org-agenda-overriding-header "Resonance calendar")
                         (org-super-agenda-groups
                          '(
                            (:discard (:not (:tag ("video" "article"))))
                            (:and (:tag ))
                            (:auto-parent t)
                            (:discard (:anything))))))))
          ))
  )
#+end_src
** TODO org-capture
#+begin_src emacs-lisp
(use-package! org-capture
  :after org
  :custom
  (org-capture-templates
   '(
     ;; Docs
     ;; - Elements: https://orgmode.org/manual/Template-elements.html
     ;; - Expansion: https://orgmode.org/manual/Template-expansion.html
     ("t" "Todo" entry (file+headline "~/work/repos/org/inbox.org" "Tasks")
      "* TODO %?\n:PROPERTIES:\n:CREATED: %U\n:END:\n %i\n")

     ("T" "Project Todo" entry (file+headline "~/work/repos/org/inbox.org" "Tasks")
      "* TODO %^{Description}\n:PROPERTIES:\n:CREATED: %U\n:END:\nDesired outcome: %^{Desired outcome} %i\n")

     ("m" "Meeting" entry (file+headline "~/work/repos/org/inbox.org" "Meetings")
      "* MEETING %?\nSCHEDULED: %t\n:PROPERTIES:\n:CREATED: %U\n:END:\n %i\n")

     ("B" "Bookmark (Clipboard)" entry (file+headline "~/work/repos/org/bookmarks.org" "Bookmarks")
      "** %(dorneanu/org-roam-insert-link-clipboard)%?"  :prepend t)

     ("b" "Bookmark (Clipboard+Tiddlywiki)" entry (file+headline "~/work/repos/org/bookmarks.org" "Bookmarks")
      "* %(dorneanu/tw5-add-link)%?"  :prepend t)

     ("s" "Code Snippet" entry
      (file+headline "~/work/repos/org/inbox.org" "Snippets")
      "* %?\t%^g\n#+BEGIN_SRC %^{language}\n\n#+END_SRC")))
  :bind
  ("C-c c"  . org-capture)
  )
#+end_src
** org-modern

#+begin_src emacs-lisp
(use-package! org-modern
  :after org
  :config
  (setq
   ;; Edit settings
   org-catch-invisible-edits 'show-and-error
   org-special-ctrl-a/e t
   org-insert-heading-respect-content t
   ;; Appearance
   org-modern-radio-target    '("❰" t "❱")
   org-modern-internal-target '("↪ " t "")
   org-modern-todo t
   org-modern-tag t
   org-modern-timestamp t
   org-modern-statistics nil
   org-modern-progress nil
   org-modern-priority t
   org-modern-horizontal-rule "──────────"
   org-modern-hide-stars "·"
   ;; org-modern-star ["⁖"]
   org-modern-keyword "‣"
   org-modern-list '((43 . "•")
                     (45 . "–")
                     (42 . "↪")))
  ;; (custom-set-faces!
  ;;   `((org-modern-tag)
  ;;     :background ,(doom-blend (doom-color 'blue) (doom-color 'bg) 0.1)
  ;;     :foreground ,(doom-color 'grey))
  ;;   `((org-modern-radio-target org-modern-internal-target)
  ;;     :inherit 'default :foreground ,(doom-color 'blue)))
  ;; )
  )

(add-hook! 'org-mode-hook #'org-modern-mode)
(add-hook! 'org-agenda-finalize #'org-modern-agenda)
#+end_src

I also use ~svg-tag-mode~ for styling tags (from https://hieuphay.com/doom-emacs-config/):

#+begin_src emacs-lisp
(use-package! svg-tag-mode
  :config
  (defconst date-re "[0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\}")
  (defconst time-re "[0-9]\\{2\\}:[0-9]\\{2\\}")
  (defconst day-re "[A-Za-z]\\{3\\}")
  (defconst day-time-re (format "\\(%s\\)? ?\\(%s\\)?" day-re time-re))

  (defun svg-progress-percent (value)
    (svg-image (svg-lib-concat
                (svg-lib-progress-bar
                 (/ (string-to-number value) 100.0) nil
                 :height 0.8 :foreground (doom-color 'fg) :background (doom-color 'bg)
                 :margin 0 :stroke 2 :radius 3 :padding 2 :width 11)
                (svg-lib-tag (concat value "%") nil
                             :height 0.8 :foreground (doom-color 'fg) :background (doom-color 'bg)
                             :stroke 0 :margin 0)) :ascent 'center))

  (defun svg-progress-count (value)
    (let* ((seq (mapcar #'string-to-number (split-string value "/")))
           (count (float (car seq)))
           (total (float (cadr seq))))
      (svg-image (svg-lib-concat
                  (svg-lib-progress-bar (/ count total) nil
                                        :foreground (doom-color 'fg)
                                        :background (doom-color 'bg) :height 0.8
                                        :margin 0 :stroke 2 :radius 3 :padding 2 :width 11)
                  (svg-lib-tag value nil
                               :foreground (doom-color 'fg)
                               :background (doom-color 'bg)
                               :stroke 0 :margin 0 :height 0.8)) :ascent 'center)))

  (set-face-attribute 'svg-tag-default-face nil :family "Source Code Pro")
  (setq svg-tag-tags
        `(;; Progress e.g. [63%] or [10/15]
          ("\\(\\[[0-9]\\{1,3\\}%\\]\\)" . ((lambda (tag)
                                              (svg-progress-percent (substring tag 1 -2)))))
          ("\\(\\[[0-9]+/[0-9]+\\]\\)" . ((lambda (tag)
                                            (svg-progress-count (substring tag 1 -1)))))
          ;; Task priority e.g. [#A], [#B], or [#C]
          ("\\[#A\\]" . ((lambda (tag) (svg-tag-make tag :face 'error :inverse t :height .85
                                                :beg 2 :end -1 :margin 0 :radius 10))))
          ("\\[#B\\]" . ((lambda (tag) (svg-tag-make tag :face 'warning :inverse t :height .85
                                                :beg 2 :end -1 :margin 0 :radius 10))))
          ("\\[#C\\]" . ((lambda (tag) (svg-tag-make tag :face 'org-todo :inverse t :height .85
                                                :beg 2 :end -1 :margin 0 :radius 10))))
          ;; Keywords
          ("TODO" . ((lambda (tag) (svg-tag-make tag :inverse t :height .95 :face 'org-todo))))
          ("WAITING" . ((lambda (tag) (svg-tag-make tag :height .95 :face 'org-warning))))
          ("DONE" . ((lambda (tag) (svg-tag-make tag :inverse t :height .95 :face 'org-done))))
          ("CANCELED" . ((lambda (tag) (svg-tag-make tag :inverse t :height .95 :face 'org-archived))))
          ("NEXT\\|STARTED" . ((lambda (tag) (svg-tag-make tag :inverse t :height .95 :face '+org-todo-active))))
          ("PROJ\\|IDEA\\|MEETING" .
           ((lambda (tag) (svg-tag-make tag :inverse t :height .95 :face '+org-todo-project))))
          ("REVIEW" . ((lambda (tag) (svg-tag-make tag :inverse t :height .95 :face '+org-todo-onhold))))))

  :hook (org-mode . svg-tag-mode)
  )
#+end_src
** org-babel
Some org-babel specific configuration:
#+begin_src emacs-lisp
;; disable org-babel execution while exporting
(setq org-confirm-babel-evaluate nil)
(setq org-export-use-babel t)

;; Indentation and formatting in org babel code blocks
(setq org-edit-src-content-indentation 0
      org-src-tab-acts-natively t
      org-src-preserve-indentation t)
#+end_src

** Visual configuration
While most modes of Emacs are dedicated to development, and therefore are much
more comfortable with a fixed-pitch font, more literary modes such as org-mode
are much more enjoyable if you have a variable pitch font enabled. *BUT*, these
modes can also require some fixed-pitch fonts for some elements of the buffer,
such as code blocks with org-mode. ~mixed-pitch~ comes to the rescue!

#+begin_src emacs-lisp
(use-package! mixed-pitch
  :after org
  :hook
  (org-mode . mixed-pitch-mode)
  :config
  (add-hook 'org-agenda-mode-hook (lambda () (mixed-pitch-mode -1))))
#+end_src

I have an issue with org-mode’s emphasis markers: I find them ugly. I can of
course hide them if I simply set ~org-hide-emphasis-markers~ to ~t~, but it
makes editing hard since I never know whether I am before or after the emphasis
marker when editing near the beginning/end of an emphasized region. ~org-appear~
fixes this issue so that it shows the emphasis markers only when the cursor is
in the emphasized region, otherwise they will remain hidden! Very cool!

#+begin_src emacs-lisp
(use-package! org-appear
  :after org
  :hook (org-mode . org-appear-mode)
  :config
  (setq org-appear-autoemphasis   t
        org-hide-emphasis-markers t
        org-appear-autolinks      t
        org-appear-autoentities   t
        org-appear-autosubmarkers t)
  (run-at-time nil nil #'org-appear--set-elements))
#+end_src

Use pretty symbols

#+name: org-mode-visual-prettify-symbols
#+begin_src emacs-lisp
(add-hook 'org-mode-hook
          (lambda ()
            (dolist (pair '(("[ ]"         . ?☐)
                            ("[X]"         . ?☑)
                            ("[-]"         . ?❍)
                            ("#+title:"    . ?📕)
                            ("#+TITLE:"    . ?📕)
                            ("#+author:"   . ?✎)
                            ("#+AUTHOR:"   . ?✎)
                            ("#+email:"    . ?📧)
                            ("#+EMAIL:"    . ?📧)
                            ("#+include"   . ?⭳)
                            ("#+INCLUDE"   . ?⭳)
                            ("#+begin_src" . ?λ)
                            ("#+BEGIN_SRC" . ?λ)
                            ("#+end_src"   . ?λ)
                            ("#+END_SRC"   . ?λ)))
              (add-to-list 'prettify-symbols-alist pair))
            (prettify-symbols-mode)))
#+end_src
*** org-roam


After hearing *about* it for so many years and thinking I really should
install it one day, 2023 is finally the year I installed org-roam! For
those unaware of it, org-roam is a Zettelkasten-style knowledge
management system based on org-mode.

#+begin_src emacs-lisp
(use-package org-roam
  :defer t
  :custom
  (org-roam-directory "/cs/priv/repos/roam/org")
  (org-roam-completion-everywhere t)
  :config
  (org-roam-db-autosync-mode 1))
#+end_src

Set capture templates for org-roam:
#+begin_src emacs-lisp
(after! org-roam
  (setq org-roam-capture-templates
        '(("d" "default" plain
           "%?"
           :if-new (file+head "topics/${slug}.org" "#+title: ${title}\n")
           :unnarrowed t)
          ("j" "Journal" plain "%?"
           :if-new (file+head "journal/%<%Y-%m-%d>.org"
                              "#+title: %<%Y-%m-%d>\n#+filetags: journal\n#+date: %<%Y-%m-%d>\n")
           :immediate-finish t
           :unnarrowed t)
          ("b" "book" plain "%?"
           :if-new
           (file+head "books/${slug}.org" "#+title: ${title}\n#+filetags: book\n")
           :immediate-finish t
           :unnarrowed t)
          ;; Idea from https://daryl.wakatara.com/emacs-gtd-flow-evolved/
          ("r" "Rez" plain "%?"
           :target (file+head "rez/%<%Y>/${slug}.org"
                              "#+TITLE: ${title}
      ,#+CREATED: %u

      ,* ${title}
      :PROPERTIES:
      :URL:
      :END:

      ,* Actions
      ,* Quotes
      ,* Notes
      ") :unnarrowed t)
          ("x" "Blog" plain "%?"
           :if-new (file+head "blog/%<%Y-%m-%d>-${slug}.org" "#+SETUPFILE: blog.setup\n#+TITLE: ${title}\n#+CREATED: %<%Y-%m-%d>\n#+HUGO_DRAFT: true\n\n")
           :unnarrowed t)
          ))
)
#+end_src

Configure org-roam-ui:

#+begin_src emacs-lisp
(use-package! org-roam-ui
  :defer t
  :after org-roam
  :config
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t))
#+end_src

Take full advantage of ~consult~

#+begin_src emacs-lisp
(use-package! consult-org-roam
   :after org-roam
   :init
   (require 'consult-org-roam)
   ;; Activate the minor mode
   (consult-org-roam-mode 1)
   :custom
   ;; Use `ripgrep' for searching with `consult-org-roam-search'
   (consult-org-roam-grep-func #'consult-ripgrep)
   ;; Configure a custom narrow key for `consult-buffer'
   (consult-org-roam-buffer-narrow-key ?r)
   ;; Display org-roam buffers right after non-org-roam buffers
   ;; in consult-buffer (and not down at the bottom)
   (consult-org-roam-buffer-after-buffers t)
   :config
   ;; Eventually suppress previewing for certain functions
   (consult-customize
    consult-org-roam-forward-links
    :preview-key (kbd "M-."))
   :bind
   ;; Define some convenient keybindings as an addition
   ("C-c n e" . consult-org-roam-file-find)
   ("C-c n b" . consult-org-roam-backlinks)
   ("C-c n l" . consult-org-roam-forward-links)
   ("C-c n r" . consult-org-roam-search))
#+end_src

**** org-roam-dailies
#+begin_src emacs-lisp
(after! org-roam-dailies
  (setq org-roam-dailies-directory "journal/")
  (setq org-roam-dailies-capture-templates
        '(("d" "default" entry
           "* %?"
           :if-new (file+head "%<%Y-%m-%d>.org"
                              "#+TITLE: %<%Y-%m-%d>\n#+DATE: %<%Y-%m-%d>\n#+FILETAGS: journal")))))
  (map! :leader
        :prefix "n"
        (:prefix ("j" . "journal")
         :desc "Arbitrary date" "d" #'org-roam-dailies-goto-date
         :desc "Today"          "j" #'org-roam-dailies-goto-today
         :desc "Tomorrow"       "m" #'org-roam-dailies-goto-tomorrow
         :desc "Yesterday"      "y" #'org-roam-dailies-goto-yesterday))
#+end_src

*** emphasize test
#+begin_src emacs-lisp
(after! org

;; Nice inspiration from https://protesilaos.com/codelog/2022-01-05-custom-face-org-emphasis-alist/
(defface my-org-emphasis-italic
  '((default :inherit italic)
    (((class color) (min-colors 88) (background light))
     :foreground "#005e00")
    (((class color) (min-colors 88) (background dark))
     :foreground "#44bc44"))
  "My italic emphasis for Org.")

(defface my-org-emphasis-underline
  '((default :inherit underline)
    (((class color) (min-colors 88) (background light))
     :foreground "#813e00")
    (((class color) (min-colors 88) (background dark))
     :foreground "#d0bc00"))
  "My underline emphasis for Org.")

(setq org-emphasis-alist
  '(("*" (bold :foreground "Orange" ))
    ("/" my-org-emphasis-italic)
    ("_" my-org-emphasis-underline)
    ;; ("=" (:background "maroon" :foreground "white"))
    ("" org-verbatim verbatim )
    ("~" (:background "deep sky blue" :foreground "MidnightBlue"))
    ("+" (:strike-through t)))))

#+end_src
** TODO org-tempo
** org-download

Insert images easily into ORG mode files

#+begin_src emacs-lisp
(use-package! org-download
  :after org
  :hook (org-mode . org-download-enable))

;; Drag-and-drop to `dired`
(add-hook 'dired-mode-hook 'org-download-enable)
#+end_src
** org-web-tools
#+begin_src emacs-lisp
(use-package! org-web-tools
  :after org)
#+end_src

* User Interface
:PROPERTIES:
:header-args:emacs-lisp: :tangle ~/.config/doom-config/config.el :mkdirp yes
:header-args:emacs-lisp+: :exports code :results silent :lexical t
:END:
** fonts
#+begin_src emacs-lisp
(setq  doom-font (font-spec :family "Source Code Pro" :size 15)
       doom-variable-pitch-font (font-spec :family "Fira Mono" :size 15)
       doom-unicode-font (font-spec :family "Fira Mono"))
#+end_src
** modeline modules
I sometimes use Emacs in fullscreen, meaning my usual taskbar will be hidden.
This is why I want the current date and time to be displayed, in an ISO-8601
style, although not exactly ISO-8601 (this is the best time format, fight me).

#+begin_src emacs-lisp
(require 'time)
(setq display-time-format "%Y-%m-%d %H:%M")
(display-time-mode 1) ; display time in modeline
#+end_src

Something my taskbar doesn’t have is a battery indicator. However, I want it
enabled only if I am on a laptop or if a battery is available.

#+begin_src emacs-lisp
(let ((battery-str (battery)))
  (unless (or (equal "Battery status not available" battery-str)
              (string-match-p (regexp-quote "N/A") battery-str))
    (display-battery-mode 1)))
#+end_src
** doom-modeline

I start to like the modeline:

#+begin_src emacs-lisp
(use-package! doom-modeline
  :hook (after-init . doom-modeline-mode)
  :config
  (setq doom-modeline-buffer-encoding t
        ;; doom-modeline-persp-name t
        doom-modeline-mu4e nil
        doom-modeline-modal-icon t))
#+end_src
** solaire

#+begin_src emacs-lisp
(use-package! solaire-mode
  :defer t
  :init
  (solaire-global-mode t)
  :custom
  (solaire-mode-remap-fringe t))
#+end_src
** auto-dim-other-buffers
#+begin_src emacs-lisp
(use-package! auto-dim-other-buffers
  :if (display-graphic-p)
  :config
  (auto-dim-other-buffers-mode t))

#+end_src
* Editing
** Regions
*** expand-region
Use expand-region

#+begin_src emacs-lisp
(use-package! expand-region
  :bind
  (("M-g =" . er/expand-region)
   ("M-g - " . er/contract-region)
   :map mode-specific-map
   :prefix-map region-prefix-map
   :prefix "r"
   ("(" . er/mark-inside-pairs)
   (")" . er/mark-outside-pairs)
   ("'" . er/mark-inside-quotes)
   ([34] . er/mark-outside-quotes) ; it's just a quotation mark
   ("o" . er/mark-org-parent)
   ("u" . er/mark-url)
   ("b" . er/mark-org-code-block)
   ("." . er/mark-method-call)
   (">" . er/mark-next-accessor)
   ("w" . er/mark-word)
   ("d" . er/mark-defun)
   ("e" . er/mark-email)
   ("," . er/mark-symbol)
   ("<" . er/mark-symbol-with-prefix)
   (";" . er/mark-comment)
   ("s" . er/mark-sentence)
   ("S" . er/mark-text-sentence)
   ("p" . er/mark-paragraph)
   ("P" . er/mark-text-paragraph)))
#+end_src
*** wrap-region
#+begin_src emacs-lisp
(use-package! wrap-region)

;; Enable wrap-region in org omde
(add-hook 'org-mode-hook #'wrap-region-mode)

(wrap-region-add-wrapper "=" "=" nil 'org-mode)
(wrap-region-add-wrapper "*" "*" nil 'org-mode)
(wrap-region-add-wrapper "/" "/" nil 'org-mode)
(wrap-region-add-wrapper "_" "_" nil 'org-mode)
(wrap-region-add-wrapper "~" "~" nil 'org-mode)
(wrap-region-add-wrapper "+" "+" nil 'org-mode)
#+end_src
** Multiple cursors
*** multiple-cursors
I'm still testing these key bindings. From https://github.com/dakra/dmacs

#+begin_src emacs-lisp
(use-package! multiple-cursors
  :bind (("C-c m" . mc/mark-all-dwim)
         ("C->" . mc/mark-next-like-this)
         ("C-<" . mc/mark-previous-like-this)
         :map mc/keymap
         ("C-x v" . mc/vertical-align-with-space)
         ("C-x n" . mc-hide-unmatched-lines-mode))
  :config
  (global-unset-key (kbd "M-<down-mouse-1>"))
  (global-set-key (kbd "M-<mouse-1>") 'mc/add-cursor-on-click))
#+end_src
** puni
I'll try [[https://github.com/AmaiKinono/puni][puni]] as a replacement for ~smartparens~:
#+begin_src emacs-lisp
;; Use puni-mode globally and disable it for term-mode.
(use-package! puni
  :defer t
  :init
  ;; The autoloads of Puni are set up so you can enable `puni-mode` or
  ;; `puni-global-mode` before `puni` is actually loaded. Only after you press
  ;; any key that calls Puni commands, it's loaded.
  (puni-global-mode)
  (add-hook 'term-mode-hook #'puni-disable-puni-mode))
#+end_src
** indentation
#+begin_src emacs-lisp
;; (use-package! aggressive-indent
;;   :config
;;   (global-aggressive-indent-mode 1))
#+end_src
* Multimedia
** TODO emms
#+begin_src emacs-lisp
;; From https://panadestein.github.io/emacsd/
;; (use-package! emms
;;   :config
;;   (require 'emms-setup)
;;   (emms-all)
;;   (add-to-list 'emms-player-list 'emms-player-mpv t)
;;   (emms-player-set emms-player-mpv
;;                    'regex
;;                    (rx (or (: "https://" (* nonl) "youtube.com" (* nonl))
;;                            (+ (? (or "https://" "http://"))
;;                               (* nonl)
;;                               (regexp (eval (emms-player-simple-regexp
;;                                              "mp4" "mov" "wmv" "webm" "flv" "avi" "mkv"))))))))
#+end_src
** empv

Watch YouTube videos from Emacs using ~mpv~. I also learned you can save the
position and resume whenever the same video is played again (read [[https://unix.stackexchange.com/questions/414639/is-it-possible-to-continue-movies-from-where-one-leaves-in-mpv-as-can-be-done-in][here]]).

#+begin_src emacs-lisp
(use-package! empv
  :after (embark)
  :config

  (setq empv-invidious-instance "https://yewtu.be/")
  (add-to-list 'empv-mpv-args "--ytdl-format=best")

  (defun dorneanu/empv-play-url (url &optional _)
    (interactive)
    (empv-toggle-video)
    (empv-play url))

)

;; Handle youtube links using mpv
(after! browse-url
  (add-to-list 'browse-url-handlers (cons "^https://\\(www.\\)?youtube.com\\|https://youtu.be" #'dorneanu/empv-play-url)))
#+end_src

* Navigation
:PROPERTIES:
:header-args:emacs-lisp: :tangle ~/.config/doom-config/config.el :mkdirp yes
:header-args:emacs-lisp+: :exports code :results silent :lexical t
:END:
** avy
#+begin_src emacs-lisp
(use-package! avy
  :defer t
  :config
  (setq avy-keys           '(?a ?u ?i ?e ?c ?t ?s ?r ?n)
        avy-dispatch-alist '((?x . avy-action-kill-move)
                             (?X . avy-action-kill-stay)
                             (?T . avy-action-teleport)
                             (?m . avy-action-mark)
                             (?C . avy-action-copy)
                             (?y . avy-action-yank)
                             (?Y . avy-action-yank-line)
                             (?I . avy-action-ispell)
                             (?z . avy-action-zap-to-char)))
  (defun my/avy-goto-url ()
    "Jump to url with avy."
    (interactive)
    (avy-jump "https?://"))
  (defun my/avy-open-url ()
    "Open url selected with avy."
    (interactive)
    (my/avy-goto-url)
    (browse-url-at-point)))

(dorneanu/evil
  :pakages 'avy
  "gc" #'evil-avy-goto-char-timer
  "gl" #'evil-avy-goto-line)


(dorneanu/major-leader-key
  :packages 'avy
  :infix "a"
  "c"  '(:ignore t :which-key "copy")
  "cl" #'avy-copy-line
  "cr" #'avy-copy-region
  "k"  '(:ignore t :which-key "kill")
  "kl" #'avy-kill-whole-line
  "kL" #'avy-kill-ring-save-whole-line
  "kr" #'avy-kill-region
  "kR" #'avy-kill-ring-save-region
  "m"  '(:ignore t :which-key "move")
  "ml" #'avy-move-line
  "mr" #'avy-move-region
  "mt" #'avy-transpose-lines-in-region
  "n"  #'avy-next
  "p"  #'avy-prev
  "u"  #'my/avy-goto-url
  "U"  #'my/avy-open-url)

(dorneanu/major-leader-key
  :packages '(avy org)
  :keymaps 'org-mode-map
  "A" '(:ignore t :which-key "avy")
  "Ar" #'avy-org-refile-as-child
  "Ah" #'avy-org-goto-heading-timer)
#+end_src
** dirvish
#+begin_src emacs-lisp
(use-package! dirvish
  :init
  (dirvish-override-dired-mode)
  :custom
  (dirvish-quick-access-entries ; It's a custom option, `setq' won't work
   '(("h" "~/"                          "Home")
     ("d" "~/Downloads/"                "Downloads")
     ("m" "/mnt/"                       "Drives")
     ("t" "~/.local/share/Trash/files/" "TrashCan")))
  :config
  ;; (dirvish-peek-mode) ; Preview files in minibuffer
  ;; (dirvish-side-follow-mode) ; similar to `treemacs-follow-mode'
  (setq dirvish-mode-line-format
        '(:left (sort symlink) :right (omit yank index)))
  (setq dirvish-attributes
        '(all-the-icons file-time file-size collapse subtree-state vc-state git-msg))
  (setq delete-by-moving-to-trash t)
  (setq dired-listing-switches
        "-l --almost-all --human-readable --group-directories-first --no-group")
  :bind ; Bind `dirvish|dirvish-side|dirvish-dwim' as you see fit
  (("C-c f" . dirvish-fd)
   :map dirvish-mode-map ; Dirvish inherits `dired-mode-map'
   ("a"   . dirvish-quick-access)
   ("f"   . dirvish-file-info-menu)
   ("y"   . dirvish-yank-menu)
   ("N"   . dirvish-narrow)
   ("^"   . dirvish-history-last)
   ("h"   . dirvish-history-jump) ; remapped `describe-mode'
   ("s"   . dirvish-quicksort)    ; remapped `dired-sort-toggle-or-edit'
   ("v"   . dirvish-vc-menu)      ; remapped `dired-view-file'
   ("TAB" . dirvish-subtree-toggle)
   ("M-f" . dirvish-history-go-forward)
   ("M-b" . dirvish-history-go-backward)
   ("M-l" . dirvish-ls-switches-menu)
   ("M-m" . dirvish-mark-menu)
   ("M-t" . dirvish-layout-toggle)
   ("M-s" . dirvish-setup-menu)
   ("M-e" . dirvish-emerge-menu)
   ("M-j" . dirvish-fd-jump)))
#+end_src
** window management
Switch between windows using ~switch-window~

#+begin_src emacs-lisp
(use-package! switch-window)
#+end_src
** tabs :disabled:
Let's configure ~centaur-tabs~

#+begin_src emacs-lisp
;; (use-package! centaur-tabs
;;   :config
;;   (centaur-tabs-mode t)
;;   (setq centaur-tabs-style "chamfer"
;;         centaur-tabs-enable-key-bindings t)
;;   ;; Group tabs by projectile project
;;   (centaur-tabs-group-by-projectile-project))
#+end_src

* Reading
** olivetti
I love /olivetti/ mode

#+begin_src emacs-lisp
(use-package! olivetti
  :custom
  (olivetti-body-width 0.8))
#+end_src
** visual-fill-column-mode
#+begin_src emacs-lisp
(setq visual-fill-column-center-text t
      visual-fill-column-width 100)
#+end_src
** spelling
#+begin_src emacs-lisp
(use-package! flyspell
  :defer t
  :init
  ;; Disable for some modes
  (remove-hook! '(org-mode-hook
                  prog-mode-hook) #'flyspell-mode)
)
#+end_src
* Documentation
** google-translate
#+begin_src emacs-lisp
;; With fix from https://github.com/atykhonov/google-translate/issues/52#issuecomment-727920888
(use-package! google-translate
  :custom
  (google-translate-backend-method 'curl)
  :config
  (setq google-translate-translation-directions-alist
        '(("en" . "de") ("en" . "ro") ("de" . "en") ("de" . "ro")))
  (setq google-translate-pop-up-buffer-set-focus t)
  ;; (setq google-translate-default-source-language "en")
  ;; (setq google-translate-default-target-language "de")
  (defun google-translate--search-tkk () "Search TKK." (list 430675 2721866130)))

(map! :leader
      :prefix "ml"
      "g." #'google-translate-at-point
      "gb" #'google-translate-buffer
      "gt" #'google-translate-query-translate
      "gr" #'google-translate-query-translate-reverse)

#+end_src
** dict.cc
#+begin_src emacs-lisp
(use-package! dictcc)
(map! :leader
      :prefix "ml"
      "d" #'dictcc)
#+end_src
** leo
#+begin_src emacs-lisp
(use-package! leo)
(add-hook! 'leo-mode-hook #'turn-off-evil-mode)
(map! :leader
      :prefix "ml"
      "e" #'leo-translate-word)
#+end_src
** wordreference
#+begin_src emacs-lisp
(use-package! wordreference
  :bind (:map wordreference-mode-map
              ("S" . wordreference-switch-source-target-and-search))
  :config
  (setq
   wordreference-source-lang "en"
   wordreference-target-lang "de"))

(add-hook! 'wordreference-mode-hook #'turn-off-evil-mode)
(map! :leader
      :prefix "ml"
      "w" #'wordreference-search)

#+end_src
* Programming
** Version Control
*** magit

[[https://github.com/alphapapa][Alphapapa]] also created an awesome package for Magit: magit-todos which display
in the Magit buffer a list of TODOs found in the current project to remind you
of what to do next.

First, let’s se tup our todo keywords with ~hl-todo~. A good few todo keywords
are already defined in the ~hl-todo-keyword-faces~ variable. Why not use them?
~hl-todo-mode~ enables fontlock highlight of these keywords in a buffer. Let’s
enable this mode globally.

#+begin_src emacs-lisp
(use-package! hl-todo
  :defer t
  :init (global-hl-todo-mode 1))
#+end_src

We can now configure properly ~magit-todos~. Notice my custom function hooked to
~magit-mode-hook~. This is because this package tries to find TODOs in all files
in the current project, and my yadm repository’s root is my ~$HOME~. So, yeah,
no ~magit-todos~ in yadm.

#+begin_src emacs-lisp
(use-package! magit-todos
  :after (magit hl-todo)
  :init
  (with-eval-after-load 'magit
    (defun my/magit-todos-if-not-yadm ()
      "Deactivate magit-todos if in yadm Tramp connection.
If `magit--default-directory' points to a yadm Tramp directory,
deactivate `magit-todos-mode', otherwise enable it."
      (if (string-prefix-p "/yadm:" magit--default-directory)
          (magit-todos-mode -1)
        (magit-todos-mode +1)))
    (add-hook 'magit-mode-hook #'my/magit-todos-if-not-yadm))
  :config
  (setq magit-todos-ignore-case t))
#+end_src
*** forge
*** consult-gh
#+begin_src emacs-lisp
(use-package! consult-gh)
#+end_src
** Shells
** Languages
*** Python
First, we need to set up the main Python mode. With this, we’ll also
add Python to the list of LSP languages and to the list of languages
org-babel supports.
#+begin_src emacs-lisp
(use-package! python
  :defer t
  :after ob
  :mode (("SConstruct\\'" . python-mode)
         ("SConscript\\'" . python-mode)
         ("[./]flake8\\'" . conf-mode)
         ("/Pipfile\\'"   . conf-mode))
  :init
  (setq python-indent-guess-indent-offset-verbose nil)
  (add-hook 'python-mode-local-vars-hook #'lsp)
  :config
  (setq python-indent-guess-indent-offset-verbose nil)
  (when (and (executable-find "python3")
           (string= python-shell-interpreter "python"))
    (setq python-shell-interpreter "python3")))
#+end_src
*** Go
#+begin_src emacs-lisp
(use-package! go-mode
  :defer t
  :bind
  ;; (:map go-mode-map
  ;;       ("M-." . godef-jump)
  ;;       ("M-]" . next-error)
  ;;       ("M-[" . previous-error))
  :hook
  (before-save . gofmt-before-save)
  :custom
  (gofmt-command "goimports")
  :init
  (setenv "GO111MODULE" "on")
  (or (getenv "GOPATH")
      (setenv "GOPATH" (expand-file-name "~/go")))
  (setenv "PATH" (concat (getenv "GOPATH") "/bin" ":" (getenv "PATH"))))

(use-package! company-go
  :after (company go-mode)
  :config
  ;; (setq +lsp-company-backends '(company-tabnine :separate company-go company-capf company-yasnippet))
  (add-to-list 'company-backends 'company-go)
  )

(use-package! go-guru
  :hook
  (go-mode . go-guru-hl-identifier-mode))

(use-package! flycheck-golangci-lint
  :hook
  (go-mode . flycheck-golangci-lint-setup))

(use-package! go-eldoc
  :hook
  (go-mode . go-eldoc-setup))
#+end_src
*** typescript
#+begin_src emacs-lisp
(use-package! typescript-mode
  :after (company)
  ;;:config
  ;; (setq company-backends '(company-tabnine :separate company-tide company-capf company-yasnippet)
)
#+end_src
*** Web Programming
[[https://emmet.io/][Emmet]] is a powerful templating engine that can generate through simple
CSS-like expression some HTML to avoid the user writing everything by
hand.
#+begin_src emacs-lisp
(use-package! emmet-mode
  :defer t
  :hook ((css-mode  . emmet-mode)
         (html-mode . emmet-mode)
         (web-mode  . emmet-mode)
         (sass-mode . emmet-mode)
         (scss-mode . emmet-mode)
         (web-mode  . emmet-mode))
  :config
  (general-define-key
   :keymaps 'emmet-mode-keymap
   "M-RET" #'emmet-expand-yas))

(dorneanu/major-leader-key
 :keymaps 'web-mode-map
 :packages '(web-mode emmet-mode)
 "e" '(:ignore t :which-key "emmet")
 "ee" #'emmet-expand-line
 "ep" #'emmet-preview
 "eP" #'emmet-preview-mode
 "ew" #'emmet-wrap-with-markup)
#+end_src

Impatient mode serves web buffers live over HTTP, including your live
modifications.
#+begin_src emacs-lisp
(use-package! impatient-mode
  :defer t)
#+end_src

Web mode is a sort of hybrid major mode that allows editing several
languages in the same buffer, mainly HTML, CSS, and Javascript.
#+begin_src emacs-lisp
(use-package! web-mode
  :hook html-mode
  ;; :hook (web-mode . prettier-js-mode)
  :hook (web-mode . lsp-deferred)
  :mode (("\\.phtml\\'"      . web-mode)
         ("\\.tpl\\.php\\'"  . web-mode)
         ("\\.twig\\'"       . web-mode)
         ("\\.xml\\'"        . web-mode)
         ("\\.html\\'"       . web-mode)
         ("\\.htm\\'"        . web-mode)
         ("\\.[gj]sp\\'"     . web-mode)
         ("\\.as[cp]x?\\'"   . web-mode)
         ("\\.eex\\'"        . web-mode)
         ("\\.erb\\'"        . web-mode)
         ("\\.mustache\\'"   . web-mode)
         ("\\.handlebars\\'" . web-mode)
         ("\\.hbs\\'"        . web-mode)
         ("\\.eco\\'"        . web-mode)
         ("\\.ejs\\'"        . web-mode)
         ("\\.svelte\\'"     . web-mode)
         ("\\.ctp\\'"        . web-mode)
         ("\\.djhtml\\'"     . web-mode)
         ("\\.vue\\'"        . web-mode))
  :config
  (setq web-mode-markup-indent-offset 2
        web-mode-code-indent-offset   2
        web-mode-css-indent-offset    2
        web-mode-style-padding        0
        web-mode-script-padding       0))

;; (phundrak/major-leader-key
;;  :keymaps 'web-mode-map
;;  :packages 'web-mode
;;  "="  '(:ignore t :which-key "format")
;;  "E"  '(:ignore t :which-key "errors")
;;  "El" #'web-mode-dom-errors-show
;;  "gb" #'web-mode-element-beginning
;;  "g"  '(:ignore t :which-key "goto")
;;  "gc" #'web-mode-element-child
;;  "gp" #'web-mode-element-parent
;;  "gs" #'web-mode-element-sibling-next
;;  "h"  '(:ignore t :which-key "dom")
;;  "hp" #'web-mode-dom-xpath
;;  "r"  '(:ignore t :which-key "refactor")
;;  "rc" #'web-mode-element-clone
;;  "rd" #'web-mode-element-vanish
;;  "rk" #'web-mode-element-kill
;;  "rr" #'web-mode-element-rename
;;  "rw" #'web-mode-element-wrap
;;  "z"  #'web-mode-fold-or-unfold)
;; (phundrak/major-leader-key
;;  :keymaps 'web-mode-map
;;  :packages '(lsp-mode web-mode)
;;  "l" '(:keymap lsp-command-map :which-key "lsp"))
#+end_src

Auto-completion for ~emmet-mode~, ~html-mode~, and ~web-mode~.

#+begin_src emacs-lisp
(use-package company-web
  :defer t
  :after (emmet-mode web-mode))
#+end_src
*** terraform
#+begin_src emacs-lisp
(use-package! terraform
  :defer t
  :config
  (setq terraform-indent-level 2
        terraform-format-on-save t))

(add-hook! 'terraform-mode-hook #'terraform-format-on-save-mode)

;; Configure company
(use-package! company-terraform
  :after company
  :config (company-terraform-init))
#+end_src
*** plantuml
#+begin_src emacs-lisp
(use-package! plantuml-mode
  :defer t
  :mode ("\\.\\(pum\\|puml\\)\\'" . plantuml-mode)
  :init
  (add-to-list 'org-babel-load-languages '(plantuml . t))
  :config
  (setq plantuml-indent-level 2))

(after! plantuml-mode
  ;; From https://www.emacswiki.org/emacs/AutoIndentation
  ;; Enter key executes newline-and-indent
  (defun set-newline-and-indent ()
    "Map the return key with `newline-and-indent'"
    (local-set-key (kbd "RET") 'newline-and-indent))

  ;; Maybe this might be useful for other modes as well
  (add-hook 'plantuml-mode-hook 'set-newline-and-indent)

  ;; From https://discourse.doomemacs.org/t/how-to-turn-on-company-files/3007/3
  (set-company-backend!  'plantuml-mode 'company-tabnine 'company-dabbrev))

#+end_src


* Email
** mu4e
*** General config
#+begin_src emacs-lisp
;; Make sure we find the mu4e package
(add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")

(use-package! mu4e
  :commands (mu4e)
  :bind (("C-c a m" . mu4e)
         :map mu4e-main-mode-map
         ("U" . mu4e-update-mail-and-index-background)
         :map mu4e-headers-mode-map
         ("TAB" . mu4e-headers-next-unread)
         ("j" . mu4e-view-headers-next)
         ("k" . mu4e-view-headers-prev)
         ("J" . mu4e-search-maildir)
         ;; ("j" . mu4e-move-to-junk)
         ;; ("M" . mu4e-headers-mark-all-unread-read) ; Mark all as read
         :map mu4e-view-mode-map
         ("A" . mu4e-view-attachment-action)
         ("M-o" . ace-link-mu4e)
         ("o" . ace-link-mu4e)
         ("n" . mu4e-scroll-up)
         ("p" . mu4e-scroll-down)
         ("J" . mu4e-view-headers-next)
         ("K" . mu4e-view-headers-prev)
         ;; ("j" . mu4e-move-to-junk)
         )
  :init
  ;; From https://github.com/Phundrak/dotfiles/blob/master/org/config/emacs.org
  ;; (defun mu4e--main-action-str (name func)
  ;;   "This seems to be needed until evil-collection supports the latest version of mu4e."
  ;;   "mu4e-main-action")
  ;; (remove-hook 'mu4e-main-mode-hook 'evil-collection-mu4e-update-main-view)

  ;; Prefer text over html/ritchtext
  (setq mm-discouraged-alternatives '("text/html" "text/richtext"))

  ;; Use completing-read (which is ivy) instead of ido
  (setq mu4e-completing-read-function 'completing-read)

  ;; set mu4e as default mail client
  (setq mail-user-agent 'mu4e-user-agent)

  :config

  ;; Set mu binary
  (setq mu4e-mu-binary "/usr/bin/mu")

  ;; Choose which fields to show
  (setq mu4e-headers-fields
        '((:account    . 13)
          (:human-date . 12)
          (:flags      . 6)
          (:from       . 22)
          (:subject    . nil)))

  ;; Refresh mail using isync every 10 minutes
  (setq mu4e-update-interval (* 10 60))

  ;; Command used to retrieve new mails
  (setq mu4e-get-mail-command "mbsync -a")

  ;; Defaults
  (setq mu4e-maildir (getenv "MU4E_MAILDIR"))
  (setq-default mu4e-drafts-folder "/private/Drafts")
  (setq-default mu4e-sent-folder   "/private/Sent")
  (setq-default mu4e-trash-folder  "/private/Trash")

  ;; Set citation settings
  (setq message-citation-line-format "\nOn %a, %b %d, %Y at %r %z, %N wrote:\n")
  (setq message-citation-line-function 'message-insert-formatted-citation-line)

  ;; Fancy stuff
  <<mu4e-fancy-marks>>

  ;; And change default threading characters to some "nicer" looking chars
  (setq mu4e-headers-thread-child-prefix '("├>" . "├→ "))
  (setq mu4e-headers-thread-last-child-prefix '("└>" . "└→ "))
  (setq mu4e-headers-thread-connection-prefix '("│" . "│ "))
  (setq mu4e-headers-thread-orphan-prefix '("┬>" . "┬→ "))
  (setq mu4e-headers-thread-single-orphan-prefix '("─>" . "─→ "))

  ;; Also change to some nicer characters for marks
  ;; (setq mu4e-headers-new-mark    '("N" . "📨"))
  (setq mu4e-headers-passed-mark  '("P" . "›"))
  (setq mu4e-headers-replied-mark '("R" . "‹"))
  (setq mu4e-headers-seen-mark   '("S" . ""))
  ;; (setq mu4e-headers-attach-mark '("a" . "📎"))
  (setq mu4e-headers-personal-mark '("p" . ""))
  ;; (setq mu4e-headers-unread-mark '("u" . "📫"))


  ;; Set date format (header view)
  (setq mu4e-headers-date-format "%F")

  ;; How should html context be converted
  ;; (setq mu4e-html2text-command "/usr/bin/w3m -T text/html")
  (setq mu4e-html2text-command "iconv -c -t utf-8 | pandoc -f html -t plain")

  ;; Improve rendering of rich-text messages (html)
  (setq shr-color-visible-luminance-min 80)

  ;; Show email address as well and not only the name
  (setq-default mu4e-view-show-addresses t)

  ;; Don't reply to self
  (setq mu4e-compose-dont-reply-to-self t)

  ;; Setup some handy shortcuts
  ;; you can quickly switch to your Inbox -- press ``ji''
  ;; then, when you want archive some messages, move them to
  ;; the 'All Mail' folder by pressing ``ma''.

  ;; View mail in browser with "a V"
  (add-to-list 'mu4e-view-actions
               '("ViewInBrowser" . mu4e-action-view-in-browser) t)
  (add-to-list 'mu4e-view-actions
               '("fViewInChrome" . mu4e-action-view-in-chrome) t)
  (add-to-list 'mu4e-view-actions
               '("xViewXWidget" . mu4e-action-view-with-xwidget) t)

  (setq mu4e-maildir-shortcuts
        '(("/variomedia/inbox"   . ?i)
          ("/gmail/inbox"    . ?s)
          ("/private/Trash"   . ?t)
          ("/private/Drafts"  . ?d)
          ("/private/Junk"    . ?j)
          ("/private/Archive" . ?a)))

  ;; Set contexts
  (dorneanu/set-mu4e-contexts)
  )

<<mu4e-view-mode>>

#+end_src
*** Fancy stuff
From https://github.com/Phundrak/dotfiles

#+name: mu4e-fancy-marks-tbl
| Mark      | Flag | Icon        |
|-----------+------+-------------|
| draft     | D    | pencil      |
| flagged   | F    | flag        |
| new       | N    | rss         |
| passed    | P    | check       |
| replied   | R    | reply       |
| seen      | S    | eye         |
| unread    | u    | eye-slash   |
| trashed   | T    | trash       |
| attach    | a    | paperclip   |
| encrypted | x    | lock        |
| signed    | s    | certificate |

#+name: mu4e-fancy-marks-gen
#+header: :tangle no :exports none :results value :cache yes
#+begin_src emacs-lisp :var table=mu4e-fancy-marks-tbl
(mapconcat (lambda (line)
             (let ((mark (car line))
                   (flag (cadr line))
                   (icon (caddr line)))
               (format "mu4e-headers-%s-mark `(\"%s\" . ,(all-the-icons-faicon \"%s\" :height 0.8))"
                       mark
                       flag
                       icon)))
           table
           "\n")
#+end_src

#+RESULTS[c6ed5d4bec4c10339a7de52a70822af74d782e62]: mu4e-fancy-marks-gen
#+begin_example
mu4e-headers-draft-mark `("D" . ,(all-the-icons-faicon "pencil" :height 0.8))
mu4e-headers-flagged-mark `("F" . ,(all-the-icons-faicon "flag" :height 0.8))
mu4e-headers-new-mark `("N" . ,(all-the-icons-faicon "rss" :height 0.8))
mu4e-headers-passed-mark `("P" . ,(all-the-icons-faicon "check" :height 0.8))
mu4e-headers-replied-mark `("R" . ,(all-the-icons-faicon "reply" :height 0.8))
mu4e-headers-seen-mark `("S" . ,(all-the-icons-faicon "eye" :height 0.8))
mu4e-headers-unread-mark `("u" . ,(all-the-icons-faicon "eye-slash" :height 0.8))
mu4e-headers-trashed-mark `("T" . ,(all-the-icons-faicon "trash" :height 0.8))
mu4e-headers-attach-mark `("a" . ,(all-the-icons-faicon "paperclip" :height 0.8))
mu4e-headers-encrypted-mark `("x" . ,(all-the-icons-faicon "lock" :height 0.8))
mu4e-headers-signed-mark `("s" . ,(all-the-icons-faicon "certificate" :height 0.8))
#+end_example

Let’s enable them and set them:
#+name: mu4e-fancy-marks
#+begin_src emacs-lisp :tangle no
(setq mu4e-use-fancy-chars t
      <<mu4e-fancy-marks-gen()>>)
#+end_src

*** View mode
#+name: mu4e-view-mode
#+begin_src emacs-lisp :tangle no
(add-hook 'mu4e-view-mode-hook (lambda () (visual-fill-column-mode)))
#+end_src

*** Contexts
Set contexts
#+begin_src emacs-lisp
(defun dorneanu/set-mu4e-contexts ()
  "Set mail contexts for mu4e"
  (interactive)
  (setq mu4e-contexts
        `( ,(make-mu4e-context
             :name "gmail"
             :enter-func (lambda () (mu4e-message "Entering gmail context"))
             :leave-func (lambda () (mu4e-message "Leaving gmail context"))
             ;; we match based on the contact-fields of the message
             :match-func
             (lambda (msg)
               (when msg
                 (string-prefix-p "/gmail" (mu4e-message-field msg :maildir))))
             :vars `((user-mail-address . ,(+pass-get-secret "mail/gmail/personal/username"))
                     (user-full-name    . "Cyneox")
                     (smtpmail-smtp-user . ,(+pass-get-secret "mail/gmail/personal/username"))
                     (smtpmail-smtp-server  . "smtp.gmail.com")
                     (smtpmail-smtp-service . 465)
                     (smtpmail-stream-type  . ssl)
                     (mu4e-compose-signature . "Cyneox via Gmail")
                     (mu4e-drafts-folder  . "/[Gmail]/drafts")
                     (mu4e-sent-folder  . "/[Gmail]/sent")
                     (mu4e-refile-folder  . "/[Gmail]/All Mail")
                     (mu4e-trash-folder  . "/[Gmail]/bin")))
           ,(make-mu4e-context
             :name "variomedia"
             :enter-func (lambda () (mu4e-message "Switch to the variomedia context"))
             :match-func
             (lambda (msg)
               (when msg
                 (string-prefix-p "/variomedia" (mu4e-message-field msg :maildir))))
             :vars `((user-mail-address . ,(+pass-get-secret "mail/personal/username"))
                     (user-full-name    . "Victor Dorneanu")
                     (smtpmail-smtp-user . ,(+pass-get-secret "mail/personal/username")) (smtpmail-smtp-server  . "smtp.variomedia.de")
                     (smtpmail-smtp-service . 465)
                     (smtpmail-stream-type  . ssl)
                     (mu4e-compose-signature . "Victor via Emacs")
                     (mu4e-drafts-folder  . "/variomedia/drafts")
                     (mu4e-sent-folder  . "/variomedia/sent")
                     (mu4e-trash-folder  . "/variomedia/bin")))
           ,(make-mu4e-context
             :name "cashlink"
             :enter-func (lambda () (mu4e-message "Switch to the cashlink context"))
             :match-func
             (lambda (msg)
               (when msg
                 (string-prefix-p "/cashlink" (mu4e-message-field msg :maildir))))
             :vars `((user-mail-address . ,(+pass-get-secret "mail/gmail/work/username"))
                     (user-full-name    . "Victor Dorneanu")
                     (smtpmail-smtp-user . ,(+pass-get-secret "mail/gmail/work/username"))
                     (smtpmail-smtp-server  . "smtp.gmail.com")
                     (smtpmail-smtp-service . 465)
                     (smtpmail-stream-type  . ssl)
                     (mu4e-drafts-folder  . "/cashlink/drafts")
                     (mu4e-sent-folder  . "/cashlink/sent")
                     (mu4e-trash-folder  . "/cashlink/bin")
                     (mu4e-compose-signature . ,(concat "Victor Dorneanu\n" "Security Architect @ Cashlink\n"))
                     ))))
  )

#+end_src

#+RESULTS:
: dorneanu/set-mu4e-contexts

* Browsers
** xwidget-webkit

I like to open an URL directly in Emacs without having to switch to Chrome:

#+begin_src emacs-lisp
(general-define-key
 :keymaps 'xwidget-webkit-mode-map
 "C-c j" 'xwidget-webkit-clone-and-split-below
 "C-c l" 'xwidget-webkit-clone-and-split-right
 "C-c x" 'kill-buffer-and-window)
#+end_src

Use the mouse to open new xwidget-webkit sessions:

#+begin_src emacs-lisp
;; https://emacs.stackexchange.com/questions/45483/browse-url-at-point-when-clicking-and-pressing-super
(global-set-key (kbd "S-<mouse-2>")
                (lambda (event)
                  (interactive (list last-command-event))
                  (posn-set-point (event-end event))
                  (split-window-right)
                  (balance-windows)
                  (other-window 1)
                  (xwidget-webkit-browse-url (thing-at-point 'url t))))
#+end_src

Make sure to open xwidget when using [[https://docs.doomemacs.org/latest/modules/tools/lookup/][lookup module]] from Doom Emacs.

#+begin_src emacs-lisp
(setq +lookup-open-url-fn #'+lookup-xwidget-webkit-open-url-fn)
#+end_src

* Searching
** deadgrep
#+begin_src emacs-lisp
;; (use-package! deadgrep)
#+end_src
** rg.el
#+begin_src emacs-lisp
(use-package! rg
  :config
  (rg-enable-default-bindings))
#+end_src
** dumb-jump
#+begin_src emacs-lisp
(use-package! dumb-jump
  :defer t
  :custom
  (dumb-jump-selector 'ivy)
  (dumb-jump-prefer-searcher 'rg))
#+end_src

* Completion
** ivy
Currently I use ~vertico~, ~consult~ and ~marginalia~. But I'll let this here for "historical" reasons.

*** ivy-posframe
#+begin_src emacs-lisp
;; (use-package! ivy-posframe
;;   :config
;;   ;; display at `ivy-posframe-style'
;;   ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display)))
;;   (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-center)))
;;   ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-window-center)))
;;   ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-bottom-left)))
;;   ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-window-bottom-left)))
;;   ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-top-center)))
;;   (ivy-posframe-mode 1))
#+end_src
*** Settings

#+begin_src emacs-lisp
(after! ivy
  (setq ivy-truncate-lines nil))
#+end_src

*** Actions

Open buffer/files in horizontal/vertical split using ~ivy-actions~:

#+begin_src emacs-lisp
;; From https://www.reddit.com/r/emacs/comments/efg362/ivy_open_selection_vertically_or_horizontally/
(defun find-file-right (filename)
  (interactive)
  (split-window-right)
  (other-window 1)
  (find-file filename))

(defun find-file-below (filename)
  (interactive)
  (split-window-below)
  (other-window 1)
  (find-file filename))

(after! ivy
(ivy-set-actions
 'counsel-find-file
 '(("|" find-file-right "open right")
   ("%" find-file-below "open below"))))

(after! ivy
(ivy-set-actions
 'counsel-recentf
 '(("|" find-file-right "open right")
   ("%" find-file-below "open below"))))

(after! ivy
(ivy-set-actions
 'counsel-buffer-or-recentf
 '(("|" find-file-right "open right")
   ("%" find-file-below "open below"))))

(after! ivy
(ivy-set-actions
 'ivy-switch-buffer
 '(("|" find-file-right "open right")
   ("%" find-file-below "open below"))))
#+end_src
* Auto completion
** consult
#+begin_src emacs-lisp
(use-package! consult
  :defer t
  :bind  (;; Related to the control commands.
          ("<help> a" . consult-apropos)
          ;; ("C-x b" . consult-buffer)
          ("C-x M-:" . consult-complex-command)
          ("C-c k" . consult-kmacro)
          ;; Related to the navigation.
          ("M-g a" . consult-org-agenda)
          ("M-g e" . consult-error)
          ("M-g g" . consult-goto-line)
          ("M-g h" . consult-org-heading)
          ("M-g i" . consult-imenu)
          ("M-g k" . consult-global-mark)
          ("M-g l" . consult-line)
          ("M-g m" . consult-mark)
          ("M-g o" . consult-outline)
          ("M-g I" . consult-project-imenu)
          ("M-g y" . consult-yank-from-kill-ring)
          ;; Related to the search and selection.
          ;; ("M-f G" . consult-git-grep)
          ;; ("M-f g" . consult-grep)
          ;; ("M-f k" . consult-keep-lines)
          ;; ("M-f l" . consult-locate)
          ;; ("M-f m" . consult-multi-occur)
          ;; ("M-f r" . consult-ripgrep)
          ;; ("M-f u" . consult-focus-lines)
          ;; ("M-f f" . consult-find)
          ))
  ;; :custom
  ;; (completion-in-region-function #'consult-completion-in-region)
  ;; (consult-narrow-key "<")
  ;; (consult-project-root-function #'projectile-project-root)
  ;; ;; Provides consistent display for both `consult-register' and the register
  ;; ;; preview when editing registers.
  ;; (register-preview-delay 0)
  ;; (register-preview-function #'consult-register-preview))
#+end_src
** Embark

#+begin_src emacs-lisp
(use-package! embark-consult)

(use-package! embark
  :bind (("C-;" . embark-act)
         ("M-o" . embark-act)
         ("M-O" . embark-dwim)))
#+end_src

Open links with MPV:

#+begin_src emacs-lisp
(defun dorneanu/empv-play-url (url &optional generic-p)
  (interactive "sURL: ")
  (empv-toggle-video)
  (empv-play url))

;; (defvar-keymap embark-general-map
;;   :doc "Open URL via mpv"
;;   "Y" #'dorneanu/empv-play-url)
#+end_src

Open files either vertically or horizontally using embark:

#+begin_src emacs-lisp
;; From https://karthinks.com/software/fifteen-ways-to-use-embark/

;; Use ace-window to select window where to load file
(eval-when-compile
  (defmacro my/embark-ace-action (fn)
    `(defun ,(intern (concat "my/embark-ace-" (symbol-name fn))) ()
       (interactive)
       (with-demoted-errors "%s"
         (require 'ace-window)
         (let ((aw-dispatch-always t))
           (aw-switch-to-window (aw-select nil))
           (call-interactively (symbol-function ',fn)))))))

(eval-when-compile
  (defmacro my/embark-split-action (fn split-type)
    `(defun ,(intern (concat "my/embark-"
                             (symbol-name fn)
                             "-"
                             (car (last  (split-string
                                          (symbol-name split-type) "-"))))) ()
       (interactive)
       (funcall #',split-type)
       (call-interactively #',fn))))

(define-key embark-file-map     (kbd "W") (my/embark-ace-action find-file))
(define-key embark-buffer-map     (kbd "W") (my/embark-ace-action find-file))
(define-key embark-bookmark-map     (kbd "W") (my/embark-ace-action find-file))

;; Open file in new vertical split
(define-key embark-file-map     (kbd "V") (my/embark-split-action find-file split-window-below))
(define-key embark-buffer-map   (kbd "V") (my/embark-split-action find-file split-window-below))
(define-key embark-bookmark-map   (kbd "V") (my/embark-split-action find-file split-window-below))

;; Open file in new horizontal split
(define-key embark-file-map     (kbd "X") (my/embark-split-action find-file split-window-right))
(define-key embark-buffer-map     (kbd "X") (my/embark-split-action find-file split-window-right))
(define-key embark-bookmark-map     (kbd "X") (my/embark-split-action find-file split-window-right))
#+end_src

Open links also in ~xwidget-webkit~:

#+begin_src emacs-lisp
(defun dorneanu/embark-open-url-in-xwidget-webkit (url &rest args)
  "open with xwidget"
  (message "URL: " url)
  ;; Split window and focus there
  (when (stringp url)
    ;; If it's a "naked url", just try adding https: to it.
    (unless (string-match "\\`[A-Za-z]+:" url)
      (setq url (concat "https://" url)))

    ;; Split window
    (split-window-right)
    (balance-windows)
    (other-window 1)

    (xwidget-webkit-new-session url)
    (xwidget-webkit-goto-url url)
    ))

(define-key embark-url-map "X" #'dorneanu/embark-open-url-in-xwidget-webkit)
#+end_src


💡: You can find more examples at https://karthinks.com/software/fifteen-ways-to-use-embark/.
Initially I wanted to use [[https://discourse.doomemacs.org/t/open-selected-completion-candidate-in-a-split/2525/2][this]] solution but it didn't work.

** Yasnippet
Yasnippet allows you to insert some pre-made code by just typing a few
characters. It can even generate some string with Elisp expressions and ask the
user for some input in some precise places.

#+begin_src emacs-lisp
(use-package! yasnippet
  :defer t
  :init
  (yas-global-mode)
  :hook ((prog-mode . yas-minor-mode)
         (text-mode . yas-minor-mode)))
#+end_src

Of course, yasnippet wouldn’t be as awesome as it is without pre-made snippets.

#+begin_src emacs-lisp
(use-package! yasnippet-snippets
  :defer t
  :after yasnippet)
#+end_src

And finally, with ivy you can choose your snippets from a menu if you’re not
sure or if you don’t remember what your snippet is.

#+begin_src emacs-lisp
(use-package ivy-yasnippet
  :defer t
  :after (ivy yasnippet))

(dorneanu/leader-key
  :infix "i"
  :packages 'ivy-yasnippet
  "y" #'ivy-yasnippet)
#+end_src
** yankpad
#+begin_src emacs-lisp
(use-package! yankpad
  :bind
  ("C-x C-y"  . yankpad-insert)
  :config
  (setq yankpad-file (concat org-directory "/yankpad.org"))
  (yankpad-reload)
  (add-to-list 'company-backends #'company-yankpad))
#+end_src
** company-mode
#+begin_src emacs-lisp
(use-package! Company
  :hook (((prog-mode markdown-mode) . company-mode))
  :bind (:map company-active-map
              ([return] . nil)
              ("RET" . nil)
              ("TAB" . company-complete-selection)
              ([tab] . company-complete-selection)
              ("C-j" . company-complete-selection))
  :config
  (setq company-idle-delay 0)
  (setq company-tooltip-limit 10)
  (setq company-minimum-prefix-length 1)
  (setq company-show-numbers t)

  ;; Don't display icons
  (setq company-format-margin-function nil)

  (setq
   company-tooltip-align-annotations t  ; Aligns annotation to the right hand side
   company-frontends
   '(company-pseudo-tooltip-frontend    ; always show candidates in overlay tooltip
     company-echo-metadata-frontend)    ; show selected candidate docs in echo area
   )

  ;; dabbrev stuff
  (setq company-dabbrev-other-buffers t
        company-dabbrev-ignore-case t))

;; Add yasnippet support for all company backends
(defvar company-mode/enable-yas t
  "Enable yasnippet for all backends.")
#+end_src
*** company-tng
#+BEGIN_SRC emacs-lisp
(use-package! company-tng
  :after company
  :bind (:map company-active-map
         ([return] . nil)
         ("RET" . nil)
         ("TAB" . company-select-next)
         ([tab] . company-select-next)
         ("S-TAB" . company-select-previous)
         ([backtab] . company-select-previous)
         ("C-j" . company-complete-selection))
  :config
  (company-tng-mode))
#+END_SRC
*** company-dict
*** company-dabbrev
#+begin_src emacs-lisp
(setq company-dabbrev-other-buffers t
      company-dabbrev-ignore-case t)
#+end_src
*** company-tabnine
#+begin_src emacs-lisp
(use-package! company-tabnine
  :after company
  :config
  (setq +lsp-company-backends '(company-tabnine :separate company-capf company-yasnippet)))
#+end_src
** github copilot
#+begin_src emacs-lisp
(use-package! copilot
  ;;:hook (prog-mode . copilot-mode)
  :bind (:map copilot-completion-map
              ("<tab>" . 'copilot-accept-completion)
              ("TAB" . 'copilot-accept-completion)
              ("C-TAB" . 'copilot-accept-completion-by-word)
              ("C-<tab>" . 'copilot-accept-completion-by-word)))
#+end_src
* Applications
** RSS
*** TODO elfeed
Configure elfeed first:

#+begin_src emacs-lisp
(use-package! elfeed
  :commands (elfeed)
  :bind (("C-c a e" . elfeed))
  :config
  (setq elfeed-db-directory "~/.elfeed"
        elfeed-enclosure-default-dir (expand-file-name "~/Downloads")
        elfeed-goodies/wide-threshold 0.2
        elfeed-set-timeout 36000
        elfeed-search-filter "@1-week-ago +unread"
        elfeed-search-print-entry-function 'hp/elfeed-entry-line-draw)
  )

;; Keybindings
;; TODO: Review this
(map! :map elfeed-search-mode-map
      :after elfeed-search
      [remap kill-this-buffer] "q"
      [remap kill-buffer] "q"
      :n doom-leader-key nil
      :n "c" #'elfeed-search-clear-filter
      :n "q" #'+rss/quit
      :n "e" #'elfeed-update
      :n "gp" #'sqrtminusone/rdrview-elfeed-show
      :n "R" #'elfeed-search-untag-all-unread
      :n "R" #'my/elfeed-reddit-show-commments
      :n "H" #'my/elfeed-hn-show-commments
      :n "r" #'elfeed-search-tag-all-unread
      :n "s" #'elfeed-search-live-filter
      :n "TAB" #'elfeed-search-show-entry
      :n "o" #'sqrtminusone/elfeed-search-filter-source
      :n "p" #'elfeed-show-pdf
      :n "+" #'elfeed-search-tag-all
      :n "-" #'elfeed-search-untag-all
      :n "S" #'elfeed-search-set-filter
      :nm "T" #'elfeed-webkit-toggle
      :n "be" #'dorneanu/elfeed-search-browse-url-eww
      :n "bx" #'dorneanu/elfeed-search-browse-url-xwidget
      :n "bc" #'dorneanu/elfeed-search-browse-url-chrome
      :n "B" #'elfeed-search-eww-open
      :n "a" #'pocket-reader-elfeed-search-add-link
      :n "y" #'elfeed-search-yank)

(map! :map elfeed-show-mode-map
      :after elfeed-show
      [remap kill-this-buffer] "q"
      [remap kill-buffer] "q"
      :n doom-leader-key nil
      :nm "q" #'+rss/delete-pane
      :nm "a" #'pocket-reader-elfeed-entry-add-link
      :nm "gl" #'ace-link-eww
      :n "B" #'elfeed-show-eww-open
      :n "be" #'dorneanu/elfeed-show-browse-url-eww
      :n "bx" #'dorneanu/elfeed-show-browse-url-xwidget
      :n "bc" #'dorneanu/elfeed-show-browse-url-chrome
      :nm "o" #'ace-link-elfeed
      :n "H" #'my/elfeed-hn-show-comments-at-point
      :nm "RET" #'org-ref-elfeed-add
      :nm "n" #'elfeed-show-next
      :nm "N" #'elfeed-show-prev
      :nm "p" #'elfeed-show-pdf
      :nm "T" #'elfeed-webkit-toggle
      :nm "+" #'elfeed-show-tag
      :nm "-" #'elfeed-show-untag
      :nm "s" #'elfeed-show-new-live-search
      :nm "y" #'elfeed-show-yank)

;; Style the search-mode layout
(add-hook!
 'elfeed-search-mode-hook
 ;; (set-face-attribute 'variable-pitch (selected-frame) :font (font-spec :family "Fira Mono" :size 20))
 (olivetti-mode)
 (visual-line-mode -1)
 )

;; Style the show-mode layout
(add-hook!
 'elfeed-show-mode-hook
 ;; (set-face-attribute 'variable-pitch (selected-frame) :font (font-spec :family "Fira Mono" :size 20))
 (setq fill-column 50)
 (visual-fill-column-mode)
)

;; Update elfeed regularly
;; https://www.reddit.com/r/emacs/comments/bvbp92/is_there_a_simple_way_to_get_elfeed_to_update/
(add-hook 'emacs-startup-hook (lambda () (run-at-time 5 3600 'elfeed-update)))
#+end_src

Custom functions:

#+begin_src emacs-lisp
(defun hp/elfeed-entry-line-draw (entry)
  "Print ENTRY to the buffer."
  (let* ((date (elfeed-search-format-date (elfeed-entry-date entry)))
         (title (or (elfeed-meta entry :title) (elfeed-entry-title entry) ""))
         (title-faces (elfeed-search--faces (elfeed-entry-tags entry)))
         (feed (elfeed-entry-feed entry))
         (feed-title
          (when feed
            (or (elfeed-meta feed :title) (elfeed-feed-title feed))))
         (tags (mapcar #'symbol-name (elfeed-entry-tags entry)))
         (tags-str (concat "[" (mapconcat 'identity tags ",") "]"))
         (title-width (- (window-width) elfeed-goodies/feed-source-column-width
                         elfeed-goodies/tag-column-width 4))
         (title-column (elfeed-format-column
                        title (elfeed-clamp
                               elfeed-search-title-min-width
                               title-width
                               title-width)
                        :left))
         (tag-column (elfeed-format-column
                      tags-str (elfeed-clamp (length tags-str)
                                             elfeed-goodies/tag-column-width
                                             elfeed-goodies/tag-column-width)
                      :left))
         (feed-column (elfeed-format-column
                       feed-title (elfeed-clamp elfeed-goodies/feed-source-column-width
                                                elfeed-goodies/feed-source-column-width
                                                elfeed-goodies/feed-source-column-width)
                       :left))
         ;; (entry-score (elfeed-format-column (number-to-string (elfeed-score-scoring-get-score-from-entry entry)) 6 :left))
         ;; (entry-authors (concatenate-authors
         ;;                 (elfeed-meta entry :authors)))
         ;; (authors-column (elfeed-format-column entry-authors elfeed-goodies/tag-column-width :left))
         )
    (if (>= (window-width) (* (frame-width) elfeed-goodies/wide-threshold))
        (progn
          ;; (insert (propertize entry-score 'face 'elfeed-search-feed-face) " ")
          (insert (propertize date 'face 'elfeed-search-date-face) " ")
          (insert (propertize feed-column 'face 'elfeed-search-feed-face) " ")
          (insert (propertize tag-column 'face 'elfeed-search-tag-face) " ")
          ;; (insert (propertize authors-column 'face 'elfeed-search-tag-face) " ")
          (insert (propertize title 'face title-faces 'kbd-help title))
          )
      (insert (propertize title 'face title-faces 'kbd-help title))))
  )

#+end_src

Functions for browsing items:

#+begin_src emacs-lisp
;; Browse URL functions
;; elfeed-show-mode
(defun dorneanu/elfeed-show-browse-url-xwidget (&optional use-generic-p)
  "open with xwidget"
  (interactive "P")
  (let ((browse-url-browser-function #'xwidget-webkit-browse-url))
    (elfeed-show-visit use-generic-p)))

(defun dorneanu/elfeed-show-browse-url-chrome (&optional use-generic-p)
  "open with chrome"
  (interactive "P")
  (let ((browse-url-browser-function #'browse-url-chrome))
    (elfeed-show-visit use-generic-p)))

(defun dorneanu/elfeed-show-browse-url-eww (&optional use-generic-p)
  "open with chrome"
  (interactive "P")
  (let ((browse-url-browser-function #'eww-browse-url))
    (elfeed-show-visit use-generic-p)))

;; elfeed-search-mode
(defun dorneanu/elfeed-search-browse-url-xwidget (&optional use-generic-p)
  "open with xwidget"
  (interactive "P")
  ;; Split window and focus there
  (split-window-right)
  (balance-windows)
  (other-window 1)
  (let ((browse-url-browser-function #'xwidget-webkit-browse-url))
    (elfeed-search-browse-url use-generic-p)))

(defun dorneanu/elfeed-search-browse-url-chrome (&optional use-generic-p)
  "open with chrome"
  (interactive "P")
  (let ((browse-url-browser-function #'browse-url-chrome))
    (elfeed-search-browse-url use-generic-p)))

(defun dorneanu/elfeed-search-browse-url-eww (&optional use-generic-p)
  "open with eww"
  (interactive "P")
  (let ((browse-url-browser-function #'eww-browse-url))
    (elfeed-search-browse-url use-generic-p)))
#+end_src

Don't +use+ elfeed-score:

#+begin_src emacs-lisp
;; (use-package! elfeed-score
;;   :after elfeed
;;   :custom
;;   (elfeed-score-score-file (concat org-directory "/Feeds/elfeed.score"))
;;   :config
;;   (map! :map elfeed-search-mode-map
;;         :n "=" elfeed-score-map)
;;   (elfeed-score-enable))
#+end_src


Read elfeed configuration from ORG file:

#+begin_src emacs-lisp
(use-package! elfeed-org
  :after (elfeed)
  :config
  (setq rmh-elfeed-org-files '("~/work/repos/org/elfeed.org.gpg")))

#+end_src

Configure elfeed-tube:

#+begin_src emacs-lisp
(use-package! elfeed-tube
  :after elfeed
  :config
  (elfeed-tube-setup)
  :bind (:map elfeed-show-mode-map
         ("C-c C-x m" . #'dorneanu/elfeed-play-with-mpv)
         ("C-c C-x f" . elfeed-tube-fetch)
         ([remap save-buffer] . elfeed-tube-save)
         :map elfeed-search-mode-map
         ("C-c C-x m" . #'dorneanu/elfeed-play-with-mpv)
         ("C-c C-x f" . elfeed-tube-fetch)
         ([remap save-buffer] . elfeed-tube-save)))

;; https://github.com/skeeto/elfeed/issues/267
(defun dorneanu/elfeed-play-with-mpv ()
  "Play entry link with mpv."
  (interactive)
  (let ((entry (if (eq major-mode 'elfeed-show-mode) elfeed-show-entry (elfeed-search-selected :single)))
        (quality-arg "")
        (quality-val (completing-read "Max height resolution (0 for unlimited): " '("0" "480" "720") nil nil)))
    (setq quality-val (string-to-number quality-val))
    (message "Opening %s with height≤%s with mpv..." (elfeed-entry-link entry) quality-val)
    (when (< 0 quality-val)
      (setq quality-arg (format "--ytdl-format=[height<=?%s]" quality-val)))
    (start-process "elfeed-mpv" nil "mpv" quality-arg (elfeed-entry-link entry))))

#+end_src

Open ~elfeed~ in its own workspace (from [[https://github.com/hieutkt/dotfiles/tree/main/emacs/.doom.d][here]]):


#+begin_src emacs-lisp
(after! (elfeed)
  (defadvice! hp/elfeed-in-own-workspace (&rest _)
  "Open Elfeeds in its own workspace."
  :before #'elfeed
  (when (modulep! :ui workspaces)
    (+workspace-switch "Elfeeds" t))))
#+end_src

**** reddigg
Use reddigg to show reddit threads.
#+begin_src emacs-lisp
(defun my/elfeed-reddit-show-commments (&optional link)
  (interactive)
  (let* ((entry (if (eq major-mode 'elfeed-show-mode)
                    elfeed-show-entry
                  (elfeed-search-selected :ignore-region)))
         (link (if link link (elfeed-entry-link entry))))
    (reddigg-view-comments link)))
#+end_src
**** hnreader
Open in same window
#+begin_src emacs-lisp
(setq hnreader-view-comments-in-same-window nil)
#+end_src

Use hnreader to show HN threads
#+begin_src emacs-lisp
(defun my/elfeed-hn-show-commments (&optional link)
  (interactive)
  (let* ((entry (if (eq major-mode 'elfeed-show-mode)
                    elfeed-show-entry
                  (elfeed-search-selected :ignore-region)))
         (link (if link link (elfeed-entry-link entry))))
    (setq-local hnreader-view-comments-in-same-window nil)
    (hnreader-promise-comment (format "%s" link))))
#+end_src

Use hnread to show HN threads for a URL at point
#+begin_src emacs-lisp
(defun my/elfeed-hn-show-comments-at-point ()
  "Kill the url at point."
  (interactive)
  (setq-local hnreader-view-comments-in-same-window t)
  (hnreader-comment (format "%s" (url-get-url-at-point))))
#+end_src

** Productivity
*** wakatime
#+begin_src emacs-lisp
(use-package! wakatime-mode
  :config
  (setq
   wakatime-python-bin "/home/victor/.pyenv/versions/emacs/bin/python"
   wakatime-cli-path "/home/victor/.pyenv/versions/emacs/bin/wakatime")
  (global-wakatime-mode))
#+end_src
*** TODO jira
** AI
*** chatgpt-shell
#+begin_src emacs-lisp
(use-package! chatgpt-shell
  :commands (chatgpt-shell)
  :bind (("C-c a p" . chatgpt-shell-prompt)
         ("C-c a s" . chatgpt-shell))
  :config
  (setq chatgpt-shell-openai-key (+pass-get-secret "emacs/chatgpt")))
#+end_src
* Keybindings

#+begin_src emacs-lisp
;; Toggles
(dorneanu/major-leader-key
  :infix "t"
  <<general-keybindings-gen(table=keybinds-toggles)>>)

;; Projects
(dorneanu/major-leader-key
  :infix "p"
  <<general-keybindings-gen(table=keybinds-projects)>>)

;; Searching
(dorneanu/major-leader-key
  :infix "s"
  <<general-keybindings-gen(table=keybinds-searching)>>)

;; Opens
(dorneanu/major-leader-key
  :infix "o"
  <<general-keybindings-gen(table=keybinds-open)>>)

;; Inserts
(dorneanu/major-leader-key
  :infix "i"
  <<general-keybindings-gen(table=keybinds-inserts)>>)

;; Windows
(dorneanu/major-leader-key
  :infix "w"
  <<general-keybindings-gen(table=keybinds-windows)>>)

;; Windows
(dorneanu/major-leader-key
  :infix "h"
  <<general-keybindings-gen(table=keybinds-hydras)>>)

#+end_src

#+RESULTS:

** Toggles
My toggle keybinds are prefixed by ~t~.

#+name: keybinds-toggles
| Key | Function                              | Description                       |
|-----+---------------------------------------+-----------------------------------|
|     |                                       | toggles                           |
| TAB | tab-bar-mode                          |                                   |
| t   | my/modify-frame-alpha-background/body |                                   |
| T   | counsel-load-theme                    |                                   |
| d   |                                       | debug                             |
| f   | focus-mode                            | Activate focus-mode               |
| de  | toggle-debug-on-error                 |                                   |
| dq  | toggle-debug-on-quit                  |                                   |
| i   |                                       | input method                      |
| it  | toggle-input-method                   |                                   |
| is  | set-input-method                      |                                   |
| o   | olivetti-mode                         | Togggle olivetti mode             |
| n   | org-num-mode                          | Toggle org num mode               |
| m   | hide-mode-line-mode                   | Hides modeline in current buffer  |
| v   | visual-fill-column-mode               | Activates visual fill column mode |

** Projects

#+name: keybinds-projects
| Key | Function                      | Description            |
|-----+-------------------------------+------------------------|
|     |                               | projects               |
| e   | project-eshell                | Run eshell in project  |
| r   | consult-ripgrep               | Run ripgrep in project |
| d   | projectile-dired              |                        |
| D   | projectile-dired-other-window |                        |

** Searches

#+name: keybinds-searching
| Key | Function              | Description               |
|-----+-----------------------+---------------------------|
|     |                       | searches                  |
| r   | rg                    | Run rg.el                 |
| s   | swiper                | Run swiper                |
| a   | swiper-all            | Run swiper-all            |
| .   | swiper-thing-at-point | Run swiper-thing-at-point |

** Inserts

#+name: keybinds-inserts
| Key | Function                                | Description                 |
|-----+-----------------------------------------+-----------------------------|
|     |                                         | inserts                     |
| c   | org-download-clipboard                  | Insert image from clipboard |
| eb  | org-emphasize-bold                      |                             |
| ec  | org-emphasize-code                      |                             |
| ei  | org-emphasize-italic                    |                             |
| es  | org-emphasize-strike-through            |                             |
| eu  | org-emphasize-underline                 |                             |
| ev  | org-emphasize-verbatim                  |                             |
| lc  | dorneanu/org-insert-link-from-clipboard | Insert link from clipboard  |

** Open

#+name: keybinds-open
| Key | Function                  | Description                    |
|-----+---------------------------+--------------------------------|
|     |                           | opens                          |
| x   | xwidget-webkit-browse-url | Opens an URL in xwidget-webkit |
| c   | browse-url-chrome         | Open Chrome                    |
| e   | eww-browse                | Run eww browser                |

** Hydras

#+name: keybinds-hydras
| Key | Function      | Description              |
|-----+---------------+--------------------------|
|     |               | hydras                   |
| z   | zen-mode/body | Opens hydra for zen mode |

** Windows

#+name: keybinds-windows
| Key | Function                     | Description                        |
|-----+------------------------------+------------------------------------|
|     |                              | windows                            |
| .   | +hydra/window-nav/body       | Change window size and move around |
| -   | split-window-below-and-focus |                                    |
| /   | split-window-right-and-focus |                                    |
| o   | other-window                 |                                    |
| D   | delete-other-windows         |                                    |
| w   |                              | writeroom                          |
| w.  | writeroom-buffer-width/body  |                                    |
| ww  | writeroom-mode               |                                    |

** Jumps
Different keybindings to jump to a window, character or another workspace.

#+begin_src emacs-lisp
(dorneanu/leader-key
  ;; :packages 'avy
  :infix "j"
  "c" #'evil-avy-goto-char-timer
  "w" #'ace-window
  "TAB" #'+workspace/other
  "s" #'persp-frame-switch
  "n" #'+workspace/switch-right
  "b" #'+workspace/switch-left
  "l" #'avy-goto-line)
#+end_src

#+RESULTS:

* Packages
:PROPERTIES:
:header-args:emacs-lisp: :tangle ~/.config/doom-config/packages.el :mkdirp yes
:header-args:emacs-lisp+: :exports code :results silent :lexical t
:END:
** Applications
#+begin_src emacs-lisp
(package! chatgpt-shell :recipe (:host github :repo "xenodium/chatgpt-shell"))
(package! copilot
  :recipe (:host github :repo "zerolfx/copilot.el" :files ("*.el" "dist")))
(package! keepass-mode)

;; For elfeed
(package! elfeed-tube)
;; (package! elfeed-score)
(package! hnreader)
(package! reddigg)

(package! wakatime-mode)

(package! consult-gh)
#+end_src
** Auto completion
#+begin_src emacs-lisp
(package! consult)
(package! embark)
(package! embark-consult)
(package! ivy-yasnippet)
(package! yasnippet-snippets)
(package! yankpad)
(package! company-tabnine)
(package! company-terraform)
#+end_src
** Indentation
#+begin_src emacs-lisp
(package! aggressive-indent)
#+end_src
** Navigation
Dir and friends:

#+begin_src emacs-lisp
(package! dirvish)
#+end_src

Window management

#+begin_src emacs-lisp
(package! switch-window)
#+end_src

Buffer management
#+begin_src emacs-lisp
(package! bufler)
#+end_src

ace-link

#+begin_src emacs-lisp
(package! ace-link)
#+end_src
** Security
#+begin_src emacs-lisp
(package! pinentry)
(package! exec-path-from-shell)
#+end_src


** Key management
#+begin_src emacs-lisp
(package! general)
#+end_src
** ORG mode
#+begin_src emacs-lisp
(package! org-modern)
(package! org-appear)
(package! mixed-pitch)
(package! svg-tag-mode)

;; org roam
(package! consult-org-roam)

(package! org-super-agenda)
(package! org-download)
(package! org-web-tools)
#+end_src
** Programming
#+begin_src emacs-lisp
(package! impatient-mode)
#+end_src
** Multimedia
#+begin_src emacs-lisp
(package! empv)
;; (package! ytdious)
#+end_src
** Searching
#+begin_src emacs-lisp
;; (package! deadgrep)
(package! rg)

#+end_src
** Documentation
#+begin_src emacs-lisp
(package! dictcc)
(package! leo)
(package! wordreference)
(package! google-translate)
#+end_src
** Browsing
#+begin_src emacs-lisp
(package! xwwp :recipe (:host github :repo "kchanqvq/xwwp"))
#+end_src
** Editing
#+begin_src emacs-lisp
(package! wrap-region)

;; Replacement for smartparens?
(package! puni)
#+end_src
** Reading
#+begin_src emacs-lisp
(package! olivetti)
(package! focus)
#+end_src
** Themes
#+begin_src emacs-lisp
(package! doom-themes)
(package! modus-themes)
(package! ef-themes)
(package! kaolin-themes)

(package! auto-dim-other-buffers)
#+end_src
** Exports
#+begin_src emacs-lisp
(package! copy-as-format)
(package! ox-hugo)
#+end_src
