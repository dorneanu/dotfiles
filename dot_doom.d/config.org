#+TITLE: Emacs Config
#+PROPERTY: header-args :mkdirp yes
#+PROPERTY: header-args:emacs-lisp :tangle ~/.doom.d/config.el :mkdirp yes :eval never-export :exports both

* Bootstrap
** Variables
#+begin_src emacs-lisp
(setq vd/is-termux
    (string-suffix-p "Android" (string-trim (shell-command-to-string "uname -a"))))
#+end_src
** Startup performance
#+begin_src emacs-lisp
  ;; -*- lexical-binding: t; -*-
  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))
  ;; Profile emacs startup
  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "*** Emacs loaded in %s seconds with %d garbage collections."
                       (emacs-init-time "%.2f")
                       gcs-done)))
#+end_src
** Server Mode
#+begin_src emacs-lisp
;; (server-start)
#+end_src

** Defaults
#+begin_src emacs-lisp
;; UTF-8 everywhere
(set-default-coding-systems 'utf-8)

;; Escape cancels everything
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src
* Keyboard Bindings
** Evil
#+begin_src emacs-lisp
(use-package evil
  :init
  (setq evil-want-integration t)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-keybinding nil)
  (setq evil-search-module 'evil-search)
  (setq evil-split-window-below t)
  (setq evil-vsplit-window-right t)
  (unless (display-graphic-p)
    (setq evil-want-C-i-jump nil))
  :config
  (evil-mode 1)
  ;; (setq evil-respect-visual-line-mode t)
  (evil-set-undo-system 'undo-tree)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join))
#+end_src
*** Addons
**** evil-surround
[[https://github.com/emacs-evil/evil-surround][evil-surround]] emulates one of my favorite vim plugins, surround.vim. Adds a lot of parentheses management options.

#+begin_src emacs-lisp
(use-package evil-surround
  :after evil
  :config
  (global-evil-surround-mode 1))
#+end_src
**** evil-commentary
[[https://github.com/linktohack/evil-commentary][evil-commentary]] emulates commentary.vim. It gives actions for quick insertion and deletion of comments.

#+begin_src emacs-lisp
(use-package evil-commentary
  :after evil
  :config
  (evil-commentary-mode))
#+end_src
**** evil-quickscope
[[https://github.com/blorbx/evil-quickscope][evil-quickscope]] emulates quickscope.vim. It highlights the important target characters for f, F, t, T keys.

#+begin_src emacs-lisp
(use-package evil-quickscope
  :after evil
  :config
  :hook ((prog-mode . turn-on-evil-quickscope-mode)
         (LaTeX-mode . turn-on-evil-quickscope-mode)
         (org-mode . turn-on-evil-quickscope-mode)))
#+end_src
**** evil-numbers
[[https://github.com/cofi/evil-numbers][evil-numbers]] allows incrementing and decrementing numbers at the point.
#+begin_src emacs-lisp
(use-package evil-numbers
  :commands (evil-numbers/inc-at-pt evil-numbers/dec-at-pt)
  :init
  ;; (general-nmap
  ;;   "g+" 'evil-numbers/inc-at-pt
  ;;   "g-" 'evil-numbers/dec-at-pt)
  )
#+end_src
**** evil-lion
[[https://github.com/edkolev/evil-lion][evil-lion]] provides alignment operators, somewhat similar to vim-easyalign.
#+begin_src emacs-lisp
(use-package evil-lion
  :config
  (setq evil-lion-left-align-key (kbd "g a"))
  (setq evil-lion-right-align-key (kbd "g A"))
  (evil-lion-mode))
#+end_src
**** evil-collection
[[https://github.com/emacs-evil/evil-collection][evil-collection]] is a package that provides evil bindings for a lot of different packages. One can see the complete list in the [[https://github.com/emacs-evil/evil-collection/tree/master/modes][modes]] folder.

#+begin_src emacs-lisp :noweb-ref minimal
(use-package evil-collection
  :after evil
  :init
  (setq evil-collection-company-use-tng nil)  ;; Is this a bug in evil-collection?
  :custom
  (evil-collection-outline-bind-tab-p nil)
  :config
  (setq evil-collection-mode-list
        (remove 'lispy evil-collection-mode-list))
  (evil-collection-init))
;; (use-package evil-collection
;;   :after evil
;;   :config
;;   (evil-collection-init
;;    '(eww
;;      devdocs
;;      proced
;;      emms
;;      pass
;;      calendar
;;      dired
;;      ivy
;;      debug
;;      guix
;;      calc
;;      docker
;;      ibuffer
;;      geiser
;;      pdf
;;      info
;;      elfeed
;;      edebug
;;      bookmark
;;      company
;;      vterm
;;      flycheck
;;      profiler
;;      cider
;;      explain-pause-mode
;;      notmuch
;;      custom
;;      xref
;;      eshell
;;      helpful
;;      compile
;;      comint
;;      git-timemachine
;;      magit
;;      prodigy
;;      slime
;;      )))
#+end_src
** which-key
#+begin_src emacs-lisp
(use-package which-key
  :config
  (setq which-key-idle-delay 0.3)
  (setq which-key-popup-type 'frame)
  (which-key-mode)
  (which-key-setup-side-window-bottom)
  (set-face-attribute 'which-key-local-map-description-face nil
		      :weight 'bold))
#+end_src
** general.el
#+begin_src emacs-lisp
(use-package! general
  :config
  (general-evil-setup t))

;; Create own leader key
(general-create-definer my-leader-def
  :keymaps '(normal insert visual emacs)
  :prefix "SPC"
  :non-normal-prefix "M-:")
#+end_src
** Global
#+begin_src emacs-lisp
(my-leader-def "?" 'which-key-show-top-level)
(my-leader-def "E" 'eval-expression)
#+end_src
*** Local leader
Prevent ~evil-snipe~ to overwrite doom local leader key.
#+begin_src emacs-lisp
(setq evil-snipe-override-evil-repeat-keys nil)
(setq doom-localleader-key ",")
(setq doom-localleader-alt-key "M-,")
#+end_src
*** Universal argument
#+begin_src emacs-lisp
(general-def
  :keymaps 'universal-argument-map
  "M-u" 'universal-argument-more)
(general-def
  :keymaps 'override
  :states '(normal motion emacs insert visual)
  "M-u" 'universal-argument)
#+end_src
*** Profiler
The built-in profiler is a magnificent tool to troubleshoot performance issues.
#+begin_src emacs-lisp
(my-leader-def
  :infix "P"
  "" '(:which-key "profiler")
  "s" 'profiler-start
  "e" 'profiler-stop
  "p" 'profiler-report)
#+end_src
*** Buffer switching
#+begin_src emacs-lisp
(general-define-key
  :keymaps 'override
  "C-<right>" 'evil-window-right
  "C-<left>" 'evil-window-left
  "C-<up>" 'evil-window-up
  "C-<down>" 'evil-window-down
  "C-h" 'evil-window-left
  "C-l" 'evil-window-right
  "C-k" 'evil-window-up
  "C-j" 'evil-window-down
  "C-x h" 'previous-buffer
  "C-x l" 'next-buffer)
#+end_src
*** Buffer management
#+begin_src emacs-lisp
(my-leader-def
  :infix "b"
  "" '(:which-key "buffers")
  "s" '((lambda () (interactive) (switch-to-buffer (persp-scratch-buffer)))
       :which-key "*scratch*")
  "m" '((lambda () (interactive) (persp-switch-to-buffer "*Messages*"))
       :which-key "*Messages*")
  "l" '(next-buffer :which-key "Next buffer")
  "h" '(previous-buffer :which-key "Previous buffer")
  "k" '(kill-buffer :which-key "Kill buffer")
  "b" '(persp-ivy-switch-buffer :which-key "Switch buffer")
  "r" '(revert-buffer :which-key "Revert buffer"))
#+end_src
*** Zooming
#+begin_src emacs-lisp
(defun my/zoom-in ()
  "Increase font size by 10 points"
  (interactive)
  (set-face-attribute 'default nil
                      :height
                      (+ (face-attribute 'default :height) 10)))

(defun my/zoom-out ()
  "Decrease font size by 10 points"
  (interactive)
  (set-face-attribute 'default nil
                      :height
                      (- (face-attribute 'default :height) 10)))

;; change font size, interactively
(global-set-key (kbd "C-+") 'my/zoom-in)
(global-set-key (kbd "C-=") 'my/zoom-out)
#+end_src
* UI
** Minimal interface
#+begin_src emacs-lisp
(setq inhibit-startup-message t)
(unless vd/is-termux
  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10))       ; Give some breathing room

(menu-bar-mode -1)            ; Disable the menu bar

;; Set up the visible bell
(setq visible-bell t)
#+end_src
** General settings
y or n instead of yes or no
#+begin_src emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

Hide mouse cursor while typing
#+begin_src emacs-lisp
(setq make-pointer-invisible t)
#+end_src

Show pairs
#+begin_src emacs-lisp
(show-paren-mode 1)
#+end_src

Highlight the current line
#+begin_src emacs-lisp
(global-hl-line-mode 1)
#+end_src
** Scrolling
#+begin_src emacs-lisp
(unless vd/is-termux
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
  (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
  (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
  (setq scroll-step 1) ;; keyboard scroll one line at a time
  (setq use-dialog-box nil))
#+end_src
** Windows size
#+begin_src emacs-lisp
(unless vd/is-termux
  ;; (set-frame-parameter (selected-frame) 'alpha '(90 . 90))
  ;; (add-to-list 'default-frame-alist '(alpha . (90 . 90)))
  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  (add-to-list 'default-frame-alist '(fullscreen . maximized)))
#+end_src
** Line numbers
#+begin_src emacs-lisp
(global-display-line-numbers-mode 1)
(line-number-mode nil)
(setq display-line-numbers-type 'visual)
(column-number-mode)
#+end_src
** Word wrapping
#+begin_src emacs-lisp
(setq word-wrap 1)
#+end_src
** Theme
Set theme
#+begin_src emacs-lisp
(setq doom-theme 'doom-monokai-pro)
#+end_src
*** Fonts
#+begin_src emacs-lisp
(setq doom-font (font-spec :family "Fira Mono" :size 15))
#+end_src
*** Icons
#+begin_src emacs-lisp
(use-package all-the-icons
  :if (display-graphic-p))
#+end_src
** Mode line
#+begin_src emacs-lisp
(use-package doom-modeline
  ;; :if (not (display-graphic-p))
  :hook (after-init . doom-modeline-init)
  :custom-face
      (mode-line ((t (:height 0.85))))
      (mode-line-inactive ((t (:height 0.85))))
  :config
  (setq doom-modeline-env-enable-python t)
  (setq doom-modeline-env-enable-go t)
  (setq doom-modeline-buffer-encoding 'nondefault)
  (setq doom-modeline-lsp t)
  (setq doom-modeline-hud t)
  (setq doom-modeline-persp-icon nil)
  (setq doom-modeline-persp-name nil)
  (setq doom-modeline-minor-modes nil)
  (setq doom-modeline-buffer-state-icon nil)
  (doom-modeline-mode 1))
#+end_src

** Dimmer
#+begin_src emacs-lisp
(use-package dimmer
  :disabled
  :custom
  (dimmer-fraction 0.5)
  (dimmer-exclusion-regexp-list
       '(".*Minibuf.*"
         ".*which-key.*"
         ".*NeoTree.*"
         ".*Messages.*"
         ".*Async.*"
         ".*Warnings.*"
         ".*LV.*"
         ".*Ilist.*"))
  :config
  (dimmer-mode t))
#+end_src
** Text highlight
Highlight indent guides.
#+begin_src emacs-lisp
(use-package highlight-indent-guides
  :hook (
         (prog-mode . highlight-indent-guides-mode)
         (vue-mode . highlight-indent-guides-mode)
         (LaTeX-mode . highlight-indent-guides-mode))
  :config
  (setq highlight-indent-guides-method 'bitmap)
  (setq highlight-indent-guides-bitmap-function 'highlight-indent-guides--bitmap-line))
#+end_src

Highlight symbol
#+begin_src emacs-lisp
(use-package highlight-symbol
  :bind
  (:map prog-mode-map
  ("M-o h" . highlight-symbol)
  ("M-p" . highlight-symbol-prev)
  ("M-n" . highlight-symbol-next)))
#+end_src

Rainbow parentheses.
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook ((prog-mode . rainbow-delimiters-mode)))
#+end_src

Highlight colors
#+begin_src emacs-lisp
(use-package rainbow-mode
  :commands (rainbow-mode))
#+end_src

Highlight TODOs and stuff
#+begin_src emacs-lisp
(use-package hl-todo
  :hook (prog-mode . hl-todo-mode))
#+end_src

#+begin_src emacs-lisp
(use-package paren
  :hook
  (after-init . show-paren-mode)
  :custom-face
  (show-paren-match ((nil (:background "#44475a" :foreground "#f1fa8c")))) ;; :box t
  :custom
  (show-paren-style 'mixed)
  (show-paren-when-point-inside-paren t)
  (show-paren-when-point-in-periphery t))
#+end_src
** Window Management
*** Window history with winner-mode
#+begin_src emacs-lisp
(use-package winner
  :after evil
  :config
  (winner-mode)
  (define-key evil-window-map "u" 'winner-undo)
  (define-key evil-window-map "U" 'winner-redo))
#+end_src
*** Zoom window
#+begin_src emacs-lisp
(use-package zoom-window
  :config
  (my-leader-def "Z" 'zoom-window-zoom))
#+end_src
*** Hydra
#+begin_src emacs-lisp
(defun sk/split-below-and-move ()
  (interactive)
  (split-window-below)
  (other-window 1))
(defun sk/split-right-and-move ()
  (interactive)
  (split-window-right)
  (other-window 1))

(defhydra sk/hydra-of-windows (:color red
                               :hint nil)
  "
 ^Move^    ^Size^    ^Change^                    ^Split^           ^Text^
 ^^^^^^^^^^^------------------------------------------------------------------
 ^ ^ _k_ ^ ^   ^ ^ _K_ ^ ^   _u_: winner-undo _o_: rotate  _v_: vertical     _+_: zoom in
 _h_ ^+^ _l_   _H_ ^+^ _L_   _r_: winner-redo            _s_: horizontal   _-_: zoom out
 ^ ^ _j_ ^ ^   ^ ^ _J_ ^ ^   _c_: close                  _z_: zoom         _q_: quit
"
  ("h" windmove-left)
  ("j" windmove-down)
  ("k" windmove-up)
  ("l" windmove-right)
  ("H" shrink-window-horizontally)
  ("K" shrink-window)
  ("J" enlarge-window)
  ("L" enlarge-window-horizontally)
  ("v" sk/split-right-and-move)
  ("s" sk/split-below-and-move)
  ("c" delete-window)
  ("f" sk/toggle-frame-fullscreen-non-native :color blue)
  ("o" sk/rotate-windows)
  ("z" delete-other-windows)
  ("u" (progn
         (winner-undo)
         (setq this-command 'winner-undo)))
  ("r" winner-redo)
  ("+" text-scale-increase)
  ("-" text-scale-decrease)
  ("q" nil :color blue))

(my-leader-def "mhw" 'sk/hydra-of-windows/body)
#+end_src
** screenshots.el
I have to load by defining a ~load-path~.
#+begin_src emacs-lisp
(use-package screenshot :load-path "~/.emacs.d/.local/straight/repos/screenshot")
#+end_src

* Editing
** Indentation
*** aggressive-indent-mode
#+begin_src emacs-lisp
(use-package aggressive-indent
  :commands (aggressive-indent-mode))
#+end_src
*** Tabs
#+begin_src emacs-lisp
(setq tab-always-indent nil)

(setq-default default-tab-width 4)
(setq-default tab-width 4)
(setq-default evil-indent-convert-tabs nil)
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
(setq-default evil-shift-round nil)
#+end_src
** Clipboard
#+begin_src emacs-lisp
(setq select-enable-clipboard t)
(setq mouse-yank-at-point t)
#+end_src
** Undo
#+begin_src emacs-lisp
(use-package undo-tree
  :init
  (global-undo-tree-mode 1))
#+end_src
** Snippets
#+begin_src emacs-lisp
(use-package yasnippet-snippets)

(use-package yasnippet
  :config
  (setq yas-snippet-dirs
	`(,(concat (expand-file-name user-emacs-directory) "snippets")
	  yasnippet-snippets-dir))
  (setq yas-triggers-in-field t)
  (yas-global-mode 1))
#+end_src
** smartparens
#+begin_src emacs-lisp
(use-package smartparens)
#+end_src
** iedit
Quick, fast edits of every symbol selected.
#+begin_src emacs-lisp
(use-package iedit
  :commands (iedit-mode))

(my-leader-def "s*" '(iedit-mode :which-key "Activate iedit-mode"))
#+end_src

** Expand region
A package to select an ever-increasing (or ever-decreasing) region of text.

#+begin_src emacs-lisp
(use-package expand-region
  :bind* (("M-m a o" . er/mark-org-code-block)
          ("M-m a w" . sk/mark-around-word)
          ("M-m a p" . sk/mark-around-text-paragraph)
          ("M-m a f" . er/mark-defun)
          ("M-m a e" . sk/mark-around-LaTeX-environment)
          ("M-m a t" . er/mark-LaTeX-math)
          ("M-m a m" . er/mark-python-block)
          ("M-m a j" . er/mark-ruby-block-up)
          ("M-m a q" . er/mark-outside-quotes)
          ("M-m a b" . er/mark-outside-pairs)
          ("M-m a u" . er/mark-url)
          ("M-m a c" . er/mark-comment)
          ("M-m a v" . sk/mark-around-symbol)
          ("M-m i p" . er/mark-text-paragraph)
          ("M-m i f" . er/mark-defun)
          ("M-m i w" . er/mark-word)
          ("M-m i e" . er/mark-LaTeX-inside-environment)
          ("M-m i t" . sk/mark-inside-LaTeX-math)
          ("M-m i u" . er/mark-url)
          ("M-m i c" . er/mark-comment)
          ("M-m i b" . er/mark-inside-pairs)
          ("M-m i q" . er/mark-inside-quotes)
          ("M-m i o" . sk/mark-inside-org-code)
          ("M-m i m" . sk/mark-inside-python-block)
          ("M-m i j" . sk/mark-inside-ruby-block)
          ("M-m i v" . er/mark-symbol)))
#+end_src

** Visual fill column mode
#+begin_src emacs-lisp
(use-package visual-fill-column
  :commands (visual-fill-column-mode)
  :config
  (add-hook 'visual-fill-column-mode-hook
            (lambda () (setq visual-fill-column-center-text t))))
#+end_src
** parinfer for lispy languages
#+begin_src emacs-lisp
(use-package parinfer
  :disabled
  :hook ((clojure-mode . parinfer-mode)
         (emacs-lisp-mode . parinfer-mode)
         (common-lisp-mode . parinfer-mode)
         (scheme-mode . parinfer-mode)
         (lisp-mode . parinfer-mode))
  :config
  (setq parinfer-extensions
      '(defaults       ; should be included.
        pretty-parens  ; different paren styles for different modes.
        evil           ; If you use Evil.
        smart-tab      ; C-b & C-f jump positions and smart shift with tab & S-tab.
        smart-yank)))  ; Yank behavior depend on mode.

;; (my-leader-def
;;   "tp" 'parinfer-toggle-mode)
#+end_src
*
* Navigation
** avy
#+begin_src emacs-lisp
(use-package avy
  :commands (avy-goto-char avy-goto-word-0 avy-goto-line))

(my-leader-def
  "j"   '(:ignore t :which-key "jump")
  "jj"  '(avy-goto-char :which-key "jump to char")
  "jw"  '(avy-goto-word-0 :which-key "jump to word")
  "jl"  '(avy-goto-line :which-key "jump to line"))
#+end_src
* Registers
** Hydra
#+begin_src emacs-lisp
(defhydra sk/hydra-registers (:color blue
                              :hint nil)
  "
 _a_: append     _c_: copy-to    _j_: jump       _r_: rectangle-copy   _q_: quit
 _i_: insert     _n_: number-to  _f_: frameset   _w_: window-config
 _+_: increment  _p_: point-to
  "
  ("a" append-to-register)
  ("c" copy-to-register)
  ("i" insert-register)
  ("f" frameset-to-register)
  ("j" jump-to-register)
  ("n" number-to-register)
  ("r" copy-rectangle-to-register)
  ("w" window-configuration-to-register)
  ("+" increment-register)
  ("p" point-to-register)
  ("q" nil :color blue))

(my-leader-def "r\"" '(sk/hydra-registers/body :which-key "Hydra for registers"))
#+end_src
* Projects
** Projectile
#+begin_src emacs-lisp
(use-package projectile
  :config
  (projectile-mode))

(my-leader-def
  :infix "mp"
  ""   '(:ipgnore t :which-key "Projects")
  "f"  'propjectile-find-file
  "s"  'propjectile-switch-project
  "F"  'conpsult-ripgrep
  "p"  'propjectile-find-file
  "c"  'projectile-compile-project
  "d"  'projectile-dired)


(use-package counsel-projectile
  :after (counsel projectile))
#+end_src
** Git/Magit
#+begin_src emacs-lisp
(use-package magit
  :commands (magit-status magit-file-dispatch)
  :config
  (setq magit-blame-styles
        '((margin
           (margin-format    . ("%a %A %s"))
           (margin-width     . 42)
           (margin-face      . magit-blame-margin)
           (margin-body-face . (magit-blame-dimmed)))
          (headings
           (heading-format   . "%-20a %C %s\n"))
          (highlight
           (highlight-face   . magit-blame-highlight))
          (lines
           (show-lines       . t)
           (show-message     . t)))))

(use-package forge
  :after magit
  :config
  (add-to-list 'forge-alist '("gitlab.etu.ru"
                              "gitlab.etu.ru/api/v4"
                              "gitlab.etu.ru"
                              forge-gitlab-repository)))
(use-package git-gutter
    :custom
    (git-gutter:modified-sign "~")
    (git-gutter:added-sign    "+")
    (git-gutter:deleted-sign  "-")
    :custom-face
    (git-gutter:modified ((t (:foreground "#f1fa8c" :background "#f1fa8c"))))
    (git-gutter:added    ((t (:foreground "#50fa7b" :background "#50fa7b"))))
    (git-gutter:deleted  ((t (:foreground "#ff79c6" :background "#ff79c6"))))
    :config
    (global-git-gutter-mode +1))

(use-package git-timemachine
  :commands (git-timemachine))
#+end_src
*** diff-hl
Highlight git diffs on the fly
#+begin_src emacs-lisp
(use-package diff-hl
  :commands (global-diff-hl-mode
             diff-hl-mode
             diff-hl-next-hunk
             diff-hl-previous-hunk
             diff-hl-mark-hunk
             diff-hl-diff-goto-hunk
             diff-hl-revert-hunk)
  :config
  (global-diff-hl-mode)
  (diff-hl-flydiff-mode)
  (diff-hl-margin-mode)
  (diff-hl-dired-mode))

(my-leader-def
  :infix "md"
  "[ h"  'diff-hl-previous-hunk
  "i h"  'diff-hl-mark-hunk
  "a h"  'diff-hl-mark-hunk
  "g h"  'diff-hl-diff-goto-hunk)
#+end_src
* Languages
** LSP
** Golang
#+begin_src emacs-lisp
(use-package go-mode
  :mode "\\.go\\'"
  :custom (gofmt-command "goimports")
  :config
  (defun lsp-go-install-save-hooks ()
    (add-hook 'before-save-hook #'lsp-format-buffer t t)
    (add-hook 'before-save-hook #'lsp-organize-imports t t))

  ;; (my/set-smartparens-indent 'go-mode)
  (add-hook 'go-mode-hook #'lsp-go-install-save-hooks)
  (add-hook 'go-mode-hook #'smartparens-mode)
  (add-hook 'go-mode-hook #'hs-minor-mode))

  (use-package gotest)
  (use-package go-tag
      :config (setq go-tag-args (list "-transform" "camelcase")))
#+end_src

** Python
** Web
#+begin_src emacs-lisp
(use-package emmet-mode
  :hook ((vue-html-mode . emmet-mode)
         (svelte-mode . emmet-mode)
         (web-mode . emmet-mode)
         (html-mode . emmet-mode)
         (css-mode . emmet-mode)
         (scss-mode . emmet-mode))
  :config
  ;; (setq emmet-indent-after-insert nil)
  (setq my/emmet-mmm-submodes '(vue-html-mode css-mode))
  (defun my/emmet-or-tab (&optional arg)
    (interactive)
    (if (and
         (boundp 'mmm-current-submode)
         mmm-current-submode
         (not (member mmm-current-submode my/emmet-mmm-submodes)))
        (indent-for-tab-command arg)
      (or (emmet-expand-line arg)
          (emmet-go-to-edit-point 1)
          (indent-for-tab-command arg))))
  (general-imap :keymaps 'emmet-mode-keymap
    "TAB" 'my/emmet-or-tab
    "<backtab>" 'emmet-prev-edit-point))
#+end_src

** Lisp
** Data serialization
*** JSON
#+begin_src emacs-lisp
(use-package json-mode
  :mode "\\.json\\'"
  :config
  (add-hook 'json-mode #'smartparens-mode)
  (add-hook 'json-mode #'hs-minor-mode))
#+end_src
*** CSV
#+begin_src emacs-lisp
(use-package csv-mode
  :mode "\\.csv\\'")
#+end_src
*** YAML
#+begin_src emacs-lisp
(use-package yaml-mode
  :mode "\\.yml\\'"
  :config
  (add-hook 'yaml-mode-hook 'smartparens-mode)
  (add-hook 'yaml-mode-hook 'highlight-indent-guides-mode)
  (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode)))
#+end_src
* Completion
** ivy
#+begin_src emacs-lisp
(use-package ivy
  :diminish
  :config
  ;; :bind (("C-s" . swiper)
  ;;        :map ivy-minibuffer-map
  ;;        ("TAB" . ivy-alt-done)
  ;;        ("C-f" . ivy-alt-done)
  ;;        ("C-l" . ivy-alt-done)
  ;;        ("C-j" . ivy-next-line)
  ;;        ("C-k" . ivy-previous-line)
  ;;        :map ivy-switch-buffer-map
  ;;        ("C-k" . ivy-previous-line)
  ;;        ("C-l" . ivy-done)
  ;;        ("C-d" . ivy-switch-buffer-kill)
  ;;        :map ivy-reverse-i-search-map
  ;;        ("C-k" . ivy-previous-line)
  ;;        ("C-d" . ivy-reverse-i-search-kill))
  :init
  (ivy-mode 1)
  :config
  (setq ivy-use-virtual-buffers t)
  (setq ivy-wrap t)
  (setq ivy-count-format "(%d/%d) ")
  (setq enable-recursive-minibuffers t)

  ;; Use different regex strategies per completion command
  (push '(completion-at-point . ivy--regex-fuzzy) ivy-re-builders-alist) ;; This doesn't seem to work...
  (push '(swiper . ivy--regex-ignore-order) ivy-re-builders-alist)
  (push '(counsel-M-x . ivy--regex-ignore-order) ivy-re-builders-alist)

  ;; Set minibuffer height for different commands
  (setf (alist-get 'counsel-projectile-ag ivy-height-alist) 15)
  (setf (alist-get 'counsel-projectile-rg ivy-height-alist) 15)
  (setf (alist-get 'swiper ivy-height-alist) 15)
  (setf (alist-get 'counsel-switch-buffer ivy-height-alist) 7)
  (setq ivy-use-virtual-buffers t))

#+end_src
** ivy-rich
[[https://github.com/Yevgnen/ivy-rich][ivy-rich]] provides a more informative interface for ivy.
#+begin_src emacs-lisp
(use-package ivy-rich
  :after ivy
  :config
  (ivy-rich-mode 1)
  (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line))
#+end_src
** ivy-prescient
A package that enhances sorting & filtering of candidates. =ivy-prescient= adds integration with Ivy.

References:
- [[https://github.com/raxod502/prescient.el][prescient.el repo]]
#+begin_src emacs-lisp :noweb yes
(use-package ivy-prescient
  :after counsel
  :config
  (ivy-prescient-mode +1)
  (setq ivy-prescient-retain-classic-highlighting t)
  (prescient-persist-mode 1)
  (setq ivy-prescient-sort-commands
        '(:not swiper
               swiper-isearch
               ivy-switch-buffer
               ;; ivy-resume
               ;; ivy--restore-session
               lsp-ivy-workspace-symbol
               dap-switch-stack-frame
               my/dap-switch-stack-frame
               dap-switch-session
               dap-switch-thread
               counsel-grep
               ;; counsel-find-file
               counsel-git-grep
               counsel-rg
               counsel-ag
               counsel-ack
               counsel-fzf
               counsel-pt
               counsel-imenu
               counsel-yank-pop
               counsel-recentf
               counsel-buffer-or-recentf
               proced-filter-interactive
               proced-sort-interactive
               my/persp-ivy-switch-buffer-other-window
               lsp-execute-code-action))
  ;; Do not use prescient in find-file
  (ivy--alist-set 'ivy-sort-functions-alist #'read-file-name-internal #'ivy-sort-file-function-default))
#+end_src

** counsel
#+begin_src emacs-lisp
(use-package counsel
  :after ivy
  :config
  (counsel-mode))
#+end_src
** swipper
#+begin_src emacs-lisp
(use-package swiper
  :after ivy)
#+end_src
** company
#+begin_src emacs-lisp
(use-package company
  :config
  (global-company-mode)
  (setq company-idle-delay 0.125)
  (setq company-dabbrev-downcase nil)
  (setq company-show-numbers t))
#+end_src
** key bindings
#+begin_src emacs-lisp
(my-leader-def
  :infix "m"
  "s" '(swiper-isearch :which-key "swipper-isearch")
  "S" '(swiper-all :which-key "swipper-all"))

(general-define-key
 :keymaps '(ivy-minibuffer-map swiper-map)
 "M-j" 'ivy-next-line
 "M-k" 'ivy-previous-line
 "<C-return>" 'ivy-call
 "M-RET" 'ivy-immediate-done
 [escape] 'minibuffer-keyboard-quit)
#+end_src
* ORG Mode
** Basic
#+begin_src emacs-lisp :noweb yes
(use-package org
  :defer t
  :init
  (setq org-directory "~/work/repos/org/")
  :config
  ;; general
  (setq org-startup-indented t)
  (setq org-return-follows-link t)
  (setq org-src-tab-acts-natively nil)

  ;; right-align tags
  (setq org-tags-column 100)
  (setq org-agenda-tags-column 100)
  (setq org-use-tag-inheritance t)

  ;; set indentation
  (setq org-startup-indented t)
  (setq org-indent-indentation-per-level 2)
  (setq org-edit-src-content-indentation 0)
  (setq org-src-preserve-indentation t)

  ;; No blank lines before new entries
  (setq org-blank-before-new-entry
        '((heading . nil)
          (plain-list-item . nil)))

  ;; do logging
  (setq org-log-into-drawer t)
  (setq org-log-done t)
  (setq org-log-reschedule nil)
  (setq org-log-redeadline nil)

  ;; disable org-babel execution while exporting
  (setq org-confirm-babel-evaluate nil)
  (setq org-export-use-babel t)

  ;; Use the special C-a, C-e and C-k definitions for Org, which enable some special behavior in headings.
  (setq org-special-ctrl-a/e t)
  (setq org-special-ctrl-k t)

  ;; Clean look
  (setq org-hide-emphasis-markers t
        org-fontify-done-headline t
        org-hide-leading-stars t
        org-pretty-entities t)

  ;; Refiling
  ;; Allow to create new nodes when refiling
  (setq org-refile-targets '((nil :maxlevel . 9)
                         (org-agenda-files :maxlevel . 9)))
  (setq org-refile-allow-creating-parent-nodes 'confirm)

  ;; Open GPG files in org mode
  (add-to-list 'auto-mode-alist '("\\.gpg\\'" . org-mode))

  (add-hook 'org-mode-hook 'smartparens-mode)
  (add-hook 'org-mode-hook
            (lambda ()
              (rainbow-delimiters-mode -1)))


  <<org-crypt-setup>>
  (unless vd/is-termux
    <<org-lang-setup>>)
  <<org-ui-setup>>
  <<org-keys-setup>>
  <<org-productivity-setup>>)
#+end_src
** Block templates
#+begin_src emacs-lisp
(use-package org-tempo
  :config
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("sq" . "src sql"))
  (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
  (add-to-list 'org-structure-template-alist '("sc" . "src scheme"))
  (add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
  (add-to-list 'org-structure-template-alist '("go" . "src go"))
  (add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
  (add-to-list 'org-structure-template-alist '("json" . "src json"))
  )
#+end_src
** UI
*** org-bars
[[https://github.com/tonyaldon/org-bars][org-bars]] highlights Org indentation with bars.
#+begin_src emacs-lisp
(use-package org-bars
  :if (display-graphic-p)
  :config
  (setq org-bars-color-options '(
                                 :only-one-color t
                                 :bar-color "#8c8c8c"
                                 :desaturate-level-faces 10
                                 :darken-level-faces 5))
  )

(my-leader-def
  "mtb" '(org-bars-mode :keymaps '(org-mode-map) :which-key "Activate org-bars mode"))
#+end_src
** org-contrib
=org-contrib= is a package with various additions to Org. I use the following:
- =ox-extra= - extensions for org export

Excluding =org-contacts= from here because byte compilation breaks it for some reason.

#+begin_src emacs-lisp
(use-package org-contrib
  :after (org)
  :config
  (require 'ox-extra)
  (ox-extras-activate '(latex-header-blocks ignore-headlines)))
#+end_src
** org-agenda
#+begin_src emacs-lisp
(use-package org-agenda
  :after org
  :config
  (setq
   org-agenda-files (list org-directory)
   org-agenda-file-regexp
   (replace-regexp-in-string "\\\\\\.org" "\\\\.org\\\\(\\\\.gpg\\\\)?"
                             org-agenda-file-regexp)

   ;; Skip done tasks
   org-agenda-skip-scheduled-if-done t
   org-agenda-skip-deadline-if-done t

   ;; Show warnings for deadlines 7 days in advance.
   org-deadline-warning-days 5
   org-agenda-include-deadlines t
   org-agenda-todo-list-sublevels t

   ;; org-agenda-todo-ignore-scheduled 'all
   ;; org-agenda-todo-ignore-deadlines 'all
   ;; org-agenda-todo-ignore-with-date 'all

   ;; Use straight line as separator between agenda blocks
   ;; https://www.utf8-chartable.de/unicode-utf8-table.pl?start=9472&utf8=dec&unicodeinhtml=dec
   org-agenda-block-separator 9472
   org-agenda-format-date "%Y-%m-%d ---------------------------------------------------------------------"
   org-agenda-compact-blocks t
   org-agenda-start-day nil ;; i.e. today
   org-agenda-span 1
   org-agenda-start-on-weekday nil

   ;; Clock report settings
   org-agenda-start-with-clockreport-mode t
   org-clock-report-include-clocking-task t
   org-agenda-clockreport-parameter-plist
   '(:link t :maxlevel 6 :fileskip0 t :compact nil :narrow 90)

   ;; http://doc.endlessparentheses.com/Var/org-agenda-prefix-format.html
   org-agenda-prefix-format
   '((agenda . "%5c %4e %?-12t %s")
     (todo   . " %4e %-12c")
     (tags   . " %-22c")
     (search . " %-12c"))
   )
  (add-hook 'org-agenda-mode-hook
            (lambda ()
              (visual-line-mode -1)
              (toggle-truncate-lines 1)
              (display-line-numbers-mode 0)))
  )
#+end_src
** org-super-agenda
Define custom org agenda commands.
Inspired by https://www.rousette.org.uk/archives/doom-emacs-tweaks-org-journal-and-org-super-agenda/

#+begin_src emacs-lisp
(use-package org-super-agenda
  :after org-agenda
  :config
  (setq org-agenda-custom-commands
        '(
          ("a" "Agenda"
           ((agenda "" ((org-agend-span 'day)
                        (org-super-agenda-groups
                         '(
                           (:name "Today"
                            :time-grid t
                            :date today
                            :scheduled today
                            :order 1)
                           (:discard (:anything))))))
            (alltodo "" ((org-agenda-overriding-header "")
                         (org-agenda-prefix-format '(
                                                     (agenda . "%7c %4e %?-12t %s")
                                                     (todo . " %-8c [%-4e] %?-12t %s")
                                                     (tags   . " %-22c")
                                                     (search . " %-12c")
                                                     ))
                         (org-super-agenda-groups
                          '(
                            (:log t)
                            (:discard (:tag "inactive"))
                            (:name "Started"
                             :todo ("STARTED")
                             :order 1)
                            (:name "Quickies"
                             :and (:effort< "0:15" :not (:tag "recurring"))
                             )
                            (:name "Overdue"
                             :deadline past
                             :scheduled past
                             :order 2)
                            (:name "Soon"
                             :deadline feature
                             :scheduled feature
                             :order 2)
                            (:name "To refile"
                             :category "inbox"
                             :todo ""
                             :order 10)
                            (:name "Next to do"
                             :todo "NEXT"
                             :order 20)
                            (:name "WIP"
                             :todo ("WIP")
                             :order 40)
                            (:name "Waiting"
                             :todo "WAITING"
                             :order 50)
                            (:discard (:anything))))))
            (alltodo "" ((org-agenda-overriding-header "")
                         (org-agenda-hide-tags-regexp "project\\|ticket\\|active")
                         (org-agenda-prefix-format '((todo . " %-8c [%-4e] %?-12t %s")))
                         (org-super-agenda-groups
                          '(
                            (:log t)
                            (:discard (:tag "inactive"))
                            (:name "Projects"
                             :auto-property "project"
                             :order 1)
                            (:discard (:anything))))))))
          ("w" "Work"
           ((agenda "" ((org-agend-span 'day)
                        (org-super-agenda-groups
                         '(
                           (:discard (:not (:category ("work"))))
                           (:name "Today"
                            :time-grid t
                            :date today
                            :scheduled today
                            :order 1)
                           ))))
            (alltodo "" ((org-agenda-overriding-header "")
                         (org-super-agenda-groups
                          '(
                            (:discard (:not (:category ("work"))))
                            (:discard (:tag "inactive"))
                            (:log t)
                            (:name "Due Today"
                             :deadline today
                             :order 1)
                            (:name "Started"
                             :todo "STARTED"
                             :order 1)
                            (:name "Next to do"
                             :todo "NEXT"
                             :order 2)
                            (:name "Waiting"
                             :todo "WAITING"
                             :order 50)
                            (:discard (:anything))))))))
          ("p" "Private"
           ((agenda "" ((org-agend-span 'day)
                        (org-super-agenda-groups
                         '((:discard (:not (:category ("priv"))))
                           ))))
            (alltodo "" ((org-agenda-overriding-header "")
                         (org-super-agenda-groups
                          '(
                            (:discard (:not (:category ("priv"))))
                            (:discard (:tag "inactive"))
                            (:log t)
                            (:name "Due Today"
                             :deadline today
                             :order 1)
                            (:name "Started"
                             :todo "STARTED"
                             :order 1)
                            (:name "Next to do"
                             :todo "NEXT"
                             :order 2)
                            (:name "Waiting"
                             :todo "WAITING"
                             :order 50)
                            (:name "ToDo"
                             :auto-property "agenda-group"
                             :todo "TODO"
                             :order 60)
                            (:discard (:anything))))))))
          ("P" "Private (ALL))"
           ((agenda "" ((org-agend-span 'day)
                        (org-super-agenda-groups
                         '((:discard (:not (:category ("priv"))))
                           ))))
            (alltodo "" ((org-agenda-overriding-header "")
                         (org-super-agenda-groups
                          '(
                            (:discard (:not (:category ("priv"))))
                            (:discard (:tag "inactive"))
                            (:log t)
                            (:name "Due Today"
                             :deadline today
                             :order 1)
                            (:name "Started"
                             :todo "STARTED"
                             :order 1)
                            (:name "Next to do"
                             :todo "NEXT"
                             :order 2)
                            (:name "Waiting"
                             :todo "WAITING"
                             :order 50)
                            (:name "ToDo"
                             :auto-property "agenda-group"
                             :todo "TODO"
                             :order 60)
                            (:name "Others"
                             :todo ""
                             :order 70)

                            ))))))
          ("h" "Home"
           ((agenda "" ((org-agend-span 'day)
                        (org-super-agenda-groups
                         '((:discard (:not (:category ("home"))))
                           ))))
            (alltodo "" ((org-agenda-overriding-header "Home ")
                         (org-super-agenda-groups
                          '(
                            (:discard (:not (:category ("home"))))
                            (:log t)
                            (:name "Started"
                             :todo "STARTED"
                             :order 1)
                            (:name "Next to do"
                             :todo "NEXT"
                             :order 2)
                            (:name "Waiting"
                             :todo "WAITING"
                             :order 50)
                            (:name "ToDo"
                             :auto-property "agenda-group"
                             :todo t
                             :order 60)
                            (:discard (:anything))))))))

          ("H" "Home (ALL)"
           ((agenda "" ((org-agend-span 'day)
                        (org-super-agenda-groups
                         '((:discard (:not (:category ("home"))))
                           ))))
            (alltodo "" ((org-agenda-overriding-header "Home ")
                         (org-super-agenda-groups
                          '(
                            (:discard (:not (:category ("home"))))
                            (:log t)
                            (:name "Started"
                             :todo "STARTED"
                             :order 1)
                            (:name "Next to do"
                             :todo "NEXT"
                             :order 2)
                            (:name "Waiting"
                             :todo "WAITING"
                             :order 50)
                            (:name "ToDo"
                             :auto-property "agenda-group"
                             :todo t
                             :order 60)
                            ))))))
          ))
  :config
  (org-super-agenda-mode))
#+end_src
** org-todo
#+begin_src emacs-lisp :tangle no :noweb-ref org-productivity-setup
;; TODO keywords
(setq org-todo-keywords '((sequence "TODO(t)" "WIP(i)"  "MEETING(m)" "STARTED(s)" "NEXT(n)" "WAITING(w)" "|" "DONE(d)" "CANCELED(c)")))
(setq org-todo-keyword-faces
      '(("WIP" . (:foreground "brightblue" :weight bold))
        ("NEXT" . (:foreground "IndianRed1" :weight bold))
        ("TODO" . (:foreground "green" :weight bold))
        ("MEETING" . (:foreground "forest green" :weight bold))
        ("STARTED" . (:foreground "OrangeRed" :weight bold))
        ("WAITING" . (:foreground "coral" :weight bold))
        ("CANCELED" . (:foreground "Red" :weight bold))
        ;; ("DELEGATED" . (:foreground "LimeGreen" :weight bold))
        ;; ("SOMEDAY" . (:foreground "LimeGreen" :weight bold))
        ;; ("BUG" . (:foreground "Orange" :weight bold))
        ;; ("PING" . (:foreground "Green" :weight bold))
        ))
#+end_src
** org-capture
#+begin_src emacs-lisp
(use-package org-capture
  :after org
  :defer 1
  :custom
  (org-capture-templates
   '(
     ;; ("l" "Ledger")
     ;; ("lb" "Bank" plain (file "~/work/repos/org/main.ledger.gpg")
     ;;     "%(org-read-date) * %^{Description}\n\tExpenses:%^{Account}  %^{Amount}EUR\n\tAssets:Current:ING:Visa\n"
     ;;     :empty-lines 1)
     ;; ("lc" "Cash" plain (file "~/work/sync/org/main.ledger"),
     ;;     "%(org-read-date) * %^{Payee}
     ;;     Expenses:%^{Account}  €%^{Amount}
     ;;     Assets:Cash:Wallet"
     ;;     :empty-lines 1)

     ;; Docs
     ;; - Elements: https://orgmode.org/manual/Template-elements.html
     ;; - Expansion: https://orgmode.org/manual/Template-expansion.html
     ("t" "Todo" entry (file+headline "~/work/repos/org/inbox.org" "Tasks")
      "* TODO %?\n:PROPERTIES:\n:CREATED: %U\n:END:\n %i\n")

     ("T" "Project Todo" entry (file+headline "~/work/repos/org/inbox.org" "Tasks")
      "* TODO %^{Description}\n:PROPERTIES:\n:CREATED: %U\n:END:\nDesired outcome: %^{Desired outcome} %i\n")

     ("m" "Meeting" entry (file+headline "~/work/repos/org/inbox.org" "Meetings")
      "* MEETING %?\nSCHEDULED: %t\n:PROPERTIES:\n:CREATED: %U\n:END:\n %i\n")

     ("b" "Bookmark (Clipboard)" entry (file+headline "~/work/repos/org/bookmarks.org" "Bookmarks")
      "** %(org-web-tools-insert-link-for-clipboard-url)\n:PROPERTIES:\n:TIMESTAMP: %t\n:END:\n%?"  :prepend t)

     ("s" "Code Snippet" entry
      (file+headline "~/work/repos/org/inbox.org" "Snippets")
      "* %?\t%^g\n#+BEGIN_SRC %^{language}\n\n#+END_SRC")

     ;; How to use custom lambda for finding the right heading
     ;; ("y" "Work Task" entry (file+function
     ;;                         "~/org/journal/work.org"
     ;;                         (lambda ()
     ;;                           (org-datetree-find-date-create
     ;;                            (org-date-to-gregorian (org-today)) t)
     ;;                           (re-search-forward "^\\*.+ log" nil t)))
     ;;  "* TODO %?\n%U" :empty-lines 1)

     ("j" "Journal" entry (file+datetree "~/work/repos/org/journal.org")
      "*  %?\n" :tree-type week :empty-lines 0)
     )
   )
  :bind
  ("C-c c"  . org-capture)
)
#+end_src

** org-ql
[[https://github.com/alphapapa/org-ql][org-ql]] is a package to query the org files. I'm using it in my review workflow and for custom agenda views.

#+begin_src emacs-lisp :tangle no :noweb-ref org-productivity-setup
(use-package org-ql)
#+end_src

** org-journal
[[https://github.com/bastibe/org-journal][org-journal]] is a plugin for maintaining a journal in org mode. I want(ed) to have its entries separate from my knowledge base.

I've tried switching to Org Roam Dailies, but in the end decided that org-journal fits my workflow better.

#+begin_src emacs-lisp
(use-package org-journal
  :after org
  :config
  (setq org-journal-dir (concat org-directory "/journal"))
  (setq org-journal-file-type 'weekly)
  (setq org-journal-file-format "%Y-%m-%d.org")
  (setq org-journal-date-format "%Y-%m-%d")
  (setq org-journal-enable-encryption t))

(my-leader-def
  :infix "oj"
  "" '(:which-key "org-journal")
  "j" 'org-journal-new-entry
  "o" 'org-journal-open-current-journal-file
  "s" 'org-journal-tags-status)
#+end_src
** org-pomodoro
#+begin_src emacs-lisp
(use-package org-pomodoro
  :after (org org-agenda)
  :commands (org-pomodoro)
  :config
  (setq
   org-pomodoro-length 50
   org-pomodoro-short-break-length 10
   )
  ;; :config
  ;; (add-hook 'org-pomodoro-started-hook
  ;;           (lambda ()
  ;;             (shell-command "ssh mac say 'Pomodoro gestartet'")
  ;;             ))
  ;; (add-hook 'org-pomodoro-finished-hook
  ;;           (lambda ()
  ;;             (shell-command "ssh mac say 'Pomodoro fertig. Mach eine Pause!'")
  ;;             ))
  ;; (add-hook 'org-pomodoro-break-finished-hook
  ;;           (lambda ()
  ;;             (shell-command "ssh mac say 'Pause fertig'")
  ;;             ))
  ;; (add-hook 'org-pomodoro-killed-hook
  ;;           (lambda ()
  ;;             (shell-command "ssh mac say 'Pomodoro gekilled'")
  ;;             ))
  )
#+end_src
** evil-org
A package to add more evil-mode keybindings to org-mode.

#+begin_src emacs-lisp
(use-package evil-org
  :hook (org-mode . evil-org-mode)
  :config
  (add-hook 'evil-org-mode-hook
            (lambda ()
              (evil-org-set-key-theme '(navigation insert textobjects additional calendar todo))))
  (add-to-list 'evil-emacs-state-modes 'org-agenda-mode)
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))
#+end_src

** Encryption
*** epa-file
#+begin_src emacs-lisp
(use-package epa-file
  :ensure nil ;; included with Emacs
  :config
  (setq
   epa-file-encrypt-to '("")
   epa-pinentry-mode 'ask)
  :custom
  (epa-file-select-keys 'silent))
#+end_src
*** org-crypt
#+begin_src emacs-lisp
(use-package org-crypt
  :ensure nil  ;; included with org-mode
  :after org
  :config
  (org-crypt-use-before-save-magic)
  (setq org-tags-exclude-from-inheritance (quote ("crypt")))
  :custom
  (org-crypt-key ""))
#+end_src
** Utils
*** copy a link
#+begin_src emacs-lisp :noweb-ref org-keys-setup
(defun vd/org-link-copy (&optional arg)
  "extract url from org-mode link and add it to kill ring."
  (interactive "p")
  (let* ((link (org-element-lineage (org-element-context) '(link) t))
         (type (org-element-property :type link))
         (url (org-element-property :path link))
         (url (concat type ":" url)))
    (kill-new url)
    (message (concat "copied url: " url))))

(general-nmap :keymaps 'org-mode-map
  "c-x C-l" 'vd/org-link-copy)
#+end_src

* Applications
** RSS
*** elfeed
#+begin_src emacs-lisp
(use-package elfeed
  :commands (elfeed)
  :config
  (setq elfeed-db-directory "~/.elfeed")
  (setq elfeed-enclosure-default-dir (expand-file-name "~/Downloads"))

  (defun elfeed-search-format-date (date)
    (format-time-string "%Y-%m-%d %H:%M" (seconds-to-time date)))

  (setq elfeed-search-filter "@1-week-ago +unread"
        elfeed-search-print-entry-function 'elfeed-search-print-entry--default
        elfeed-search-title-max-width 100
        elfeed-show-entry-switch 'elfeed-display-buffer
        ;; elfeed-show-entry-delete #'+rss/delete-pane
        ;; elfeed-show-refresh-function #'+rss/elfeed-show-refresh--better-style
        shr-max-image-proportion 0.6)

  ;; Define maps
  (map! :map elfeed-search-mode-map
        :after elfeed-search
        [remap kill-this-buffer] "q"
        [remap kill-buffer] "q"
        :n doom-leader-key nil
        :n "q" #'+rss/quit
        :n "e" #'elfeed-update
        :n "r" #'elfeed-search-untag-all-unread
        :n "u" #'elfeed-search-tag-all-unread
        :n "s" #'elfeed-search-live-filter
        :n "RET" #'elfeed-search-show-entry
        :n "p" #'elfeed-show-pdf
        :n "+" #'elfeed-search-tag-all
        :n "-" #'elfeed-search-untag-all
        :n "S" #'elfeed-search-set-filter
        :n "b" #'elfeed-search-browse-url
        :n "B" #'ap/elfeed-search-browse-org
        :n "a" #'pocket-reader-elfeed-search-add-link
        :n "y" #'elfeed-search-yank)
  (map! :map elfeed-show-mode-map
        :after elfeed-show
        [remap kill-this-buffer] "q"
        [remap kill-buffer] "q"
        :n doom-leader-key nil
        :nm "q" #'+rss/delete-pane
        :nm "a" #'pocket-reader-elfeed-entry-add-link
        :n "B" #'ap/elfeed-search-browse-entry
        :nm "o" #'ace-link-elfeed
        :nm "RET" #'org-ref-elfeed-add
        :nm "n" #'elfeed-show-next
        :nm "N" #'elfeed-show-prev
        :nm "p" #'elfeed-show-pdf
        :nm "+" #'elfeed-show-tag
        :nm "-" #'elfeed-show-untag
        :nm "s" #'elfeed-show-new-live-search
        :nm "y" #'elfeed-show-yank)

  (add-hook! 'elfeed-show-mode-hook (hide-mode-line-mode 1))
  (add-hook! 'elfeed-search-update-hook #'hide-mode-line-mode)

  (defun elfeed-display-buffer (buf &optional act)
    (pop-to-buffer buf)
    (set-window-text-height (get-buffer-window) (round (* 0.95 (frame-height)))))

  (defun my/elfeed-show-eww (&optional link)
    (interactive)
    (let* ((entry (if (eq major-mode 'elfeed-show-mode)
                      elfeed-show-entry
                    (elfeed-search-selected :ignore-region)))
           (link (if link link (elfeed-entry-link entry))))
      (eww link)
      (add-hook 'eww-after-render-hook 'eww-readable nil t)))
  (define-key elfeed-search-mode-map (kbd "e") 'my/elfeed-show-eww)
  (define-key elfeed-show-mode-map (kbd "e") 'my/elfeed-show-eww)
)
#+end_src
*** elfeed-org
Allows to configure ~elfeed~ with an ORG file.
#+begin_src emacs-lisp
(use-package elfeed-org
  :after (elfeed)
  :config
  (setq rmh-elfeed-org-files '("~/work/repos/org/elfeed.org.gpg"))
  (elfeed-org))
#+end_src
** Documentation
*** man & info
#+begin_src emacs-lisp
(setq Man-width-max 180)
(my-leader-def "hM" 'man)
(general-define-key
 :states '(normal)
 :keymaps 'Info-mode-map
 (kbd "RET") 'Info-follow-nearest-node)

(defun my/man-fix-width (&rest _)
  (setq-local Man-width (- (window-width) 4)))

(advice-add #'Man-update-manpage :before #'my/man-fix-width)
#+end_src
** Productivity
*** wakatime
#+begin_src emacs-lisp
(use-package wakatime-mode
  :config
  (setq
   wakatime-python-bin "/home/victor/.pyenv/versions/emacs/bin/python"
   wakatime-cli-path "/home/victor/.pyenv/versions/emacs/bin/wakatime")
  (global-wakatime-mode))
#+end_src
** Bookmarks
*** pocket-reader.el
#+begin_src emacs-lisp

;; Copy current url to scratch buffer
(defun dorneanu/pocket-reader-copy-to-scratch ()
  "Copy URL of current item to kill-ring/clipboard."
  (interactive)
  (when-let ((id (tabulated-list-get-id))
             (item (ht-get pocket-reader-items id))
             (url (pocket-reader--get-url item)))
    (with-current-buffer "*scratch*"
      (insert url)
      (newline))
     (message "Added: %s to scratch buffer" url)))

;; Remove 2read and next tags from current pocket reader item
(defun dorneanu/pocket-reader-remove-next()
  (interactive)
  (pocket-reader--remove-tags (list "2read" "next"))
  (message "Removed 2read, next tags from current item")
  (pocket-reader-toggle-archived)
  (message "Archived item")
)

;; custom functions for getpockt
(defun dorneanu/pocket-2share ()
  "Show getpocket items to be shared"
  (interactive)
  (pocket-reader-search ":all t:2share" :add nil))

(defun dorneanu/pocket-2read ()
  "Show getpocket items to be shared"
  (interactive)
  (pocket-reader-search "t:2read" :add nil))

(use-package pocket-reader
    :defer t
    :after (pocket-lib)
    :config
    ;; Check max column width for site field
    (setq pocket-reader-site-column-max-width 20)

    ;; don't archive automatically on open
    (setq pocket-reader-archive-on-open nil))

    ;; dirt hack to change title-width
    (defun pocket-reader--set-tabulated-list-format ()
      "Set `tabulated-list-format' according to the maximum width of items about to be displayed."
      (when-let ((domain-width (cl-loop for item being the hash-values of pocket-reader-items
                                        maximizing (length (ht-get item 'domain))))
                 (title-width (- (window-text-width) 11 2 domain-width 70 1)))
        (when (> domain-width pocket-reader-site-column-max-width)
          (setq domain-width pocket-reader-site-column-max-width))
        (setq tabulated-list-format (vector (list "Added" 10 pocket-reader-added-column-sort-function)
                                            (list "*" 1 t)
                                            (list "Title" title-width t)
                                            (list "Site" domain-width t)
                                            (list "Tags" 10 t)))))
;; Define key bindings
(map! :map pocket-reader-mode-map
      :after pocket-reader
      :nm "d" #'pocket-reader-delete
      :nm "a" #'pocket-reader-toggle-archived
      :nm "B" #'pocket-reader-open-in-external-browser
      :nm "TAB" #'pocket-reader-open-url
      :nm "tr" #'pocket-reader-remove-tags
      :nm "tN" #'dorneanu/pocket-reader-remove-next
      :nm "C-b" #'dorneanu/tiddlywiki-add-bookmark
      :nm "ta" #'pocket-reader-add-tags
      :nm "gr" #'pocket-reader-refresh
      :nm "p" #'pocket-reader-search
      :nm "U" #'pocket-reader-unmark-all
      :nm "y" #'pocket-reader-copy-url
      :nm "Y" #'dorneanu/pocket-reader-copy-to-scratch)
#+end_src

* Inspiration
- https://www.suenkler.info/emacs/emacs-config/
- https://sqrtminusone.xyz/configs/readme/
- https://config.daviwil.com/emacs
- https://quinoa42.github.io/en/dot-emacs/
