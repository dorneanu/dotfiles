#+TITLE: Emacs Config
#+PROPERTY: header-args :mkdirp yes
#+PROPERTY: header-args:emacs-lisp :tangle ~/.doom.d/config.el :mkdirp yes :eval never-export :exports both
#+AUTHOR: Victor Dorneanu

* Bootstrap
** Defaults
#+begin_src emacs-lisp
;; UTF-8 everywhere
(set-default-coding-systems 'utf-8)     ; Default to utf-8 encoding
(prefer-coding-system       'utf-8)     ; Add utf-8 at the front for automatic detection.
(set-terminal-coding-system 'utf-8)     ; Set coding system of terminal output
(set-keyboard-coding-system 'utf-8)     ; Set coding system for keyboard input on TERMINAL
(set-language-environment "English")    ; Set up multilingual environment

;; ;; Escape cancels everything
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

;; Automatically revert buffers for changed files
(global-auto-revert-mode 1)

;; ;; Revert dired and other buffers
;; (setq global-auto-revert-non-file-buffers t)

;; Set utf-8 (fixes ripgrep error)
(setq default-process-coding-system '(utf-8 . utf-8))


#+end_src
** Recovery
#+begin_src emacs-lisp
(setq auto-save-list-file-prefix ; Prefix for generating auto-save-list-file-name
      (expand-file-name ".auto-save-list/.saves-" user-emacs-directory)
      auto-save-default t        ; Auto-save every buffer that visits a file
      auto-save-timeout 20       ; Number of seconds between auto-save
      auto-save-interval 200)    ; Number of keystrokes between auto-saves
#+end_src
** Variables
#+begin_src emacs-lisp
;; General stuff
(setq vd/is-termux
    (string-suffix-p "Android" (string-trim (shell-command-to-string "uname -a"))))
(setq doom-user-directory "~/.doom.d/")

;; Tiddlywiki folder
(setq tiddlywiki-directory "/cs/priv/repos/brainfck.org/")

(use-package auth-source-pass
    :config  (auth-source-pass-enable))
(setq auth-sources '("~/.authinfo.gpg", (password-store)))

;; Enable local Variables
(setq enable-local-variables t)
#+end_src
** Startup performance
*** measure startup speed                                                     :disabled:
#+begin_src emacs-lisp
;; (setq my/emacs-started nil)

;; (add-hook 'emacs-startup-hook
;;           (lambda ()
;;             (message "*** Emacs loaded in %s with %d garbage collections."
;;                      (format "%.2f seconds"
;;                              (float-time
;;                               (time-subtract after-init-time before-init-time)))
;;                      gcs-done))
;;           (setq my/emacs-started t))
#+end_src
*** garbage collection                                                        :disabled:
Setting variables
#+begin_src emacs-lisp
(setq gc-cons-threshold 80000000)
(setq read-process-output-max (* 1024 1024))
#+end_src

Run garbage collection when Emacs is unfocused

#+begin_src emacs-lisp
;; (use-package gcmh
;;   :diminish gcmh-mode
;;   :config
;;   (setq gcmh-idle-delay 5
;;         gcmh-high-cons-threshold (* 16 1024 1024))  ; 16mb
;;   (gcmh-mode 1))

;; (add-hook 'emacs-startup-hook
;;           (lambda ()
;;             (setq gc-cons-percentage 0.1))) ;; Default value for `gc-cons-percentage'
#+end_src

* Keyboard Bindings
** general.el
#+begin_src emacs-lisp
(use-package! general
  :config
  (general-evil-setup t))

;; Create own leader key
(general-create-definer my-leader-def
  :keymaps '(normal insert visual emacs)
  :prefix "SPC"
  :non-normal-prefix "M-:")
#+end_src
** Global
#+begin_src emacs-lisp
(my-leader-def "?" 'which-key-show-top-level)
(my-leader-def "E" 'eval-expression)
#+end_src
*** Leaders
#+begin_src emacs-lisp
(setq doom-leader-key "SPC")
(setq doom-leader-alt-key "M-m")

(setq doom-localleader-key ",")
(setq doom-localleader-alt-key "M-,")
#+end_src
*** Buffer switching
#+begin_src emacs-lisp
(general-define-key
  :keymaps 'override
  "C-<right>" 'evil-window-right
  "C-<left>" 'evil-window-left
  "C-<up>" 'evil-window-up
  "C-<down>" 'evil-window-down
  "C-h" 'evil-window-left
  "C-l" 'evil-window-right
  "C-k" 'evil-window-up
  "C-j" 'evil-window-down
  "C-x h" 'previous-buffer
  "C-x l" 'next-buffer)
#+end_src
** which-key
#+begin_src emacs-lisp
(use-package which-key
  :config
  (setq which-key-idle-delay 0.3)
  (setq which-key-popup-type 'frame)
  (which-key-mode)
  (which-key-setup-side-window-bottom)
  (set-face-attribute 'which-key-local-map-description-face nil
		      :weight 'bold))
#+end_src
** Evil
#+begin_src emacs-lisp
(use-package evil
  :init
  (setq evil-want-integration t)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-keybinding nil)
  (setq evil-search-module 'evil-search)
  (setq evil-split-window-below t)
  (setq evil-vsplit-window-right t)
  (unless (display-graphic-p)
    (setq evil-want-C-i-jump nil))
  :config
  (evil-mode 1)
  ;; (setq evil-respect-visual-line-mode t)
  ;; (evil-set-undo-system 'undo-tree)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join))
#+end_src
*** Addons
**** evil-surround
[[https://github.com/emacs-evil/evil-surround][evil-surround]] emulates one of my favorite vim plugins, surround.vim. Adds a lot of parentheses management options.

#+begin_src emacs-lisp
(use-package evil-surround
  :after evil
  :config
  (global-evil-surround-mode 1))
#+end_src
**** evil-commentary
[[https://github.com/linktohack/evil-commentary][evil-commentary]] emulates commentary.vim. It gives actions for quick insertion and deletion of comments.

#+begin_src emacs-lisp
(use-package evil-commentary
  :after evil
  :config
  (evil-commentary-mode))
#+end_src
**** evil-quickscope
[[https://github.com/blorbx/evil-quickscope][evil-quickscope]] emulates quickscope.vim. It highlights the important target characters for f, F, t, T keys.

#+begin_src emacs-lisp
(use-package evil-quickscope
  :after evil
  :config
  :hook ((prog-mode . turn-on-evil-quickscope-mode)
         (LaTeX-mode . turn-on-evil-quickscope-mode)
         (org-mode . turn-on-evil-quickscope-mode)))
#+end_src
**** evil-numbers
[[https://github.com/cofi/evil-numbers][evil-numbers]] allows incrementing and decrementing numbers at the point.
#+begin_src emacs-lisp
(use-package evil-numbers
  :commands (evil-numbers/inc-at-pt evil-numbers/dec-at-pt)
  :init
  ;; (general-nmap
  ;;   "g+" 'evil-numbers/inc-at-pt
  ;;   "g-" 'evil-numbers/dec-at-pt)
  )
#+end_src
**** evil-lion
[[https://github.com/edkolev/evil-lion][evil-lion]] provides alignment operators, somewhat similar to vim-easyalign.
#+begin_src emacs-lisp
(use-package evil-lion
  :config
  (setq evil-lion-left-align-key (kbd "g a"))
  (setq evil-lion-right-align-key (kbd "g A"))
  (evil-lion-mode))
#+end_src
**** evil-collection
[[https://github.com/emacs-evil/evil-collection][evil-collection]] is a package that provides evil bindings for a lot of different packages. One can see the complete list in the [[https://github.com/emacs-evil/evil-collection/tree/master/modes][modes]] folder.

#+begin_src emacs-lisp :noweb-ref minimal
(use-package evil-collection
  :after evil
  :init
  (setq evil-collection-company-use-tng nil)  ;; Is this a bug in evil-collection?
  :custom
  (evil-collection-outline-bind-tab-p nil)
  :config
  (setq evil-collection-mode-list
        (remove 'lispy evil-collection-mode-list))
  (evil-collection-init))
;; (use-package evil-collection
;;   :after evil
;;   :config
;;   (evil-collection-init
;;    '(eww
;;      devdocs
;;      proced
;;      emms
;;      pass
;;      calendar
;;      dired
;;      ivy
;;      debug
;;      guix
;;      calc
;;      docker
;;      ibuffer
;;      geiser
;;      pdf
;;      info
;;      elfeed
;;      edebug
;;      bookmark
;;      company
;;      vterm
;;      flycheck
;;      profiler
;;      cider
;;      explain-pause-mode
;;      notmuch
;;      custom
;;      xref
;;      eshell
;;      helpful
;;      compile
;;      comint
;;      git-timemachine
;;      magit
;;      prodigy
;;      slime
;;      )))
#+end_src
** Custom
*** projectile
#+begin_src emacs-lisp
(my-leader-def
  :infix "mp"
  ""   '(:ipgnore t :which-key "Projects")
  "."  'counsel-fzf
  "e"  'project-eshell
  "f"  '(my/rg-project-or-ask :which-key "Run rg in project")
  "s"  'projectile-switch-project
  "F"  'counsel-rg
  "p"  'projectile--find-file
  "c"  'projectile-compile-project
  "v"  'projectile-run-vterm
  "d"  'projectile-dired)
#+end_src
*** avy
#+begin_src emacs-lisp
(my-leader-def
  "j"   '(:ignore t :which-key "jump")
  "jj"  '(avy-goto-char :which-key "jump to char")
  "jw"  '(avy-goto-word-0 :which-key "jump to word")
  "jl"  '(avy-goto-line :which-key "jump to line"))
#+end_src
*** google-translate
#+begin_src emacs-lisp
(my-leader-def
  :infix "m l g"
  "" '(:which-key "google translate")
  "p" 'google-translate-at-point
  "P" 'google-translate-at-point-reverse
  "q" 'google-translate-query-translate
  "Q" 'google-translate-query-translate-reverse
  "t" 'google-translate-smooth-translate)
#+end_src
*** dictcc
#+begin_src emacs-lisp
(my-leader-def "m l d" 'dictcc)
#+end_src
*** ejira
#+begin_src emacs-lisp
(my-leader-def
  :infix "m j"
   "o" 'ejira-browse-issue-under-point
   "f" 'ejira-focus-item-under-point
   "p" 'ejira-pull-item-under-point
   "x" 'ejira-push-item-under-point
   "P" 'ejira-progress-issue
   "c" 'ejira-add-comment
   "u" 'ejira-update-my-projects
)
#+end_src
*** lsp
#+begin_src emacs-lisp
(my-leader-def
  :infix "l"
  "" '(:which-key "lsp")
  "d" 'lsp-ui-peek-find-definitions
  "r" 'lsp-rename
  "u" 'lsp-ui-peek-find-references
  "s" 'lsp-ui-find-workspace-symbol
  "l" 'lsp-execute-code-action
  "t" 'lsp-treemacs-symbols
  "e" 'list-flycheck-errors)
#+end_src

* Editing
** Indentation
*** Tabs
#+begin_src emacs-lisp
(setq tab-always-indent t)

(setq-default default-tab-width 4)
(setq-default tab-width 4)
(setq-default evil-indent-convert-tabs nil)
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
(setq-default evil-shift-round nil)
#+end_src
** Clipboard
#+begin_src emacs-lisp
(setq select-enable-clipboard t)
(setq mouse-yank-at-point t)
#+end_src
** Regions
#+begin_src emacs-lisp
(use-package copy-as-format
  :bind
  (:map mode-specific-map
        :prefix-map copy-as-format-prefix-map
        :prefix "f"
        ("f" . copy-as-format)
        ("a" . copy-as-format-asciidoc)
        ("b" . copy-as-format-bitbucket)
        ("d" . copy-as-format-disqus)
        ("g" . copy-as-format-github)
        ("l" . copy-as-format-gitlab)
        ("c" . copy-as-format-hipchat)
        ("h" . copy-as-format-html)
        ("j" . copy-as-format-jira)
        ("m" . copy-as-format-markdown)
        ("w" . copy-as-format-mediawiki)
        ("o" . copy-as-format-org-mode)
        ("p" . copy-as-format-pod)
        ("r" . copy-as-format-rst)
        ("s" . copy-as-format-slack)))
#+end_src
*** wrap-region
#+begin_src emacs-lisp
(use-package wrap-region
  :ensure   t
  :config
  (wrap-region-global-mode t)
  (wrap-region-add-wrappers
   '(("(" ")")
     ("[" "]")
     ("{" "}")
     ("<" ">")
     ("'" "'")
     ("\"" "\"")
     ("‘" "’"   "q")
     ("“" "”"   "Q")
     ("*" "*"   "b"   org-mode)                 ; bolden
     ("*" "*"   "*"   org-mode)                 ; bolden
     ("/" "/"   "i"   org-mode)                 ; italics
     ("/" "/"   "/"   org-mode)                 ; italics
     ("~" "~"   "c"   org-mode)                 ; code
     ("~" "~"   "~"   org-mode)                 ; code
     ("=" "="   "v"   org-mode)                 ; verbatim
     ("=" "="   "="   org-mode)                 ; verbatim
     ("_" "_"   "u" '(org-mode markdown-mode))  ; underline
     ("**" "**" "b"   markdown-mode)            ; bolden
     ("*" "*"   "i"   markdown-mode)            ; italics
     ("`" "`"   "c" '(markdown-mode ruby-mode)) ; code
     ("`" "'"   "c"   lisp-mode)                ; code
     ))
  :diminish wrap-region-mode)

#+end_src
** vundo
#+begin_src emacs-lisp
(use-package vundo)
#+end_src
** Snippets
*** yasnippet
#+begin_src emacs-lisp
(use-package yasnippet
  ;; :bind (
  ;;        ("M-o" . yas-insert-snippet)
  ;;        ("C-c y" . yas-expand))
  :config
  (setq yas-snippet-dirs
    `(,(concat (expand-file-name doom-user-directory) "snippets")
      yasnippet-snippets-dir))
  (setq yas-triggers-in-field t)
  (yas-global-mode 1))

(map! :after yasnippet
      :map yas-minor-mode-map
      :i "C-c l" #'yas-expand
      :i "C-c j" #'yas-next-field
      :i "C-c k" #'yas-prev-field)

;; turn off yasnippet for several modes
(defun  my/force-yasnippet-off ()
  (yas-minor-mode -1)
  (setq yas-dont-activate t))

(add-hook 'term-mode-hook 'my/force-yasnippet-off)
(add-hook 'shell-mode-hook 'my/force-yasnippet-off)
(add-hook 'eshell-mode-hook 'my/force-yasnippet-off)
#+end_src
*** yasnippet-snippets
#+begin_src emacs-lisp
(use-package yasnippet-snippets
  :after yasnippet
  :config
  (yas-reload-all))
#+end_src
*** yankpad
#+begin_src emacs-lisp
(use-package yankpad
  :bind
  ("C-x C-y"  . yankpad-insert)
  :config
  (setq yankpad-file (concat org-directory "yankpad.org"))
  (yankpad-reload)
  (add-to-list 'company-backends #'company-yankpad))

(map! :leader
      :desc "yankpad insert"
      "m y" #'yankpad-insert)
#+end_src
** iedit
Quick, fast edits of every symbol selected.
#+begin_src emacs-lisp
(use-package iedit
  :commands (iedit-mode))
(my-leader-def "s*" '(iedit-mode :which-key "Activate iedit-mode"))
#+end_src
** multiple cursors
#+begin_src emacs-lisp
;; from https://hungyi.net/posts/hydra-for-evil-mc/
(defhydra hungyi/hydra-multiple-cursors (:color pink
                       :hint nil
                       :pre (evil-mc-pause-cursors))
  "
^Match^            ^Line-wise^           ^Manual^
^^^^^^----------------------------------------------------
_Z_: match all     _J_: make & go down   _z_: toggle here
_m_: make & next   _K_: make & go up     _r_: remove last
_M_: make & prev   ^ ^                   _R_: remove all
_n_: skip & next   ^ ^                   _p_: pause/resume
_N_: skip & prev

Current pattern: %`evil-mc-pattern

"
  ("Z" #'evil-mc-make-all-cursors)
  ("m" #'evil-mc-make-and-goto-next-match)
  ("M" #'evil-mc-make-and-goto-prev-match)
  ("n" #'evil-mc-skip-and-goto-next-match)
  ("N" #'evil-mc-skip-and-goto-prev-match)
  ("J" #'evil-mc-make-cursor-move-next-line)
  ("K" #'evil-mc-make-cursor-move-prev-line)
  ("z" #'+multiple-cursors/evil-mc-toggle-cursor-here)
  ("r" #'+multiple-cursors/evil-mc-undo-cursor)
  ("s" #'mc/mark-sgml-tag-pair)
  ("R" #'evil-mc-undo-all-cursors)
  ("p" #'+multiple-cursors/evil-mc-toggle-cursors)
  ("q" #'evil-mc-resume-cursors "quit" :color blue)
  ("<escape>" #'evil-mc-resume-cursors "quit" :color blue))

(my-leader-def "mmc" 'hungyi/hydra-multiple-cursors/body)
#+end_src
** smartparens
#+begin_src emacs-lisp
;; from https://github.com/dakra/dmacs
(use-package smartparens
  :defer 1
  :hook ((
          emacs-lisp-mode lisp-mode lisp-data-mode clojure-mode cider-repl-mode hy-mode
          prolog-mode go-mode cc-mode python-mode
          typescript-mode json-mode javascript-mode java-mode
          ) . smartparens-strict-mode)
  ;; :hook (prog-mode . smartparens-strict-mode)
  :bind (:map smartparens-mode-map
              ;; This is the paredit mode map minus a few key bindings
              ;; that I use in other modes (e.g. M-?)
              ("C-M-f" . sp-forward-sexp) ;; navigation
              ("C-M-b" . sp-backward-sexp)
              ("C-M-u" . sp-backward-up-sexp)
              ("C-M-d" . sp-down-sexp)
              ("C-M-p" . sp-backward-down-sexp)
              ("C-M-n" . sp-up-sexp)
              ("C-w" . whole-line-or-region-sp-kill-region)
              ("M-s" . sp-splice-sexp) ;; depth-changing commands
              ("M-r" . sp-splice-sexp-killing-around)
              ("M-(" . sp-wrap-round)
              ("M-{" . sp-wrap-curly)
              ("M-[" . sp-wrap-square)
              ("C-)" . sp-forward-slurp-sexp) ;; barf/slurp
              ("C-<right>" . sp-forward-slurp-sexp)
              ("C-}" . sp-forward-barf-sexp)
              ("C-<left>" . sp-forward-barf-sexp)
              ("C-(" . sp-backward-slurp-sexp)
              ("C-M-<left>" . sp-backward-slurp-sexp)
              ("C-{" . sp-backward-barf-sexp)
              ("C-M-<right>" . sp-backward-barf-sexp)
              ("M-S" . sp-split-sexp) ;; misc
              ("M-j" . sp-join-sexp))
  :config
  (require 'smartparens-config)
  (setq sp-base-key-bindings 'paredit)
  (setq sp-autoskip-closing-pair 'always)

  ;; for org mode
  (sp-with-modes '(org-mode)
    (sp-local-pair "=" "=" :wrap "C-ö =")
    (sp-local-pair "*" "*" :wrap "C-ö *")
    (sp-local-pair "/" "/" :wrap "C-ö /")
    (sp-local-pair "_" "_" :wrap "C-ö _")
    (sp-local-pair "+" "+" :wrap "C-ö +"))

  ;; use smartparens-mode everywhere
  (smartparens-global-mode))
#+end_src
* Reading
** olivetti-mode
#+begin_src emacs-lisp
(use-package olivetti
  :hook
  ((olivetti-mode-on-hook . (lambda () (olivetti-set-width 120)))))

;; Activate olivetti mode in eww buffers
;; (add-hook 'eww-after-render-hook '(lambda ()
;;     (eww-readable)
;;     ;; (olivetti-mode)
;;     ;; Open new buffer in vertical split
;;     (set-variable 'split-height-threshold nil t)
;;     (set-variable 'split-width-threshold 90) ; make this as low as needed
;;     (set-face-attribute 'variable-pitch (selected-frame) :font (font-spec :family "Fira Mono" :size 20))))
#+end_src
** ispell
#+begin_src emacs-lisp
;; from https://200ok.ch/posts/2020-08-22_setting_up_spell_checking_with_multiple_dictionaries.html
(use-package ispell
  :custom
  (setenv "LANG" "en_US.UTF-8")
  (setq ispell-program-name "hunspell")
  (setq ispell-dictionary "de_DE,en_US,ro")
  ;; ispell-set-spellchecker-params has to be called
  ;; before ispell-hunspell-add-multi-dic will work
  (ispell-set-spellchecker-params)
  (ispell-hunspell-add-multi-dic "de_DE,en_US,ro")
  ;; For saving words to the personal dictionary, don't infer it from
  ;; the locale, otherwise it would save to ~/.hunspell_de_DE.
  (setq ispell-personal-dictionary "~/.hunspell_personal"))

#+end_src
** epub
#+begin_src emacs-lisp
(use-package nov
  :mode ("\\.epub\\'" . nov-mode))

(add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))

#+end_src
** eww
#+begin_src emacs-lisp
(use-package shrface
  :defer t
  :config
  (shrface-basic)
  (shrface-trial)
  (shrface-default-keybindings) ; setup default keybindings
  (setq shrface-href-versatile t))

;; From https://github.com/howardabrams/dot-files/blob/master/emacs-browser.org
(use-package eww
  :defer t
  :bind (("C-c w w" . eww)
         ("C-c w i" . eww-wiki)
         ("C-c w l" . eww-follow-link))
  :init
  (setq browse-url-browser-function 'eww-browse-url)
  (setq eww-search-prefix "http://www.google.com/search?q=")

  (defun eww-wiki (text)
    "Function used to search wikipedia for the given text."
    (interactive (list (read-string "Wiki for: ")))
    (eww (format "https://en.m.wikipedia.org/wiki/Special:Search?search=%s"
                 (url-encode-url text))))

  :config
  (add-hook 'eww-after-render-hook #'shrface-mode)
  (add-hook 'eww-mode 'ace-link-mode)
  (require 'shrface))
#+end_src
** leo
#+begin_src emacs-lisp
(use-package leo)
(map! :leader
      :prefix "ml"
      "e" #'leo-translate-word)
#+end_src
** wordreference
#+begin_src emacs-lisp
(use-package wordreference
  :bind (:map wordreference-mode-map
              ("S" . wordreference-switch-source-target-and-search))
  :config
  (setq
   wordreference-source-lang "en"
   wordreference-target-lang "de"))

(map! :leader
      :prefix "ml"
      "w" #'wordreference-search)
#+end_src
* Writing
** powerthesaurus
#+begin_src emacs-lisp
;; https://www.powerthesaurus.org/
(use-package powerthesaurus)
(map! :leader
      :prefix "ms"
      "-" #'powerthesaurus-lookup-word-dwim)

#+end_src
** COMMENT flyspell-correct
#+begin_src emacs-lisp
(use-package flyspell-correct
  :after flyspell
  :bind (:map flyspell-mode-map ("C-c m f" . flyspell-correct-wrapper)))
#+end_src
* Navigation
** avy
#+begin_src emacs-lisp
(use-package avy
  :commands (avy-goto-char avy-goto-word-0 avy-goto-line))
#+end_src
** dired
Setup dired
#+begin_src emacs-lisp
(use-package dired
  :commands (dired dired-jump)
  :bind (:map dired-mode-map
              ("h" . dired-up-directory)
              ("j" . dired-next-line)
              ("k" . dired-previous-line)
              ("l" . dired-single-buffer)
              ("TAB" . dired-subtree-toggle))
  :delight "Dired"
  :custom
  (dired-auto-revert-buffer t)
  (dired-dwim-target t)
  (dired-hide-details-hide-symlink-targets nil)
  (dired-listing-switches "-alh --group-directories-first")
  (dired-ls-F-marks-symlinks nil)
  (dired-recursive-copies 'always))
#+end_src

Setup dired-subtree

#+begin_src emacs-lisp
(use-package dired-subtree
  :after dired)
#+end_src
** quick jumps
#+begin_src emacs-lisp
(use-package link-hint
  :bind
  (("<XF86Search>" . link-hint-open-link)
   ("S-<XF86Search>" . link-hint-copy-link)
   :map mode-specific-map
   :prefix-map link-hint-keymap
   :prefix "l"
   ("o" . link-hint-open-link)
   ("c" . link-hint-copy-link)))
#+end_src

* UI
** Minimal interface
#+begin_src emacs-lisp
;; (setq inhibit-startup-message t)
;; (unless vd/is-termux
;;   (scroll-bar-mode -1)        ; Disable visible scrollbar
;;   (tool-bar-mode -1)          ; Disable the toolbar
;;   (tooltip-mode -1)           ; Disable tooltips
;;   (set-fringe-mode 10))       ; Give some breathing room

;; (menu-bar-mode -1)            ; Disable the menu bar

;; ;; Set up the visible bell
;; (setq visible-bell t)
#+end_src
** General settings
y or n instead of yes or no
#+begin_src emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

Hide mouse cursor while typing
#+begin_src emacs-lisp
(setq make-pointer-invisible t)
#+end_src

Highlight the current line
#+begin_src emacs-lisp
;; (global-hl-line-mode t)
#+end_src
** Scrolling
#+begin_src emacs-lisp
;; (unless vd/is-termux
;;   (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
;;   (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
;;   (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
;;   (setq scroll-step 1) ;; keyboard scroll one line at a time
;;   (setq use-dialog-box nil))
#+end_src
** Line numbers
#+begin_src emacs-lisp
;; (global-display-line-numbers-mode 0)
;; ;; (line-number-mode nil)
;; ;; (setq display-line-numbers-type 'visual)
;; ;; (column-number-mode)

;; ;; allow line numbers only in buffer that have code
;; (add-hook 'prog-mode-hook #'display-line-numbers-mode)
#+end_src
** Word wrapping
#+begin_src emacs-lisp
(setq word-wrap 1)
#+end_src
** Theme
Set theme
#+begin_src emacs-lisp
;; (setq doom-theme 'kaolin-dark)
(use-package doom-themes
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'kaolin-ocean t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  ;; (doom-themes-neotree-config)
  ;; or for treemacs users
  (setq doom-themes-treemacs-theme "Netbeans") ; use "doom-colors" for less minimal icon theme
  (doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+end_src
*** Fonts
#+begin_src emacs-lisp
(setq doom-font (font-spec :family "Source Code Pro" :size 15))
;; (setq doom-font (font-spec :family "Fira Mono" :size 11))
;; (setq doom-unicode-font (font-spec :family "Fira Mono"))
#+end_src
**** emojify
#+begin_src emacs-lisp
;; (use-package emojify
;;   :bind (("C-x c ." . emojify-insert-emoji))
;;   :config
;;   (when (member "Noto Color Emoji" (font-family-list))
;;     (set-fontset-font
;;      t 'symbol (font-spec :family "Noto Color Emoji") nil 'prepend))
;;   (setq emojify-display-style 'unicode)
;;   (setq emojify-emoji-styles '(unicode)))
#+end_src
*** Icons
#+begin_src emacs-lisp
(use-package all-the-icons
  :if (display-graphic-p))
#+end_src
*** Functions
#+begin_src emacs-lisp
;; From https://stackoverflow.com/questions/20866169/change-the-font-of-current-buffer-in-emacs
;; https://emacs.stackexchange.com/questions/3038/using-a-different-font-for-each-major-mode
(defun dorneanu/set-variable-font-current-buffer ()
   "Set font to a variable width (proportional) fonts in current buffer"
   (interactive)
   (face-remap-add-relative 'default :family "Source Code Pro"))

 (defun dorneanu/set-monospace-font-current-buffer ()
   "Sets a fixed width (monospace) font in current buffer"
   (interactive)
   (face-remap-add-relative 'default :family "Fira Mono"))
#+end_src
*** treemacs theme
#+begin_src emacs-lisp
(with-eval-after-load 'doom-themes
  (doom-themes-treemacs-config))
;; (setq doom-themes-treemacs-theme "doom-atom")
(setq doom-themes-treemacs-enable-variable-pitch nil)
;; (setq treemacs-no-png-images t)
#+end_src
*** nano-theme
#+begin_src emacs-lisp
(use-package nano-theme)
#+end_src
** modeline
#+begin_src emacs-lisp
(use-package doom-modeline
  :config
  (setq doom-modeline-icon t
        doom-modeline-major-mode-icon t
        doom-modeline-buffer-file-name-style 'truncate-upto-project
        doom-modeline-persp-name t
        doom-modeline-checker-simple-format t

        ;; Whether display environment version or not
        doom-modeline-env-version t

        ;; Or for individual languages
        doom-modeline-env-enable-python t
        doom-modeline-env-enable-go t
        doom-modeline-env-enable-rust t

        ;; Change the executables to use for the language version string
        doom-modeline-env-python-executable "python"
        doom-modeline-env-go-executable "go"
        doom-modeline-env-rust-executable "rustc"

        ;; Whether display irc notifications or not. Requires `circe' package.
        doom-modeline-irc t
        doom-modeline-irc-stylize 'identity

        ;;
        doom-modeline-checker-simple-format t)
)
#+end_src
** Dimmer
#+begin_src emacs-lisp
;; (use-package dimmer
;;   :disabled
;;   :custom
;;   (dimmer-fraction 0.5)
;;   (dimmer-exclusion-regexp-list
;;        '(".*Minibuf.*"
;;          ".*which-key.*"
;;          ".*NeoTree.*"
;;          ".*Messages.*"
;;          ".*Async.*"
;;          ".*Warnings.*"
;;          ".*LV.*"
;;          ".*Ilist.*"))
;;   :config
;;   (dimmer-mode t))
#+end_src
** Text highlight
Highlight indent guides.
#+begin_src emacs-lisp
(use-package highlight-indent-guides
  ;; :hook (
         ;; (prog-mode . highlight-indent-guides-mode)
         ;; (vue-mode . highlight-indent-guides-mode)
         ;; (LaTeX-mode . highlight-indent-guides-mode))
  :config
  ;; (highlight-indent-guides-auto-set-faces)
  (setq highlight-indent-guides-method 'bitmap)
  ;; (setq highlight-indent-guides-bitmap-function 'highlight-indent-guides--bitmap-line)
)
#+end_src

Highlight symbol
#+begin_src emacs-lisp
;; (use-package highlight-symbol)
#+end_src

Rainbow parentheses.
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook ((prog-mode . rainbow-delimiters-mode)))
#+end_src

Highlight colors
#+begin_src emacs-lisp
(use-package rainbow-mode
  :commands (rainbow-mode))
#+end_src

Highlight TODOs and stuff
#+begin_src emacs-lisp
(use-package hl-todo
  :hook (prog-mode . hl-todo-mode))
#+end_src

#+begin_src emacs-lisp
(use-package paren
  :hook
  (after-init . show-paren-mode)
  :custom-face
  (show-paren-match ((nil (:background "#44475a" :foreground "#f1fa8c")))) ;; :box t
  :custom
  (show-paren-style 'mixed)
  (show-paren-when-point-inside-paren t)
  (show-paren-when-point-in-periphery t))
#+end_src
** Window Management
*** Window history with winner-mode
#+begin_src emacs-lisp
;; (use-package winner
;;   :after evil
;;   :config
;;   (winner-mode))
#+end_src
*** Zoom window
#+begin_src emacs-lisp
;; (use-package zoom-window
;;   :config
;;   (my-leader-def "Z" 'zoom-window-zoom))
#+end_src
*** Hydra
#+begin_src emacs-lisp
(defun sk/split-below-and-move ()
  (interactive)
  (split-window-below)
  (other-window 1))
(defun sk/split-right-and-move ()
  (interactive)
  (split-window-right)
  (other-window 1))

(defhydra sk/hydra-of-windows (:color red
                               :hint nil)
  "
 ^Move^    ^Size^    ^Change^                    ^Split^           ^Text^
 ^^^^^^^^^^^------------------------------------------------------------------
 ^ ^ _k_ ^ ^   ^ ^ _K_ ^ ^   _u_: winner-undo _o_: rotate  _v_: vertical     _+_: zoom in
 _h_ ^+^ _l_   _H_ ^+^ _L_   _r_: winner-redo            _s_: horizontal   _-_: zoom out
 ^ ^ _j_ ^ ^   ^ ^ _J_ ^ ^   _c_: close                  _z_: zoom         _q_: quit
"
  ("h" windmove-left)
  ("j" windmove-down)
  ("k" windmove-up)
  ("l" windmove-right)
  ("H" shrink-window-horizontally)
  ("K" shrink-window)
  ("J" enlarge-window)
  ("L" enlarge-window-horizontally)
  ("v" sk/split-right-and-move)
  ("s" sk/split-below-and-move)
  ("c" delete-window)
  ("f" sk/toggle-frame-fullscreen-non-native :color blue)
  ("o" sk/rotate-windows)
  ("z" delete-other-windows)
  ("u" (progn
         (winner-undo)
         (setq this-command 'winner-undo)))
  ("r" winner-redo)
  ("+" text-scale-increase)
  ("-" text-scale-decrease)
  ("q" nil :color blue))

(my-leader-def "mhw" 'sk/hydra-of-windows/body)
#+end_src
** Workspaces
Use ~SPC TAB TAB~ to switch between workspaces
#+begin_src emacs-lisp
(map! :leader
      (:when (featurep! :ui workspaces)
       (:prefix-map ("TAB" . "workspace")
        :desc "Switch to last workspace"  "TAB"   #'+workspace/other)))

#+end_src
** screenshots.el
I have to load by defining a ~load-path~.
#+begin_src emacs-lisp
(use-package screenshot :load-path "~/.emacs.d/.local/straight/repos/screenshot")
#+end_src
* Gnus
** nnreddit
#+begin_src emacs-lisp
;; Applies to first-time Gnus users
(custom-set-variables '(gnus-select-method (quote (nnreddit ""))))
#+end_src
* ORG Mode
** Basic
#+begin_src emacs-lisp :noweb yes
(use-package org
  ;; :defer t
  :init
  (setq org-directory "~/work/repos/org/")
  :config
  ;; general
  (setq org-startup-indented t)
  (setq org-return-follows-link t)
  (setq org-src-tab-acts-natively nil)

  ;; Toogle org links display
  ;; (org-toggle-link-display)
  (setq org-link-descriptive t)

  ;; right-align tags
  (setq org-tags-column 80)
  (setq org-agenda-tags-column 80)
  (setq org-use-tag-inheritance t)

  ;; set indentation
  (setq org-startup-indented t)
  (setq org-indent-indentation-per-level 2)
  (setq org-edit-src-content-indentation 0)
  (setq org-src-preserve-indentation t)

  ;; No blank lines before new entries
  (setq org-blank-before-new-entry
        '((heading . nil)
          (plain-list-item . nil)))

  ;; do logging
  (setq org-log-into-drawer t)
  (setq org-log-done t)
  (setq org-log-reschedule nil)
  (setq org-log-redeadline nil)

  ;; disable org-babel execution while exporting
  (setq org-confirm-babel-evaluate nil)
  (setq org-export-use-babel t)

  ;; Indentation and formatting in org babel code blocks
  (setq org-edit-src-content-indentation 0
        org-src-tab-acts-natively t
        org-src-preserve-indentation t)

  ;; Use the special C-a, C-e and C-k definitions for Org, which enable some special behavior in headings.
  (setq org-special-ctrl-a/e t)
  (setq org-special-ctrl-k t)

  ;; Clean look
  (setq org-hide-emphasis-markers t
        org-fontify-done-headline t
        org-hide-leading-stars t
        org-pretty-entities t)

  ;; Effort entries
  (add-to-list 'org-global-properties
               '("Effort_ALL". "0:05 0:15 0:30 1:00 2:00 3:00 4:00"))

  ;; Refiling
  ;; Allow to create new nodes when refiling
  (setq org-refile-targets '((nil :maxlevel . 9)
                         (org-agenda-files :maxlevel . 9)))
  (setq org-refile-allow-creating-parent-nodes 'confirm)

  ;; Open GPG files in org mode
  (add-to-list 'auto-mode-alist '("\\.gpg\\'" . org-mode))

  (add-hook 'org-mode-hook 'smartparens-mode)
  (add-hook 'org-mode-hook
            (lambda ()
              (rainbow-delimiters-mode -1)))

  ;; Default column view headings
  (setq org-columns-default-format "%50ITEM(Task) %10TODO %10CLOCKSUM %18CLOSED %18TIMESTAMP_IA")


  <<org-keys-setup>>
  <<org-productivity-setup>>)
#+end_src
** Block templates
#+begin_src emacs-lisp
(use-package org-tempo
  :config
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("sq" . "src sql"))
  (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
  (add-to-list 'org-structure-template-alist '("sc" . "src scheme"))
  (add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
  (add-to-list 'org-structure-template-alist '("go" . "src go"))
  (add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
  (add-to-list 'org-structure-template-alist '("json" . "src json"))
  (add-to-list 'org-structure-template-alist '("verb" . "src verb"))
  )
#+end_src
** UI
*** org-bars
[[https://github.com/tonyaldon/org-bars][org-bars]] highlights Org indentation with bars.
#+begin_src emacs-lisp
(use-package org-bars
  :if (display-graphic-p)
  :config
  (setq org-bars-color-options '(
     :only-one-color t
     :bar-color "#8c8c8c"
     :desaturate-level-faces 10
     :darken-level-faces 5))
  )
(map! :leader
      :desc "Activate org-bars"
      "m o b" #'org-bars-mode)
#+end_src
*** org-emphasis-alist
#+begin_src emacs-lisp
;; https://emacs.stackexchange.com/questions/44081/how-to-tweak-org-emphasis-alist-to-put-e-g-neon-yellow-over-bold-or-italic
(setq org-emphasis-alist
  '(("*" (bold :foreground "orange"))
    ("/" italic)
    ;; ("_" (:background "deep sky blue" :foreground "MidnightBlue"))
    ("=" org-verbatim verbatim)
    ("~" (:foreground "orange"))
    ("+" (:strike-through t))))
#+end_src

** org-contrib
=org-contrib= is a package with various additions to Org. I use the following:
- =ox-extra= - extensions for org export

Excluding =org-contacts= from here because byte compilation breaks it for some reason.

#+begin_src emacs-lisp
(use-package org-contrib
  :after (org)
  :config
  (require 'ox-extra)
  (ox-extras-activate '(latex-header-blocks ignore-headlines)))
#+end_src
** org-agenda
#+begin_src emacs-lisp
(use-package org-agenda
  :after org
  :config
  (setq
   org-agenda-files (list org-directory)
   org-agenda-file-regexp
   (replace-regexp-in-string "\\\\\\.org" "\\\\.org\\\\(\\\\.gpg\\\\)?"
                             org-agenda-file-regexp)

   ;; Skip unavailable agenda files
   org-agenda-skip-unavailable-files t

   ;; Skip done tasks
   org-agenda-skip-scheduled-if-done t
   org-agenda-skip-deadline-if-done t

   ;; Show warnings for deadlines 7 days in advance.
   org-deadline-warning-days 5
   org-agenda-include-deadlines t
   org-agenda-todo-list-sublevels t

   ;; org-agenda-todo-ignore-scheduled 'all
   ;; org-agenda-todo-ignore-deadlines 'all
   ;; org-agenda-todo-ignore-with-date 'all

   ;; Use straight line as separator between agenda blocks
   ;; https://www.utf8-chartable.de/unicode-utf8-table.pl?start=9472&utf8=dec&unicodeinhtml=dec
   ;; org-agenda-block-separator 9472
   org-agenda-compact-blocks t
   org-agenda-start-day nil ;; i.e. today
   org-agenda-span 1
   org-agenda-start-on-weekday nil

   ;; Clock report settings
   org-agenda-start-with-clockreport-mode t
   org-clock-report-include-clocking-task t
   org-agenda-clockreport-parameter-plist '(:link nil :maxlevel 6 :fileskip0 t :compact nil)

   ;; Time grid
   org-agenda-time-grid
         '((daily today require-timed)
           (0900 01000 1100 1200 1300 1400 1500 1600 1700 1800)
           "-"
           "────────────────")


   ;; http://doc.endlessparentheses.com/Var/org-agenda-prefix-format.html
   org-agenda-prefix-format
   '(
     (agenda . "%5c %4e %?-12t %s")
     (todo   . " %4e %-12c")
     (tags   . " %-22c")
     (search . " %-12c"))
   )
  ;; (add-hook 'org-agenda-mode-hook
  ;;           (lambda ()
  ;;             (visual-line-mode -1)
  ;;             (toggle-truncate-lines 1)
  ;;             (display-line-numbers-mode 0)))
  )
#+end_src
** org-download
#+begin_src emacs-lisp
(use-package org-download
  :after org
  :bind
  (:map org-mode-map
   (("s-Y" . org-download-screenshot)
    ("s-y" . org-download-yank)))
  :config
  ;; Drag-and-drop to `dired`
  (add-hook 'dired-mode-hook 'org-download-enable)
)
#+end_src
** org-super-agenda
Define custom org agenda commands.
Inspired by https://www.rousette.org.uk/archives/doom-emacs-tweaks-org-journal-and-org-super-agenda/

#+begin_src emacs-lisp
(use-package org-super-agenda
  :after org-agenda
  :config
  ;; Toogle org links display
  ;; (org-toggle-link-display)
  (setq org-link-descriptive t)
  (setq org-agenda-custom-commands
        '(
          ("a" "Agenda"
           ((agenda "" ((org-agend-span 'day)
                        (org-super-agenda-groups
                         '(
                           (:name "Today"
                            :time-grid t
                            :date today
                            :scheduled today
                            :order 1)
                           (:discard (:anything))))))
            (alltodo "" ((org-agenda-overriding-header "")
                         (org-agenda-prefix-format '(
                                                     (agenda . "%7c %4e %?-12t %s")
                                                     (todo . " %-8c [%-4e] %?-12t %s")
                                                     (tags   . " %-22c")
                                                     (search . " %-12c")
                                                     ))
                         (org-super-agenda-groups
                          '(
                            (:log t)
                            (:discard (:tag "inactive"))
                            (:discard (:tag "jira"))
                            (:name "Started"
                             :todo ("STARTED")
                             :order 1)
                            (:name "Quickies"
                             :and (:effort< "0:15" :not (:tag "recurring"))
                             )
                            (:name "Overdue"
                             :deadline past
                             :scheduled past
                             :order 2)
                            (:name "Soon"
                             :deadline feature
                             :scheduled feature
                             :order 2)
                            (:name "Waiting"
                             :todo "WAITING"
                             :order 2)
                            (:name "To refile"
                             :category "inbox"
                             :todo ""
                             :order 10)
                            (:name "Next to do"
                             :todo "NEXT"
                             :order 20)
                            ;; (:name "WIP"
                            ;;  :todo ("WIP")
                            ;;  :order 40)
                            (:discard (:anything))))))
            (alltodo "" ((org-agenda-overriding-header "")
                         (org-agenda-hide-tags-regexp "project\\|ticket\\|active")
                         (org-agenda-prefix-format '((todo . " %-8c [%-4e] %?-12t %s")))
                         (org-super-agenda-groups
                          '(
                            (:log t)
                            (:discard (:tag "inactive"))
                            (:name "Projects"
                             :auto-property "project"
                             :order 1)
                            (:discard (:anything))))))))
          ("w" "Work"
           ((agenda "" ((org-agend-span 'day)
                        (org-super-agenda-groups
                         '(
                           (:discard (:not (:category ("work"))))
                           (:name "Today"
                            :time-grid t
                            :date today
                            :scheduled today
                            :order 1)
                           ))))
            (alltodo "" ((org-agenda-overriding-header "")
                         (org-super-agenda-groups
                          '(
                            (:discard (:not (:category ("work"))))
                            (:discard (:tag "inactive"))
                            (:log t)
                            (:name "Due Today"
                             :deadline today
                             :order 1)
                            (:name "Started"
                             :todo "STARTED"
                             :order 1)
                            (:name "Next to do"
                             :todo "NEXT"
                             :order 2)
                            (:name "Waiting"
                             :todo "WAITING"
                             :order 50)
                            (:discard (:anything))))))))
          ("p" "Private"
           ((agenda "" ((org-agend-span 'day)
                        (org-super-agenda-groups
                         '((:discard (:not (:category ("priv"))))
                           ))))
            (alltodo "" ((org-agenda-overriding-header "")
                         (org-super-agenda-groups
                          '(
                            (:discard (:not (:category ("priv"))))
                            (:discard (:tag "inactive"))
                            (:log t)
                            (:name "Due Today"
                             :deadline today
                             :order 1)
                            (:name "Started"
                             :todo "STARTED"
                             :order 1)
                            (:name "Next to do"
                             :todo "NEXT"
                             :order 2)
                            (:name "Waiting"
                             :todo "WAITING"
                             :order 50)
                            (:name "ToDo"
                             :auto-property "agenda-group"
                             :todo "TODO"
                             :order 60)
                            (:discard (:anything))))))))
          ("P" "Private (ALL))"
           ((agenda "" ((org-agend-span 'day)
                        (org-super-agenda-groups
                         '((:discard (:not (:category ("priv"))))
                           ))))
            (alltodo "" ((org-agenda-overriding-header "")
                         (org-super-agenda-groups
                          '(
                            (:discard (:not (:category ("priv"))))
                            (:discard (:tag "inactive"))
                            (:log t)
                            (:name "Due Today"
                             :deadline today
                             :order 1)
                            (:name "Started"
                             :todo "STARTED"
                             :order 1)
                            (:name "Next to do"
                             :todo "NEXT"
                             :order 2)
                            (:name "Waiting"
                             :todo "WAITING"
                             :order 50)
                            (:name "ToDo"
                             :auto-property "agenda-group"
                             :todo "TODO"
                             :order 60)
                            (:name "Others"
                             :todo ""
                             :order 70)

                            ))))))
          ("h" "Home"
           ((agenda "" ((org-agend-span 'day)
                        (org-super-agenda-groups
                         '((:discard (:not (:category ("home"))))
                           ))))
            (alltodo "" ((org-agenda-overriding-header "Home ")
                         (org-super-agenda-groups
                          '(
                            (:discard (:not (:category ("home"))))
                            (:log t)
                            (:name "Started"
                             :todo "STARTED"
                             :order 1)
                            (:name "Next to do"
                             :todo "NEXT"
                             :order 2)
                            (:name "Waiting"
                             :todo "WAITING"
                             :order 50)
                            (:name "ToDo"
                             :auto-property "agenda-group"
                             :todo t
                             :order 60)
                            (:discard (:anything))))))))

          ("H" "Home (ALL)"
           ((agenda "" ((org-agend-span 'day)
                        (org-super-agenda-groups
                         '((:discard (:not (:category ("home"))))
                           ))))
            (alltodo "" ((org-agenda-overriding-header "Home ")
                         (org-super-agenda-groups
                          '(
                            (:discard (:not (:category ("home"))))
                            (:log t)
                            (:name "Started"
                             :todo "STARTED"
                             :order 1)
                            (:name "Next to do"
                             :todo "NEXT"
                             :order 2)
                            (:name "Waiting"
                             :todo "WAITING"
                             :order 50)
                            (:name "ToDo"
                             :auto-property "agenda-group"
                             :todo t
                             :order 60)
                            ))))))
          ))
  :config
  (org-super-agenda-mode))
#+end_src
** org-todo
#+begin_src emacs-lisp :tangle no :noweb-ref org-productivity-setup
;; TODO keywords
(setq org-todo-keywords '((sequence "TODO(t)" "WIP(i)"  "MEETING(m)" "STARTED(s)" "NEXT(n)" "WAITING(w)" "|" "DONE(d)" "CANCELED(c)")))
(setq org-todo-keyword-faces
      '(("WIP" . (:foreground "brightblue" :weight bold))
        ("NEXT" . (:foreground "IndianRed1" :weight bold))
        ("TODO" . (:foreground "green" :weight bold))
        ("MEETING" . (:foreground "forest green" :weight bold))
        ("STARTED" . (:foreground "OrangeRed" :weight bold))
        ("WAITING" . (:foreground "coral" :weight bold))
        ("CANCELED" . (:foreground "Red" :weight bold))
        ;; ("DELEGATED" . (:foreground "LimeGreen" :weight bold))
        ;; ("SOMEDAY" . (:foreground "LimeGreen" :weight bold))
        ;; ("BUG" . (:foreground "Orange" :weight bold))
        ;; ("PING" . (:foreground "Green" :weight bold))
        ))
#+end_src
** org-capture

#+begin_src emacs-lisp
(use-package org-capture
  :after org
  :defer 1
  :custom

  (org-capture-templates
   '(
     ;; ("l" "Ledger")
     ;; ("lb" "Bank" plain (file "~/work/repos/org/main.ledger.gpg")
     ;;     "%(org-read-date) * %^{Description}\n\tExpenses:%^{Account}  %^{Amount}EUR\n\tAssets:Current:ING:Visa\n"
     ;;     :empty-lines 1)
     ;; ("lc" "Cash" plain (file "~/work/sync/org/main.ledger"),
     ;;     "%(org-read-date) * %^{Payee}
     ;;     Expenses:%^{Account}  €%^{Amount}
     ;;     Assets:Cash:Wallet"
     ;;     :empty-lines 1)

     ;; Docs
     ;; - Elements: https://orgmode.org/manual/Template-elements.html
     ;; - Expansion: https://orgmode.org/manual/Template-expansion.html
     ("t" "Todo" entry (file+headline "~/work/repos/org/inbox.org" "Tasks")
      "* TODO %?\n:PROPERTIES:\n:CREATED: %U\n:END:\n %i\n")

     ("T" "Project Todo" entry (file+headline "~/work/repos/org/inbox.org" "Tasks")
      "* TODO %^{Description}\n:PROPERTIES:\n:CREATED: %U\n:END:\nDesired outcome: %^{Desired outcome} %i\n")

     ("m" "Meeting" entry (file+headline "~/work/repos/org/inbox.org" "Meetings")
      "* MEETING %?\nSCHEDULED: %t\n:PROPERTIES:\n:CREATED: %U\n:END:\n %i\n")

     ("B" "Bookmark (Clipboard)" entry (file+headline "~/work/repos/org/bookmarks.org" "Bookmarks")
      "** %(dorneanu/org-roam-insert-link-clipboard)%?"  :prepend t)

     ("b" "Bookmark (Clipboard+Tiddlywiki)" entry (file+headline "~/work/repos/org/bookmarks.org" "Bookmarks")
      "* %(dorneanu/tw5-add-link)%?"  :prepend t)

     ("s" "Code Snippet" entry
      (file+headline "~/work/repos/org/inbox.org" "Snippets")
      "* %?\t%^g\n#+BEGIN_SRC %^{language}\n\n#+END_SRC")

     ;; How to use custom lambda for finding the right heading
     ;; ("y" "Work Task" entry (file+function
     ;;                         "~/org/journal/work.org"
     ;;                         (lambda ()
     ;;                           (org-datetree-find-date-create
     ;;                            (org-date-to-gregorian (org-today)) t)
     ;;                           (re-search-forward "^\\*.+ log" nil t)))
     ;;  "* TODO %?\n%U" :empty-lines 1)

     ("j" "Journal" entry (file+datetree "~/work/repos/org/journal.org")
      "*  %?\n" :tree-type week :empty-lines 0)

     ;; ("x" "Journal" plain (function vd/tw5-journal-file-by-date)
     ;;  "Capture template")
     )
   )
  :bind
  ("C-c c"  . org-capture)
)
#+end_src

** org-ql
[[https://github.com/alphapapa/org-ql][org-ql]] is a package to query the org files. I'm using it in my review workflow and for custom agenda views.
#+begin_src emacs-lisp :tangle no :noweb-ref org-productivity-setup
(use-package org-ql)
#+end_src
** org-journal                                                                 :disabled:
[[https://github.com/bastibe/org-journal][org-journal]] is a plugin for maintaining a journal in org mode. I want(ed) to have its entries separate from my knowledge base.

I've tried switching to Org Roam Dailies, but in the end decided that org-journal fits my workflow better.

#+begin_src emacs-lisp
;; (use-package org-journal
;;   :after org
;;   :config
;;   (setq org-journal-dir (concat org-directory "journal"))
;;   (setq org-journal-file-type 'weekly)
;;   (setq org-journal-file-format "%Y-%m-%d.org")
;;   (setq org-journal-date-format "%Y-%m-%d")
;;   (setq org-journal-enable-encryption t))

;; (my-leader-def
;;   :infix "oj"
;;   "" '(:which-key "org-journal")
;;   "j" 'org-journal-new-entry
;;   "o" 'org-journal-open-current-journal-file
;;   "s" 'org-journal-tags-status)
#+end_src
** org-pomodoro
#+begin_src emacs-lisp
(use-package org-pomodoro
  :after (org org-agenda)
  :commands (org-pomodoro)
  :config
  (setq
   org-pomodoro-length 30
   org-pomodoro-short-break-length 10
   )
  ;; :config
  ;; (add-hook 'org-pomodoro-started-hook
  ;;           (lambda ()
  ;;             (shell-command "ssh mac say 'Pomodoro gestartet'")
  ;;             ))
  ;; (add-hook 'org-pomodoro-finished-hook
  ;;           (lambda ()
  ;;             (shell-command "ssh mac say 'Pomodoro fertig. Mach eine Pause!'")
  ;;             ))
  ;; (add-hook 'org-pomodoro-break-finished-hook
  ;;           (lambda ()
  ;;             (shell-command "ssh mac say 'Pause fertig'")
  ;;             ))
  ;; (add-hook 'org-pomodoro-killed-hook
  ;;           (lambda ()
  ;;             (shell-command "ssh mac say 'Pomodoro gekilled'")
  ;;             ))
  )
#+end_src
** evil-org
A package to add more evil-mode keybindings to org-mode.

#+begin_src emacs-lisp
(use-package evil-org
  :hook (org-mode . evil-org-mode)
  :config
  (add-hook 'evil-org-mode-hook
            (lambda ()
              (evil-org-set-key-theme '(navigation insert textobjects additional calendar todo))))
  (add-to-list 'evil-emacs-state-modes 'org-agenda-mode)
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))
#+end_src
** org-speed-commands
#+begin_src emacs-lisp
;; (after! org
;;   (setq org-use-speed-commands
;;         (lambda ()
;;           (and (looking-at org-outline-regexp)
;;                (looking-back "^\**")))))
#+end_src

** Encryption
*** epa-file
#+begin_src emacs-lisp
(use-package epa-file
  :config
  (setq
   epa-file-encrypt-to '("BF2828095372F24D")
   password-cache nil
   password-cache-expiry nil
   epa-pinentry-mode 'ask)
  :custom
  (epa-file-select-keys 'silent))
#+end_src
*** org-crypt
#+begin_src emacs-lisp
;; (use-package org-crypt
;;   :after org
;;   :config
;;   (org-crypt-use-before-save-magic)
;;   (setq org-tags-exclude-from-inheritance (quote ("crypt")))
;;   :custom
;;   (org-crypt-key "BF2828095372F24D"))
#+end_src
** Utils
*** copy a link
#+begin_src emacs-lisp :noweb-ref org-keys-setup
(defun vdorg-link-copy (&optional arg)
  "extract url from org-mode link and add it to kill ring."
  (interactive "p")
  (let* ((link (org-element-lineage (org-element-context) '(link) t))
         (type (org-element-property :type link))
         (url (org-element-property :path link))
         (url (concat type ":" url)))
    (kill-new url)
    (message (concat "copied url: " url))))

(general-nmap :keymaps 'org-mode-map
  "C-x C-l" 'vd/org-link-copy)
#+end_src
*** auto clock-in when task is marked STARTED
#+begin_src emacs-lisp :noweb-ref org-keys-setup
;; From https://github.com/svetlyak40wt/dot-emacs/blob/master/.emacs.d/lib/org-auto-clock.el
;; Auto clock-in when task is marked STARTED
(eval-after-load 'org
  '(progn
     (defun wicked/org-clock-in-if-starting ()
       "Clock in when the task is marked STARTED."
       (when (and (string= org-state "STARTED")
                  (not (string= org-last-state org-state)))
         (org-clock-in)))

     (add-hook 'org-after-todo-state-change-hook
               'wicked/org-clock-in-if-starting)

     (defadvice org-clock-in (after wicked activate)
       "Set this task's status to 'STARTED'."
       (org-todo "STARTED"))


     (defun wicked/org-clock-out-if-waiting ()
       "Clock out when the task is marked WAITING or WIP (Work in Progress)."
       (when (and (or (string= org-state "WAITING")
                      (string= org-state "WIP"))
                  (equal (marker-buffer org-clock-marker) (current-buffer))
                  (< (point) org-clock-marker)
                  (> (save-excursion (outline-next-heading) (point))
                     org-clock-marker)
                  (not (string= org-last-state org-state)))
         (org-clock-out)))

     (add-hook 'org-after-todo-state-change-hook
               'wicked/org-clock-out-if-waiting)))
#+end_src
** Export
*** hugo
#+begin_src emacs-lisp
(use-package ox-hugo)

;; Tell hugo how to deal with sidenotes
(add-to-list 'org-hugo-special-block-type-properties '("sidenote" . (:trim-pre t :trim-post t)))
(setq org-hugo-paired-shortcodes "%sidenote")

#+end_src
**** Functions
#+begin_src emacs-lisp
(defun vd/hugo-add-slug ()
  "Adds a Hugo slug as EXPORT_FILE_NAME property"
 (interactive)
 (org-set-property "EXPORT_FILE_NAME"
 (concat (format-time-string "%Y") "-" (org-hugo-slug (org-get-heading :no-tags :no-todo)))))

 ;; see https://www.reddit.com/r/emacs/comments/q0nlgy/extract_link_from_org_header_and_insert_as/
(defun dorneanu/hugo-org-replace-link-by-link-description ()
  "Replace an org link by its description or if empty its address and adds hugo front matter as URL"
  (interactive)
  (if (org-in-regexp org-link-bracket-re 1)
      (save-excursion
        (let ((remove (list (match-beginning 0) (match-end 0)))
              (description
               (if (match-end 2)
                   (org-match-string-no-properties 2)
                 (org-match-string-no-properties 1)))
              (url (org-match-string-no-properties 1)))
          (apply 'delete-region remove)
          (insert description)
          (org-entry-put nil "EXPORT_HUGO_CUSTOM_FRONT_MATTER" (concat ":posturl " url))))))
#+end_src

* Projects
** TODO Projectile
#+begin_src emacs-lisp
(use-package projectile
  :config
  (projectile-mode))

(use-package counsel-projectile
  :after (counsel projectile))
#+end_src

** Git/Magit
#+begin_src emacs-lisp
(use-package magit
  :commands (magit-status magit-file-dispatch)
  :config
  (setq magit-blame-styles
        '((margin
           (margin-format    . ("%a %A %s"))
           (margin-width     . 42)
           (margin-face      . magit-blame-margin)
           (margin-body-face . (magit-blame-dimmed)))
          (headings
           (heading-format   . "%-20a %C %s\n"))
          (highlight
           (highlight-face   . magit-blame-highlight))
          (lines
           (show-lines       . t)
           (show-message     . t)))))

(use-package forge
  :after magit
  :config
  (add-to-list 'forge-alist '("gitlab.etu.ru"
                              "gitlab.etu.ru/api/v4"
                              "gitlab.etu.ru"
                              forge-gitlab-repository)))
(use-package git-gutter
    :custom
    (git-gutter:modified-sign "~")
    (git-gutter:added-sign    "+")
    (git-gutter:deleted-sign  "-")
    ;; :custom-face
    ;; (git-gutter:modified ((t (:foreground "#f1fa8c" :background "#f1fa8c"))))
    ;; (git-gutter:added    ((t (:foreground "#50fa7b" :background "#50fa7b"))))
    ;; (git-gutter:deleted  ((t (:foreground "#ff79c6" :background "#ff79c6"))))
    :config
    (global-git-gutter-mode +1))

(use-package git-timemachine
  :commands (git-timemachine))

(use-package browse-at-remote
  :bind
  (:map link-hint-keymap
        ("r" . browse-at-remote)
        ("k" . browse-at-remote-kill)))
#+end_src
*** diff-hl
Highlight git diffs on the fly
#+begin_src emacs-lisp
;; (use-package diff-hl
;;   :commands (global-diff-hl-mode
;;              diff-hl-mode
;;              diff-hl-next-hunk
;;              diff-hl-previous-hunk
;;              diff-hl-mark-hunk
;;              diff-hl-diff-goto-hunk
;;              diff-hl-revert-hunk)
;;   :config
;;   (global-diff-hl-mode)
;;   (diff-hl-flydiff-mode)
;;   (diff-hl-margin-mode)
;;   (diff-hl-dired-mode))

;; (my-leader-def
;;   :infix "md"
;;   "[ h"  'diff-hl-previous-hunk
;;   "i h"  'diff-hl-mark-hunk
;;   "a h"  'diff-hl-mark-hunk
;;   "g h"  'diff-hl-diff-goto-hunk)
#+end_src
** vc
#+begin_src emacs-lisp
(use-package vc
  :custom
  (setq vc-git-root-log-format
        `("%d %h %ai %an: %s"
          ;; The first shy group matches the characters drawn by --graph.
          ;; We use numbered groups because `log-view-message-re' wants the
          ;; revision number to be group 1.
          ,(concat "^\\(?:[*/\\|]+\\)\\(?:[*/\\| ]+\\)?"
                   "\\(?2: ([^)]+) \\)?\\(?1:[0-9a-z]+\\) "
                   "\\(?4:[0-9]\\{4\\}-[0-9-]\\{4\\}[0-9\s+:-]\\{16\\}\\) "
                   "\\(?3:.*?\\):")
          ((1 'log-view-message)
           (2 'change-log-list nil lax)
           (3 'change-log-name)
           (4 'change-log-date))))
)
#+end_src
Show more git log information:

#+begin_src emacs-lisp
(defvar my-vc-git-log-entry-expand-args '("-1" "--stat" "--no-color")
  "List of strings to expand Git commit in log-view buffers.
    See `my-vc-git-expanded-log-entry'.")

(defun my-vc-git-expanded-log-entry (revision)
  (with-temp-buffer
    (apply #'vc-git-command t nil nil
           `("log"
             ,revision
             ,@my-vc-git-log-entry-expand-args ,@(ensure-list vc-git-log-switches)
             "--"))
    (goto-char (point-min))
    (unless (eobp)
      ;; Indent the expanded log entry.
      (while (re-search-forward "^  " nil t)
        (replace-match "")
        (forward-line))
      (buffer-string))))

;; Now I override the original with the modified behaviour
(advice-add #'vc-git-expanded-log-entry :override #'my-vc-git-expanded-log-entry)

;; ;; To get the original back, remove the advice:
;; (advice-remove #'vc-git-expanded-log-entry #'my-vc-git-expanded-log-entry)
#+end_src
* PKMS
** org-roam
#+begin_src emacs-lisp
(use-package! org-roam
  :init
  (setq org-roam-v2-ack t)
  (setq org-roam-file-extensions '("org"))
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f". org-roam-node-find)
         ("C-c n s" . #'my/rg-org-roam-directory)
         ("C-c n i" . org-roam-node-insert)
         :map org-mode-map
         ("C-M-i"    . completion-at-point))
  :custom
  (org-roam-directory "/cs/priv/repos/roam/org")
  (org-roam-completion-everywhere t)
  ;; (org-roam-dailies-directory "journal")
  (org-roam-capture-templates
   '(("d" "default" plain
      "%?"
      :if-new (file+head "topics/${slug}.org" "#+title: ${title}\n")
      :unnarrowed t)
     ("j" "Journal" plain "%?"
      :if-new (file+head "journal/%<%Y-%m-%d>.org"
                         "#+title: %<%Y-%m-%d>\n#+filetags: journal\n#+date: %<%Y-%m-%d>\n")
      :immediate-finish t
      :unnarrowed t)
     ("b" "book" plain "%?"
      :if-new
      (file+head "books/${slug}.org" "#+title: ${title}\n#+filetags: book\n")
      :immediate-finish t
      :unnarrowed t)
     ("x" "Blog" plain "%?"
      :if-new (file+head "blog/%<%Y-%m-%d>-${slug}.org" "#+SETUPFILE: blog.setup\n#+TITLE: ${title}\n#+CREATED: %<%Y-%m-%d>\n#+HUGO_DRAFT: true\n\n")
      :unnarrowed t)))
  :config
  (org-roam-setup))
#+end_src
** org-roam-dailies
#+begin_src emacs-lisp
(after! org-roam-dailies
  (setq org-roam-dailies-directory "journal/")
  (setq org-roam-dailies-capture-templates
        '(("d" "default" entry
           "* %?"
           :if-new (file+head "%<%Y-%m-%d>.org"
                              "#+TITLE: %<%Y-%m-%d>\n#+DATE: %<%Y-%m-%d>\n#+FILETAGS: journal")))))
  (map! :leader
        :prefix "n"
        (:prefix ("j" . "journal")
         :desc "Arbitrary date" "d" #'org-roam-dailies-goto-date
         :desc "Today"          "j" #'org-roam-dailies-goto-today
         :desc "Tomorrow"       "m" #'org-roam-dailies-goto-tomorrow
         :desc "Yesterday"      "y" #'org-roam-dailies-goto-yesterday))
#+end_src
** consult-org-roam
From [[https://keido.site/notes/nothung/]]
#+begin_src emacs-lisp
(use-package! consult-org-roam
   :init
   (require 'consult-org-roam)
   ;; Activate the minor-mode
   (consult-org-roam-mode 1)
   :custom
   (consult-org-roam-grep-func #'consult-ripgrep)
   :config
   ;; Eventually suppress previewing for certain functions
   (consult-customize
    consult-org-roam-forward-links
    :preview-key (kbd "M-."))
   (consult-customize
    consult-org-roam-search
    :preview-key (kbd "M-.")))


(map! :leader
      :prefix "m r"
      "s" #'consult-org-roam-search
      "f" #'consult-org-roam-forward-links
      "F" #'consult-org-roam-file-find
      "b" #'consult-org-roam-backlinks)
#+end_src
** Functions
#+begin_src emacs-lisp
(defun dorneanu/org-roam-insert-link-clipboard (&optional pURL)
  "Extend org-web-tools to create to take URL from clipboard or kill-ring"
  (interactive)
  (let*
      (
       (url (or pURL (org-web-tools--get-first-url)))
       (html (org-web-tools--get-url url))
       (title (org-web-tools--html-title html))
       )
    (insert (format "%s ◦ [[%s][%s]]" (format-time-string "%Y-%m-%d") url title))
    )
  )
(global-set-key (kbd "C-c i l") (lambda () (interactive) (dorneanu/org-roam-insert-link-clipboard)))
#+end_src

* Programming
** LSP
LSP-mode provides an IDE-like experience for Emacs - real-time diagnostic, code actions, intelligent autocompletion, etc.

References:
- [[https://emacs-lsp.github.io/lsp-mode/][lsp-mode homepage]]

*** lsp-mode
#+begin_src emacs-lisp
(use-package lsp-mode
  :config
  (setq lsp-idle-delay 0.5
        lsp-enable-symbol-highlighting t
        lsp-enable-snippet t  ;; Not supported by company capf, which is the recommended company backend
        ;; lsp-disabled-clients '(eslint)
        lsp-pyls-plugins-flake8-enabled t)
  :hook (
         (go-mode . lsp)
         (typescript-mode . lsp)
         (js-mode . lsp)
         (vue-mode . lsp)
         (svelte-mode . lsp)
         (python-mode . lsp)
         (json-mode . lsp)
         ;; (lsp-mode . lsp-headerline-breadcrumb-mode)
         ;; (lsp-mode . lsb-enable-which-key-integration))
         )
  :commands (lsp lsp-deferred)
  :custom
  (lsp-print-io nil)
  (lsp-trace nil)
  (lsp-print-performance nil)
  (lsp-prefer-flymake t)
)
#+end_src
*** lsp-ui
#+begin_src emacs-lisp
(use-package lsp-ui
  :config
  (setq
        ;; lsp-ui-sideline-show-hover t
        ;; lsp-ui-sideline-delay 0.5
        ;; lsp-ui-sideline-ignore-duplicates t
        lsp-ui-sideline-show-hover nil
        lsp-ui-doc-delay 0.5
        lsp-ui-doc-position 'bottom
        lsp-ui-doc-alignment 'frame
        lsp-ui-doc-header nil
        lsp-ui-doc-include-signature t
        lsp-ui-doc-use-childframe t)
  :commands lsp-ui-mode
  :custom
  ;; lsp-ui-doc
  (lsp-ui-doc-enable nil)
  (lsp-ui-doc-header t)
  (lsp-ui-doc-include-signature nil)
  (lsp-ui-doc-position 'top) ;; top, bottom, or at-point
  (lsp-ui-doc-max-width 120)
  (lsp-ui-doc-max-height 30)
  (lsp-ui-doc-use-childframe t)
  (lsp-ui-doc-use-webkit t)
  ;; signature
  (lsp-signature-auto-activate nil)
  (lsp-signature-render-documentation nil)
  (lsp-eldoc-hook nil)
  :bind
  (:map lsp-ui-mode-map
              ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
              ([remap xref-find-references] . lsp-ui-peek-find-references)
              ("C-c C-r" . lsp-ui-peek-find-references)
              ("C-c C-j" . lsp-ui-peek-find-definitions)
              ("C-c i"   . lsp-ui-peek-find-implementation)
              ("C-c u" . lsp-ui-imenu)
              ("C-c d" . lsp-ui-doc-glance)
              ("C-c e" . lsp-treemacs-errors-list)
              ("C-c D" . lsp-ui-doc-show)
              ("C-c o" . lsp-describe-thing-at-point)
              ("C-c s"   . lsp-ui-sideline-mode)
              ("C-c x" . counsel-flycheck))
)
#+end_src
*** lsp-volar
#+begin_src emacs-lisp
;; (use-package lsp-volar
;;    :after (lsp))
#+end_src
*** Integrations
The only integration left now is treemacs.
**** lsp-treemacs
#+begin_src emacs-lisp
(use-package lsp-treemacs
  :after (lsp)
  :commands lsp-treemacs-errors-list)
#+end_src
*** Keybindings
** Flycheck
A syntax checking extension for Emacs. Integrates with LSP-mode, but can also use various standalone checkers.

References:
- [[https://www.flycheck.org/en/latest/][Flycheck homepage]]

#+begin_src emacs-lisp
(use-package flycheck
  :defer t
  :hook (lsp-mode . flycheck-mode))
;; (use-package flycheck
;;   :config
;;   (global-flycheck-mode)
;;   (setq flycheck-check-syntax-automatically '(save idle-buffer-switch mode-enabled))
;;   ;; (add-hook 'evil-insert-state-exit-hook
;;   ;;           (lambda ()
;;   ;;             (if flycheck-checker
;;   ;;                 (flycheck-buffer))
;;   ;;             ))
;;   (advice-add 'flycheck-eslint-config-exists-p :override (lambda() t))
;;   (add-to-list 'display-buffer-alist
;;                `(,(rx bos "*Flycheck errors*" eos)
;;                  (display-buffer-reuse-window
;;                   display-buffer-in-side-window)
;;                  (side            . bottom)
;;                  (reusable-frames . visible)
;;                  (window-height   . 0.33))))
#+end_src
** Golang
#+begin_src emacs-lisp
(use-package go-mode
  :mode "\\.go\\'"
  :custom (gofmt-command "goimports")
  :config
  (defun lsp-go-install-save-hooks ()
    (add-hook 'before-save-hook #'lsp-format-buffer t t)
    (add-hook 'before-save-hook #'lsp-organize-imports t t))

  ;; (my/set-smartparens-indent 'go-mode)
  (add-hook 'go-mode-hook #'lsp-go-install-save-hooks)
  (add-hook 'go-mode-hook #'smartparens-mode)
  (add-hook 'go-mode-hook #'hs-minor-mode))

  (use-package gotest)
  (use-package go-tag
      :config (setq go-tag-args (list "-transform" "camelcase")))

(use-package company-go
  :after go-mode
  :defer t
  :config
  (push 'company-go company-backends))

(use-package go-guru
  :hook
  (go-mode . go-guru-hl-identifier-mode))

(use-package flycheck-golangci-lint
  :hook
  (go-mode . flycheck-golangci-lint-setup))

(use-package go-eldoc
  :hook
  (go-mode . go-eldoc-setup))
#+end_src

** Python
#+begin_src emacs-lisp
(use-package lsp-pyright
  :hook (python-mode . (lambda ()
                         (require 'lsp-pyright)
                         (lsp))))  ; or lsp-deferred
(add-hook 'python-mode-hook #'smartparens-mode)
#+end_src
*** pyenv
#+begin_src emacs-lisp
(use-package pyenv-mode
  :init
  (add-to-list 'exec-path "~/.pyenv/shims")
  (setenv "WORKON_HOME" "~/.pyenv/versions/")
  :config
  (pyenv-mode)
  (my-leader-def "mpy" '(pyenv-mode-set :which-key "Activate pyenv")))
#+end_src
*** python-black
#+begin_src emacs-lisp
(use-package python-black
    :after python)

;; On save call black
(python-black-on-save-mode)
#+end_src
*** ipython
#+begin_src emacs-lisp
(use-package ein)
#+end_src
** TypeScript
#+begin_src emacs-lisp
(use-package typescript-mode
  :mode "\\.ts\\'"
  :config
  (add-hook 'typescript-mode-hook #'smartparens-mode)
  (add-hook 'typescript-mode-hook #'rainbow-delimiters-mode)
  (add-hook 'typescript-mode-hook #'hs-minor-mode))
#+end_src
** JavaScript
#+begin_src emacs-lisp
(add-hook 'js-mode-hook #'smartparens-mode)
(add-hook 'js-mode-hook #'hs-minor-mode)
#+end_src
** prettier-js
#+begin_src emacs-lisp
(use-package prettier-js
  :after js2-mode
  :init
  (add-hook 'js2-mode-hook 'prettier-js-mode)
  (add-hook 'web-mode-hook 'prettier-js-mode)
)
#+end_src
** Web
#+begin_src emacs-lisp
;; (use-package emmet-mode
;;  :ensure t
;;  :diminish (emmet-mode .  "ε")
;;  :bind* (("C-)" . emmet-next-edit-point)
;;          ("C-(" . emmet-prev-edit-point))
;;  :commands (emmet-mode
;;             emmet-next-edit-point
;;            emmet-prev-edit-point))

;; Inspiration: https://readingworldmagazine.com/emacs/2020-08-24-emacs-web-mode/
(use-package web-mode
 :mode  (("\\.html\\'" . web-html-mode )
         ("\\.tsx\\'" . web-tsx-mode ) )
 :init
 (setq
  web-mode-markup-indent-offset 2
  web-mode-css-indent-offset  2
  web-mode-code-indent-offset  2
  web-mode-attr-indent-offset  2
  web-mode-enable-current-element-highlight t
  web-mode-enable-current-column-highlight t
  web-mode-enable-comment-keywords t
  web-mode-comment-style 2
  web-mode-enable-auto-indentation nil
  web-mode-enable-block-face t
  web-mode-enable-comment-keywords t
  web-mode-enable-heredoc-fontification t
  web-mode-enable-html-entities-fontification t
  web-mode-auto-close-style 2
  ;For <style> parts
  web-mode-style-padding 1
  ;For <script> parts
  web-mode-script-padding 1
  ;For multi-line blocks
  web-mode-block-padding 0
  ;; colorize colors in buffers
  web-mode-enable-css-colorization t
  web-mode-enable-auto-quoting nil )
 :config
 ;; web-tsx-mode
 (yas-minor-mode)

 ;; ;start use smartparens to complete tags not webmode
 (defun +web-is-auto-close-style-3 (_id action _context)
    (and (eq action 'insert)
     (eq web-mode-auto-close-style 3)))

 ;initialize smartparens mode to ensure sp-local-pair defined
 (smartparens-mode t)
 (sp-local-pair 'web-mode "<" nil :unless '(:add +web-is-auto-close-style-3))

 ;; let smartparens handle these
 (setq
  web-mode-enable-auto-quoting nil
  web-mode-enable-auto-pairing t)

 (add-to-list 'web-mode-indentation-params '("lineup-args" . nil))
 (add-to-list 'web-mode-indentation-params '("lineup-calls" . nil))
 (add-to-list 'web-mode-indentation-params '("lineup-concats" . nil))
 (add-to-list 'web-mode-indentation-params '("lineup-ternary" . nil))
)
#+end_src
** vue
#+begin_src emacs-lisp
(use-package vue-mode
  :mode "\\.vue\\'"
  :hook (vue-mode . prettier-js-mode)
  :config
  (add-hook 'vue-mode-hook #'lsp)
  (setq prettier-js-args '("--parser vue")))
#+end_src
** PlantUML
#+begin_src emacs-lisp
(use-package plantuml-mode
  :mode "(\\.\\(plantuml?\\|uml\\|puml\\)\\'"
  :config
  (setq plantuml-default-exec-mode "jar")
  (setq plantuml-indent-level 2)
  (add-to-list 'auto-mode-alist '("\\.plantuml\\'" . plantuml-mode))
  (add-to-list 'auto-mode-alist '("\\.uml\\'" . plantuml-mode))
  (add-hook 'plantuml-mode-hook #'smartparens-mode))
#+end_src
** Lisp
*** Meta Lisp
#+begin_src emacs-lisp
;; (use-package lispy
;;   :hook ((emacs-lisp-mode . lispy-mode)
;;          (scheme-mode . lispy-mode)))

;; (use-package lispyville
;;   :hook (lispy-mode . lispyville-mode))

;; (sp-with-modes sp-lisp-modes
;;   (sp-local-pair "'" nil :actions nil))
#+end_src
*** Emacs Lisp
#+begin_src emacs-lisp
;; (add-hook 'emacs-lisp-mode-hook #'aggressive-indent-mode)
;; (add-hook 'emacs-lisp-mode-hook #'smartparens-strict-mode)
;; (add-hook 'emacs-lisp-mode-hook #'lispy-mode)
#+end_src
** Data serialization
*** JSON
#+begin_src emacs-lisp
(use-package json-mode
  :mode "\\.json\\'"
  :config
  (add-hook 'json-mode #'smartparens-mode)
  (add-hook 'json-mode #'hs-minor-mode))
#+end_src
**** Snatch JSON
Get the path to JSON element [[https://github.com/Sterlingg/json-snatcher][in Emacs]].
  #+begin_src emacs-lisp
  (use-package  json-snatcher
     :commands (jsons-print-path))
  #+end_src
*** CSV
#+begin_src emacs-lisp
(use-package csv-mode
  :mode "\\.csv\\'")
#+end_src
*** YAML
#+begin_src emacs-lisp
(use-package yaml-mode
  :mode "\\.yml\\'"
  :config
  (add-hook 'yaml-mode-hook 'smartparens-mode)
  (add-hook 'yaml-mode-hook 'highlight-indent-guides-mode)
  (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode)))
#+end_src
**** yaml-pro
#+begin_src emacs-lisp
(use-package! yaml-pro
  :after yaml-mode
  :hook (yaml-mode . yaml-pro-mode)
  :config
  (map! :map yaml-pro-mode-map
       [remap imenu] #'yaml-pro-jump
        :n "zc" #'yaml-pro-fold-at-point
        :n "zo" #'yaml-pro-unfold-at-point
        :n "gk" #'yaml-pro-prev-subtree
        :n "gj" #'yaml-pro-next-subtree
        :n "gK" #'yaml-pro-up-level
        :n "M-k" #'yaml-pro-move-subtree-up
        :n "M-j" #'yaml-pro-move-subtree-down))
#+end_src
** Tiddlywiki
#+begin_src emacs-lisp
;; (use-package tiddlywiki-mode
;;   :config
;;   (add-to-list 'auto-mode-alist '("\\.tid\\'" . tiddlywiki-org-mode))
;;   (tiddlywiki-widen-file)
;; )

;; (use-package ox-tiddly)

;; ;; default tiddlywiki base path
;; (setq tiddlywiki-base-path "http://127.0.0.1:8181/recipes/default/tiddlers/")

;; ;; default values
;; (setq
;;      quote-title ""
;;      quote-source ""
;;      tiddler-title ""
;;  )



;; ;; Insert Tiddlywiki link from clipboard
;; (defun dorneanu/tw5-add-link (&optional pURL)
;;   "Extend org-web-tools to create to take URL from clipboard or kill-ring"
;;   (interactive)
;;   (let*
;;       (
;;        (url (or pURL (org-web-tools--get-first-url)))
;;        (html (org-web-tools--get-url url))
;;        (title (org-web-tools--html-title html))
;;        )
;;     (format "%s ◦ [[%s|%s]]" (format-time-string "%Y-%m-%d") title url)
;;     )
;;   )

;; ;; create tw5 journal file
;; (defun vd/tw5-journal-file-by-date ()
;; "Create a new Tiddlywiki journal file with current time as name."
;;   (interactive)
;;   (let ((journal-file (format-time-string "/cs/priv/repos/brainfck.org/tw5/tiddlers/%Y-%m-%d.tid")))
;;   (find-file journal-file))
;;   )

;; ;; adds a tiddlywiki bookmark from pocket-reader mode
;; (defun dorneanu/tiddlywiki-add-bookmark ()
;;   "Adds a new bookmark to tiddlywiki. The URL is fetched from clipboard or killring"
;;     (require 'url-util)
;;     (interactive)
;;     (pocket-reader-copy-url)

;;     (setq my-url (org-web-tools--get-first-url))
;;     (setq url-html (org-web-tools--get-url my-url))
;;     (setq url-title (org-web-tools--html-title url-html))
;;     (setq url-title-mod (read-string "Title: " url-title))
;;     (setq url-path (url-hexify-string url-title-mod))
;;     (setq url-note (read-string (concat "Note for " my-url ":")))
;;     (setq url-tags (concat "Bookmark "(read-string "Additional tags: ")))

;;     (request (concat tiddlywiki-base-path url-path)
;;     :type "PUT"
;;     :data (json-encode `(("name" . ,url-title-mod) ("note" . ,url-note) ("url" . ,my-url) ("tags" . ,url-tags)))
;;     :headers '(("Content-Type" . "application/json") ("X-Requested-With" . "TiddlyWiki") ("Accept" . "application/json"))
;;     :parser 'json-read
;;     :success
;;     (cl-function
;;             (lambda (&key data &allow-other-keys)
;;                 (message "I sent: %S" (assoc-default 'args data))))
;;     :complete (lambda (&rest _) (message "Added %s" (symbol-value 'url-title-mod)))
;;     :error (lambda (&rest _) (message "Some error"))
;;     :status-code '((400 . (lambda (&rest _) (message "Got 400.")))
;;                     (418 . (lambda (&rest _) (message "Got 418.")))
;;                     (204 . (lambda (&rest _) (message "Got 202."))))
;;     )
;; )

;; (defun dorneanu/tiddlywiki-add-quote ()
;;   "Adds a new quote"
;;     (interactive)

;;     (setq quote-title (read-string "Quote title: " quote-title))
;;     (setq url-path (url-hexify-string quote-title))
;;     (setq quote-source (read-string (concat "Source for " quote-title ": ") quote-source))
;;     (setq quote-body (read-string (concat "Text for " quote-title ": ")))
;;     (setq quote-tags (concat "quote "(read-string "Additional tags: ")))

;;     (request (concat tiddlywiki-base-path url-path)
;;     :type "PUT"
;;     :data (json-encode `(
;;         ("title" . ,quote-title)
;;         ("created" . ,(format-time-string "%Y%m%d%H%M%S%3N"))
;;         ("modified" . ,(format-time-string "%Y%m%d%H%M%S%3N"))
;;         ("source" . ,quote-source)
;;         ("tags" . ,quote-tags)
;;         ("text" . ,quote-body)
;;         ("type" . "text/vnd.tiddlywiki")))
;;     :headers '(("Content-Type" . "application/json") ("X-Requested-With" . "TiddlyWiki") ("Accept" . "application/json"))
;;     :parser 'json-read
;;     :success
;;     (cl-function
;;             (lambda (&key data &allow-other-keys)
;;                 (message "I sent: %S" (assoc-default 'args data))))
;;     :complete (lambda (&rest _) (message "Added quote <%s>" (symbol-value 'quote-title)))
;;     :error (lambda (&rest _) (message "Some error"))
;;     :status-code '((400 . (lambda (&rest _) (message "Got 400.")))
;;                     (418 . (lambda (&rest _) (message "Got 418.")))
;;                     (204 . (lambda (&rest _) (message "Got 202."))))
;;     )
;; )

;; (defun dorneanu/tiddlywiki-add-tiddler ()
;;   "Adds a new tiddler"
;;     (interactive)

;;     (setq tiddler-title (read-string "Title: " tiddler-title))
;;     (setq tiddler-body (read-string (concat "Text for " tiddler-title ": ")))
;;     (setq tiddler-tags (read-string "Tags: "))
;;     (setq url-path (url-hexify-string tiddler-title))

;;     (request (concat tiddlywiki-base-path url-path)
;;     :type "PUT"
;;     :data (json-encode `(
;;         ("title" . ,tiddler-title)
;;         ("created" . ,(format-time-string "%Y%m%d%H%M%S%3N"))
;;         ("modified" . ,(format-time-string "%Y%m%d%H%M%S%3N"))
;;         ("tags" . ,tiddler-tags)
;;         ("text" . ,tiddler-body)
;;         ("type" . "text/vnd.tiddlywiki")))
;;     :headers '(("Content-Type" . "application/json") ("X-Requested-With" . "TiddlyWiki") ("Accept" . "application/json"))
;;     :parser 'json-read
;;     :success
;;     (cl-function
;;             (lambda (&key data &allow-other-keys)
;;                 (message "I sent: %S" (assoc-default 'args data))))
;;     :complete (lambda (&rest _) (message "Added tiddler <%s>" (symbol-value 'tiddler-title)))
;;     :error (lambda (&rest _) (message "Some error"))
;;     :status-code '((400 . (lambda (&rest _) (message "Got 400.")))
;;                     (418 . (lambda (&rest _) (message "Got 418.")))
;;                     (204 . (lambda (&rest _) (message "Got 202."))))
;;     )
;; )

;; ;; Add hydra
;; (defhydra hydra-tiddlywiki (:color blue :hint nil)
;; "
;; Tiddlywiki commands^
;; ---------------------------------------------------------
;; _b_ Add new bookmark
;; _j_ Add new journal entry
;; _t_ Add new tiddler
;; _q_ Add new quote
;; "
;;   ("b" dorneanu/tiddlywiki-add-bookmark)
;;   ("j" vd/tw5-journal-file-by-date)
;;   ("q" dorneanu/tiddlywiki-add-quote)
;;   ("t" dorneanu/tiddlywiki-add-tiddler))

;; ;; Keybindings
;; (my-leader-def
;;   :infix "m w"
;;   "h" '(hydra-tiddlywiki/body :which-key "Open Tiddlywiki hydra")
;;   "j" '(vd/tw5-journal-file-by-date :which-key "Create/Open TW5 Journal file")
;;   "s" '(my/rg-tiddlywiki-directory :which-key "Search in TW5 directory"))


#+end_src
** File templates
#+begin_src emacs-lisp
;; (set-file-template! "\\.tid$" :trigger "__journal" :mode 'tiddlywiki-org-mode)
#+end_src
** Impatient Mode
#+begin_src emacs-lisp
(use-package impatient-mode)
(defun markdown-html (buffer)
  (princ (with-current-buffer buffer
           (format "<!DOCTYPE html><html><title>Impatient Markdown</title><xmp theme=\"united\" style=\"display:none;\"> %s  </xmp><script src=\"http://ndossougbe.github.io/strapdown/dist/strapdown.js\"></script></html>" (buffer-substring-no-properties (point-min) (point-max))))
         (current-buffer)))
#+end_src
* Completion
** counsel
#+begin_src emacs-lisp
(use-package counsel
  :after ivy
  :bind (
         ("C-c g" . counsel-google)
         ("C-c q" . counsel-org-tag)))

;; Make sure we don't have to ESC multiple times
;; (define-key ivy-minibuffer-map (kbd "<escape>") 'minibuffer-keyboard-quit))
#+end_src
** consult
From [[https://github.com/rememberYou/.emacs.d/blob/master/config.org]]

#+begin_src emacs-lisp
(use-package consult
  :after projectile
  :bind  (;; Related to the control commands.
          ("<help> a" . consult-apropos)
          ("C-x b" . consult-buffer)
          ("C-x M-:" . consult-complex-command)
          ("C-c k" . consult-kmacro)
          ;; Related to the navigation.
          ("M-g a" . consult-org-agenda)
          ("M-g e" . consult-error)
          ("M-g g" . consult-goto-line)
          ("M-g h" . consult-org-heading)
          ("M-g i" . consult-imenu)
          ("M-g k" . consult-global-mark)
          ("M-g l" . consult-line)
          ("M-g m" . consult-mark)
          ("M-g o" . consult-outline)
          ("M-g I" . consult-project-imenu)
          ;; Related to the search and selection.
          ("M-s G" . consult-git-grep)
          ("M-s g" . consult-grep)
          ("M-s k" . consult-keep-lines)
          ("M-s l" . consult-locate)
          ("M-s m" . consult-multi-occur)
          ("M-s r" . consult-ripgrep)
          ("M-s u" . consult-focus-lines)
          ("M-s f" . consult-find))
  :custom
  (completion-in-region-function #'consult-completion-in-region)
  (consult-narrow-key "<")
  (consult-project-root-function #'projectile-project-root)
  ;; Provides consistent display for both `consult-register' and the register
  ;; preview when editing registers.
  (register-preview-delay 0)
  (register-preview-function #'consult-register-format))

#+end_src
** swipper

#+begin_src emacs-lisp
;; (use-package swiper
;;    :bind (("C-s" . swiper-isearch)))
#+end_src
** company
#+begin_src emacs-lisp
 (use-package company
  :defer 2
  :general
  (:keymaps 'company-mode-map
   :states 'insert
   "C-n" #'company-complete-common-or-cycle
   "C-p" #'company-select-previous)
  ('company-active-map
   "C-n" #'company-complete-common-or-cycle
   "C-p" #'company-select-previous-or-abort
   "C-e" #'company-complete
   "TAB" #'company-complete-common-or-cycle)
  :diminish company-mode
  :config
  (global-company-mode 0)
  (setq ;; Only 2 letters required for completion to activate.
        company-minimum-prefix-length 2

        ;; Search other buffers for completion candidates
        company-dabbrev-other-buffers t

        ;; M-⟪num⟫ to select an option according to its number.
        company-show-numbers t

        ;; Edge of the completion list cycles around.
        company-selection-wrap-around t

        ;; Do not downcase completions by default.
        company-dabbrev-downcase nil

        ;; Even if I write something with the ‘wrong’ case,
        ;; provide the ‘correct’ casing.
        company-dabbrev-ignore-case t

        ;; Immediately activate completion.
        company-idle-delay 0

        company-dabbrev-downcase nil
        company-search-filtering t))
  (setq-default company-global-modes '(not org-mode))
  (add-hook 'prog-mode-hook 'company-mode)
#+end_src
** company-box
#+begin_src emacs-lisp
(use-package company-box
  :disabled t
  :diminish
  :hook (company-mode . company-box-mode))
#+end_src
* Searching
** rg
#+begin_src emacs-lisp
;; from https://alexpeits.github.io/emacs.d/
(use-package rg
  :commands (rg my/rg-project-or-ask)
  :bind (("C-c n s" . my/rg-org-roam-directory))
  ;;        :map rg-mode-map
  ;;        ("m" . rg-menu)
  ;;        ("s" . my/rg-save-search-as-name)
  ;;        ("C-n" . next-line)
  ;;        ("C-p" . previous-line)
  ;;        ("j" . next-line)
  ;;        ("k" . previous-line)
  ;;        ("M-n" . rg-next-file)
  ;;        ("M-p" . rg-prev-file))
  :init
  (setq rg-group-result t
        rg-ignore-case 'smart)
  (defalias 'rgp 'my/rg-project-or-ask)
  :config
  (rg-define-toggle "--multiline --multiline-dotall" "u")
  (rg-define-toggle "--word-regexp" "w")
  (rg-define-toggle "--files-with-matches" "L")
  (rg-enable-default-bindings)
  (rg-define-search my/rg-org-directory
    :query ask
    :format regexp
    :files "org"
    :dir org-directory
    :confirm prefix)

  ;; search in org roam folder
  (rg-define-search my/rg-org-roam-directory
    :query ask
    :format regexp
    :files "everything"
    :dir org-roam-directory
    :confirm prefix)

  ;; prot
  ;; https://protesilaos.com/dotemacs/#h:31622bf2-526b-4426-9fda-c0fc59ac8f4b
  (rg-define-search my/rg-project-or-ask
    :query ask
    :format regexp
    :files "everything"
    :dir (or (projectile-project-root)
             (read-directory-name "rg in: "))
    :confirm prefix)

  (defun my/rg-save-search-as-name ()
    "Save `rg' buffer, naming it after the current search query."
    (interactive)
    (let ((pattern (rg-search-pattern rg-cur-search)))
      (rg-save-search-as-name (concat "«" pattern "»"))))
  )

#+end_src
* Hydras
** multiple-cursors
#+begin_src emacs-lisp
(defhydra multiple-cursors-hydra (:columns 3 :idle 1.0)
  "Multiple cursors"
  ("l" mc/edit-lines "Edit lines in region" :exit t)
  ("b" mc/edit-beginnings-of-lines "Edit beginnings of lines in region" :exit t)
  ("e" mc/edit-ends-of-lines "Edit ends of lines in region" :exit t)
  ("a" mc/mark-all-dwim "Mark all dwim" :exit t)
  ("S" mc/mark-all-symbols-like-this "Mark all symbols likes this" :exit t)
  ("w" mc/mark-all-words-like-this "Mark all words like this" :exit t)
  ("r" mc/mark-all-in-region "Mark all in region" :exit t)
  ("R" mc/mark-all-in-region-regexp "Mark all in region (regexp)" :exit t)
  ("d" mc/mark-all-like-this-in-defun "Mark all like this in defun" :exit t)
  ("s" mc/mark-all-symbols-like-this-in-defun "Mark all symbols like this in defun" :exit t)
  ("W" mc/mark-all-words-like-this-in-defun "Mark all words like this in defun" :exit t)
  ("i" mc/insert-numbers "Insert numbers" :exit t)
  ("n" mc/mark-next-like-this "Mark next like this")
  ("N" mc/skip-to-next-like-this "Skip to next like this")
  ("M-n" mc/unmark-next-like-this "Unmark next like this")
  ("p" mc/mark-previous-like-this "Mark previous like this")
  ("P" mc/skip-to-previous-like-this "Skip to previous like this")
  ("M-p" mc/unmark-previous-like-this "Unmark previous like this")
  ("q" nil "Quit" :exit t))
#+end_src

** ediff

#+begin_src emacs-lisp
;; https://github.com/abo-abo/hydra/wiki/Emacs
(defhydra hydra-ediff (:color blue :hint nil)
  "
^Buffers           Files           VC                     Ediff regions
----------------------------------------------------------------------
_b_uffers           _f_iles (_=_)       _r_evisions              _l_inewise
_B_uffers (3-way)   _F_iles (3-way)                          _w_ordwise
                  _c_urrent file
"
  ("b" ediff-buffers)
  ("B" ediff-buffers3)
  ("=" ediff-files)
  ("f" ediff-files)
  ("F" ediff-files3)
  ("c" ediff-current-file)
  ("r" ediff-revision)
  ("l" ediff-regions-linewise)
  ("w" ediff-regions-wordwise))
#+end_src
** projectile
#+begin_src emacs-lisp
(defhydra hydra-projectile (:color teal
			    :columns 4)
  "Projectile"
  ("f"   projectile-find-file                "Find File")
  ("r"   projectile-recentf                  "Recent Files")
  ("z"   projectile-cache-current-file       "Cache Current File")
  ("x"   projectile-remove-known-project     "Remove Known Project")

  ("d"   projectile-find-dir                 "Find Directory")
  ("b"   projectile-switch-to-buffer         "Switch to Buffer")
  ("c"   projectile-invalidate-cache         "Clear Cache")
  ("X"   projectile-cleanup-known-projects   "Cleanup Known Projects")

  ("o"   projectile-multi-occur              "Multi Occur")
  ("s"   projectile-switch-project           "Switch Project")
  ("k"   projectile-kill-buffers             "Kill Buffers")
  ("q"   nil "Cancel" :color blue))
#+end_src
** bookmarks
#+begin_src emacs-lisp
(defhydra hydra-bookmarks (:hint nil :exit t)
  "
  bookmarks:    _j_ → jump to bookmark _l_ → list bookmarks    _s_ → set bookmark
                _D_ → delete bookmark
  "
  ("j" #'bookmark-jump)
  ("l" #'bookmark-bmenu-list)
  ("s" #'bookmark-set)
  ("D" #'bookmark-delete))
#+end_src
** yasnippet
#+begin_src emacs-lisp
(defhydra hydra-yasnippet (:color blue :hint nil)
"
Snippets^
---------------------------------------------------------
_q_ uit
_i_ insert snippet
_n_ new snippet
_l_ load directory
_r_ reload all
_v_ visit snippet
_d_ describe table
"
  ("q" nil :exit t)
  ("i" yas-insert-snippet)
  ("n" yas-new-snippet)
  ("l" yas-load-directory)
  ("r" yas-reload-all)
  ("v" yas-visit-snippet-file)
  ("d" yas-describe-tables))
#+end_src
** lsp
#+begin_src emacs-lisp
;; https://github.com/yilkalargaw/yet-another-emacs
(defhydra hydra-lsp (:exit t :hint nil :quit-key ("q" "C-g"))
  "
 Buffer^^               Server^^                   Symbol
-------------------------------------------------------------------------------------
 [_f_] format           [_M-r_] restart            [_d_] declaration  [_i_] implementation  [_o_] documentation
 [_m_] imenu            [_S_]   shutdown           [_D_] definition   [_t_] type            [_r_] rename
 [_x_] execute action   [_M-s_] describe session   [_R_] references   [_s_] signature"
  ("d" lsp-find-declaration)
  ("D" lsp-ui-peek-find-definitions)
  ("R" lsp-ui-peek-find-references)
  ("i" lsp-ui-peek-find-implementation)
  ("t" lsp-find-type-definition)
  ("s" lsp-signature-help)
  ("o" lsp-describe-thing-at-point)
  ("r" lsp-rename)

  ("f" lsp-format-buffer)
  ("m" lsp-ui-imenu)
  ("x" lsp-execute-code-action)

  ("M-s" lsp-describe-session)
  ("M-r" lsp-restart-workspace)
  ("S" lsp-shutdown-workspace))
#+end_src
** dired
#+begin_src emacs-lisp
;; https://github.com/yilkalargaw/yet-another-emacs
(defhydra hydra-dired (:hint nil :color pink :quit-key ("q" "C-g"))
  "
_+_ mkdir          _v_iew           _m_ark             _(_ details        _i_nsert-subdir    wdired
_C_opy             _O_ view other   _U_nmark all       _)_ omit-mode      _$_ hide-subdir    C-x C-q : edit
_D_elete           _o_pen other     _u_nmark           _l_ redisplay      _w_ kill-subdir    C-c C-c : commit
_R_ename           _M_ chmod        _t_oggle           _g_ revert buf     _e_ ediff          C-c ESC : abort
_Y_ rel symlink    _G_ chgrp        _E_xtension mark   _s_ort             _=_ pdiff
_S_ymlink          ^ ^              _F_ind marked      _._ toggle hydra   \\ flyspell
_r_sync            ^ ^              ^ ^                ^ ^                _?_ summary
_z_ compress-file  _A_ find regexp
_Z_ compress       _Q_ repl regexp
T - tag prefix
"
  ("\\" dired-do-ispell)
  ("(" dired-hide-details-mode)
  (")" dired-omit-mode)
  ("+" dired-create-directory)
  ("=" diredp-ediff)         ;; smart diff
  ("?" dired-summary)
  ("$" diredp-hide-subdir-nomove)
  ("A" dired-do-find-regexp)
  ("C" dired-do-copy)        ;; Copy all marked files
  ("D" dired-do-delete)
  ("E" dired-mark-extension)
  ("e" dired-ediff-files)
  ("F" dired-do-find-marked-files)
  ("G" dired-do-chgrp)
  ("g" revert-buffer)        ;; read all directories again (refresh)
  ("i" dired-maybe-insert-subdir)
  ("l" dired-do-redisplay)   ;; relist the marked or singel directory
  ("M" dired-do-chmod)
  ("m" dired-mark)
  ("O" dired-display-file)
  ("o" dired-find-file-other-window)
  ("Q" dired-do-find-regexp-and-replace)
  ("R" dired-do-rename)
  ("r" dired-do-rsynch)
  ("S" dired-do-symlink)
  ("s" dired-sort-toggle-or-edit)
  ("t" dired-toggle-marks)
  ("U" dired-unmark-all-marks)
  ("u" dired-unmark)
  ("v" dired-view-file)      ;; q to exit, s to search, = gets line #
  ("w" dired-kill-subdir)
  ("Y" dired-do-relsymlink)
  ("z" diredp-compress-this-file)
  ("Z" dired-do-compress)
  ("q" nil)
  ("." nil :color blue))
#+end_src
** org
From [[https://sriramkswamy.github.io/dotemacs/]]

#+begin_src emacs-lisp
(defhydra sk/hydra-org-jump (:color pink
                             :hint nil)
  "
 ^Outline^          ^Item^   ^Table^   ^Block^   ^Link^
 ^^^^^^^^^^^-------------------------------------------------------------------------------
 ^ ^ _k_ ^ ^   ^ ^ _K_ ^ ^   ^ ^ _u_ ^ ^   ^ ^ ^ ^ ^ ^   ^ ^ _p_ ^ ^   ^ ^ _P_ ^ ^    _q_ quit
 _h_ ^+^ _l_   ^ ^ ^+^ ^ ^   ^ ^ ^+^ ^ ^   _b_ ^+^ _f_   ^ ^ ^+^ ^ ^   ^ ^ ^+^ ^ ^
 ^ ^ _j_ ^ ^   ^ ^ _J_ ^ ^   ^ ^ _d_ ^ ^   ^ ^ ^ ^ ^ ^   ^ ^ _n_ ^ ^   ^ ^ _N_ ^ ^
"
  ("j" outline-next-visible-heading)
  ("k" outline-previous-visible-heading)
  ("l" org-down-element)
  ("h" org-up-element)
  ("J" org-forward-heading-same-level)
  ("K" org-backward-heading-same-level)
  ("u" org-next-item)
  ("d" org-previous-item)
  ("f" org-table-next-field)
  ("b" org-table-previous-field)
  ("n" org-next-block)
  ("p" org-previous-block)
  ("N" org-next-link)
  ("P" org-previous-link)
  ("q" nil :color blue))
(map! :leader
      :prefix "mh"
      "o" #'sk/hydra-org-jump/body)
#+end_src
* Registers
** Hydra
#+begin_src emacs-lisp
(defhydra sk/hydra-registers (:color blue
                              :hint nil)
  "
 _a_: append     _c_: copy-to    _j_: jump       _r_: rectangle-copy   _q_: quit
 _i_: insert     _n_: number-to  _f_: frameset   _w_: window-config
 _+_: increment  _p_: point-to
  "
  ("a" append-to-register)
  ("c" copy-to-register)
  ("i" insert-register)
  ("f" frameset-to-register)
  ("j" jump-to-register)
  ("n" number-to-register)
  ("r" copy-rectangle-to-register)
  ("w" window-configuration-to-register)
  ("+" increment-register)
  ("p" point-to-register)
  ("q" nil :color blue))

(my-leader-def "r\"" '(sk/hydra-registers/body :which-key "Hydra for registers"))
#+end_src
* Applications
** RSS
*** TODO elfeed
#+begin_src emacs-lisp
(use-package elfeed
  :commands (elfeed)
  :config
  (use-package pocket-lib)
  (use-package org-web-tools)
  (use-package hnreader)
  (use-package url-util)

  (setq elfeed-db-directory "~/.elfeed")
  (setq elfeed-enclosure-default-dir (expand-file-name "~/Downloads"))
  (elfeed-set-timeout 36000)

  (defun elfeed-search-format-date (date)
    (format-time-string "%Y-%m-%d %H:%M" (seconds-to-time date)))

  (setq elfeed-search-filter "@1-week-ago +unread"
        elfeed-search-print-entry-function 'elfeed-search-print-entry--default
        elfeed-search-title-max-width 100
        elfeed-show-entry-switch 'elfeed-display-buffer
        ;; elfeed-show-entry-delete #'+rss/delete-pane
        ;; elfeed-show-refresh-function #'+rss/elfeed-show-refresh--better-style
        shr-max-image-proportion 0.6)

  ;; Define maps
  (map! :map elfeed-search-mode-map
        :after elfeed-search
        [remap kill-this-buffer] "q"
        [remap kill-buffer] "q"
        :n doom-leader-key nil
        :n "c" #'elfeed-search-clear-filter
        :n "q" #'+rss/quit
        :n "e" #'elfeed-update
        :n "gp" #'sqrtminusone/rdrview-elfeed-show
        :n "r" #'elfeed-search-untag-all-unread
        :n "R" #'my/elfeed-reddit-show-commments
        :n "H" #'my/elfeed-hn-show-commments
        :n "u" #'elfeed-search-tag-all-unread
        :n "s" #'elfeed-search-live-filter
        :n "RET" #'elfeed-search-show-entry
        :n "o" #'sqrtminusone/elfeed-search-filter-source
        :n "p" #'elfeed-show-pdf
        :n "+" #'elfeed-search-tag-all
        :n "-" #'elfeed-search-untag-all
        :n "S" #'elfeed-search-set-filter
        :n "b" #'elfeed-search-browse-url
        :n "B" #'elfeed-search-eww-open
        :n "a" #'pocket-reader-elfeed-search-add-link
        :n "y" #'elfeed-search-yank)
  (map! :map elfeed-show-mode-map
        :after elfeed-show
        [remap kill-this-buffer] "q"
        [remap kill-buffer] "q"
        :n doom-leader-key nil
        :nm "q" #'+rss/delete-pane
        :nm "a" #'pocket-reader-elfeed-entry-add-link
        :n "B" #'elfeed-show-eww-open
        :nm "o" #'ace-link-elfeed
        :n "H" #'my/elfeed-hn-show-comments-at-point
        :nm "RET" #'org-ref-elfeed-add
        :nm "n" #'elfeed-show-next
        :nm "N" #'elfeed-show-prev
        :nm "p" #'elfeed-show-pdf
        :nm "+" #'elfeed-show-tag
        :nm "-" #'elfeed-show-untag
        :nm "s" #'elfeed-show-new-live-search
        :nm "y" #'elfeed-show-yank)

  (add-hook! 'elfeed-show-mode-hook (hide-mode-line-mode 1))
  ;; (add-hook! 'elfeed-show-mode-hook (olivetti-mode))
  ;; (add-hook! 'elfeed-show-mode-hook (writerroom-mode))
  (add-hook! 'elfeed-show-mode-hook (lambda ()
    (set-face-attribute 'variable-pitch (selected-frame) :font (font-spec :family "Fira Mono" :size 20))
    (setq fill-column 50)
    (setq elfeed-show-entry-switch #'my-show-elfeed)))

(defun my-show-elfeed (buffer)
  (with-current-buffer buffer
    (setq buffer-read-only nil)
    (goto-char (point-min))
    (re-search-forward "\n\n")
    (fill-individual-paragraphs (point) (point-max))
    (setq buffer-read-only t))
  (switch-to-buffer buffer))

  (add-hook! 'elfeed-search-update-hook #'hide-mode-line-mode)

  (defun elfeed-display-buffer (buf &optional act)
    (pop-to-buffer buf)
    (set-window-text-height (get-buffer-window) (round (* 0.95 (frame-height)))))

  (defun my/elfeed-show-eww (&optional link)
    (interactive)
    (let* ((entry (if (eq major-mode 'elfeed-show-mode)
                      elfeed-show-entry
                    (elfeed-search-selected :ignore-region)))
           (link (if link link (elfeed-entry-link entry))))
      (eww link)
      (add-hook 'eww-after-render-hook 'eww-readable nil t)))

(defun elfeed-show-eww-open (&optional use-generic-p)
    "open with eww"
    (interactive "P")
     (split-window-right-and-focus)
    (let ((browse-url-browser-function #'eww-browse-url))
    (elfeed-show-visit use-generic-p)))

(defun elfeed-search-eww-open (&optional use-generic-p)
    "open with eww"
    (interactive "P")
    (let ((browse-url-browser-function #'eww-browse-url))
    (elfeed-search-browse-url use-generic-p)))

  (define-key elfeed-search-mode-map (kbd "B") 'my/elfeed-show-eww)
  (define-key elfeed-show-mode-map (kbd "B") 'my/elfeed-show-eww)
)

;; https://github.com/SqrtMinusOne/dotfiles
(defun sqrtminusone/elfeed-search-filter-source (entry)
  "Filter elfeed search buffer by the feed under cursor."
  (interactive (list (elfeed-search-selected :ignore-region)))
  (when (elfeed-entry-p entry)
    (elfeed-search-set-filter
     (concat
      "@6-months-ago "
      "+unread "
      "="
      (replace-regexp-in-string
       (rx "?" (* not-newline) eos)
       ""
       (elfeed-feed-url (elfeed-entry-feed entry)))))))


;; Update elfeed regularly
;; https://www.reddit.com/r/emacs/comments/bvbp92/is_there_a_simple_way_to_get_elfeed_to_update/
(add-hook 'emacs-startup-hook (lambda () (run-at-time 5 3600 'elfeed-update)))
#+end_src

**** TODO rdrview
#+begin_src emacs-lisp
;; From https://github.com/SqrtMinusOne/dotfiles
;; (defun sqrtminusone/rdrview-get (url callback)
;;   "Get the rdrview representation of URL.

;; Call CALLBACK with the output."
;;   (let* ((buffer (generate-new-buffer "rdrview"))
;;          (proc (start-process "rdrview" buffer "rdrview"
;;                               url "-T" "title,sitename,body"
;;                               "-H")))
;;     (set-process-sentinel
;;      proc
;;      (lambda (process _msg)
;;        (let ((status (process-status process))
;;              (code (process-exit-status process)))
;;          (cond ((and (eq status 'exit) (= code 0))
;;                 (progn
;;                   (funcall callback
;;                            (with-current-buffer (process-buffer process)
;;                              (buffer-string)))
;;                   (kill-buffer (process-buffer process))) )
;;                ((or (and (eq status 'exit) (> code 0))
;;                     (eq status 'signal))
;;                 (let ((err (with-current-buffer (process-buffer process)
;;                              (buffer-string))))
;;                   (kill-buffer (process-buffer process))
;;                   (user-error "Error in rdrview: %s" err)))))))
;;     proc))

;; (defun sqrtminusone/rdrview-parse (dom-string)
;;   (let ((dom (with-temp-buffer
;;                (insert dom-string)
;;                (libxml-parse-html-region (point-min) (point-max)))))
;;     (let (title sitename content (i 0))
;;       (dolist (child (dom-children (car (dom-by-id dom "readability-page-1"))))
;;         (when (listp child)
;;           (cond
;;            ((eq (car child) 'h1)
;;             (setq title (dom-text child)))
;;            ((eq (car child) 'h2)
;;             (setq sitename (dom-text child)))
;;            ((eq (car child) 'div)
;;             (setq content child)))))
;;       (while (and
;;               (not (dom-by-tag content 'h1))
;;               (dom-search
;;                content
;;                (lambda (el)
;;                  (when (listp el)
;;                    (pcase (car el)
;;                      ('h2 (setf (car el) 'h1))
;;                      ('h3 (setf (car el) 'h2))
;;                      ('h4 (setf (car el) 'h3))
;;                      ('h5 (setf (car el) 'h4))
;;                      ('h6 (setf (car el) 'h5))))))))
;;       `((title . ,title)
;;         (sitename . ,sitename)
;;         (content . ,(with-temp-buffer
;;                       (dom-print content)
;;                       (buffer-string)))))))

;; (defvar-local my/elfeed-show-rdrview-html nil)

;; (defun sqrtminusone/rdrview-elfeed-show ()
;;   (interactive)
;;   (unless elfeed-show-entry
;;     (user-error "No elfeed entry in this buffer!"))
;;   (my/rdrview-get
;;    (elfeed-entry-link elfeed-show-entry)
;;    (lambda (result)
;;      (let* ((data (sqrtminusone/rdrview-parse result))
;;             (inhibit-read-only t)
;;             (title (elfeed-entry-title elfeed-show-entry))
;;             (date (seconds-to-time (elfeed-entry-date elfeed-show-entry)))
;;             (authors (elfeed-meta elfeed-show-entry :authors))
;;             (link (elfeed-entry-link elfeed-show-entry))
;;             (tags (elfeed-entry-tags elfeed-show-entry))
;;             (tagsstr (mapconcat #'symbol-name tags ", "))
;;             (nicedate (format-time-string "%a, %e %b %Y %T %Z" date))
;;             (content (alist-get 'content data))
;;             (feed (elfeed-entry-feed elfeed-show-entry))
;;             (feed-title (elfeed-feed-title feed))
;;             (base (and feed (elfeed-compute-base (elfeed-feed-url feed)))))
;;        (erase-buffer)
;;        (insert (format (propertize "Title: %s\n" 'face 'message-header-name)
;;                        (propertize title 'face 'message-header-subject)))
;;        (when elfeed-show-entry-author
;;          (dolist (author authors)
;;            (let ((formatted (elfeed--show-format-author author)))
;;              (insert
;;               (format (propertize "Author: %s\n" 'face 'message-header-name)
;;                       (propertize formatted 'face 'message-header-to))))))
;;        (insert (format (propertize "Date: %s\n" 'face 'message-header-name)
;;                        (propertize nicedate 'face 'message-header-other)))
;;        (insert (format (propertize "Feed: %s\n" 'face 'message-header-name)
;;                        (propertize feed-title 'face 'message-header-other)))
;;        (when tags
;;          (insert (format (propertize "Tags: %s\n" 'face 'message-header-name)
;;                          (propertize tagsstr 'face 'message-header-other))))
;;        (insert (propertize "Link: " 'face 'message-header-name))
;;        (elfeed-insert-link link link)
;;        (insert "\n")
;;        (cl-loop for enclosure in (elfeed-entry-enclosures elfeed-show-entry)
;;                 do (insert (propertize "Enclosure: " 'face 'message-header-name))
;;                 do (elfeed-insert-link (car enclosure))
;;                 do (insert "\n"))
;;        (insert "\n")
;;        (if content
;;            (elfeed-insert-html content base)
;;          (insert (propertize "(empty)\n" 'face 'italic)))
;;        (setq-local my/elfeed-show-rdrview-html content)
;;        (goto-char (point-min))))))

#+end_src
**** reddigg
Use reddigg to show reddit threads.
#+begin_src emacs-lisp
(defun my/elfeed-reddit-show-commments (&optional link)
  (interactive)
  (let* ((entry (if (eq major-mode 'elfeed-show-mode)
                    elfeed-show-entry
                  (elfeed-search-selected :ignore-region)))
         (link (if link link (elfeed-entry-link entry))))
    (reddigg-view-comments link)))
#+end_src
**** hnreader
Open in same window
#+begin_src emacs-lisp
(setq hnreader-view-comments-in-same-window nil)
#+end_src

Use hnreader to show HN threads
#+begin_src emacs-lisp
(defun my/elfeed-hn-show-commments (&optional link)
  (interactive)
  (let* ((entry (if (eq major-mode 'elfeed-show-mode)
                    elfeed-show-entry
                  (elfeed-search-selected :ignore-region)))
         (link (if link link (elfeed-entry-link entry))))
    (setq-local hnreader-view-comments-in-same-window nil)
    (hnreader-promise-comment (format "%s" link))))
#+end_src

Use hnread to show HN threads for a URL at point
#+begin_src emacs-lisp
(defun my/elfeed-hn-show-comments-at-point ()
  "Kill the url at point."
  (interactive)
  (setq-local hnreader-view-comments-in-same-window t)
  (hnreader-comment (format "%s" (url-get-url-at-point))))
#+end_src

*** elfeed-org
Allows to configure ~elfeed~ with an ORG file.
#+begin_src emacs-lisp
(use-package elfeed-org
  :after (elfeed)
  :config
  (setq rmh-elfeed-org-files '("~/work/repos/org/elfeed.org.gpg"))
  (elfeed-org))
#+end_src
*** elfeed-goodies
Add some goodies to elfeed
#+begin_src emacs-lisp
(use-package elfeed-goodies
  :config
  (elfeed-goodies/setup))

;; https://github.com/algernon/elfeed-goodies/issues/15
(defun elfeed-goodies/search-header-draw ()
  "Returns the string to be used as the Elfeed header."
  (if (zerop (elfeed-db-last-update))
      (elfeed-search--intro-header)
    (let* ((separator-left (intern (format "powerline-%s-%s"
                                           elfeed-goodies/powerline-default-separator
                                           (car powerline-default-separator-dir))))
           (separator-right (intern (format "powerline-%s-%s"
                                            elfeed-goodies/powerline-default-separator
                                            (cdr powerline-default-separator-dir))))
           (db-time (seconds-to-time (elfeed-db-last-update)))
           (stats (-elfeed/feed-stats))
           (search-filter (cond
                           (elfeed-search-filter-active
                            "")
                           (elfeed-search-filter
                            elfeed-search-filter)
                           (""))))
      (if (>= (window-width) (* (frame-width) elfeed-goodies/wide-threshold))
          (search-header/draw-wide separator-left separator-right search-filter stats db-time)
        (search-header/draw-tight separator-left separator-right search-filter stats db-time)))))

(defun elfeed-goodies/entry-line-draw (entry)
  "Print ENTRY to the buffer."

  (let* ((title (or (elfeed-meta entry :title) (elfeed-entry-title entry) ""))
         (date (elfeed-search-format-date (elfeed-entry-date entry)))
         (title-faces (elfeed-search--faces (elfeed-entry-tags entry)))
         (feed (elfeed-entry-feed entry))
         (feed-title
          (when feed
            (or (elfeed-meta feed :title) (elfeed-feed-title feed))))
         (tags (mapcar #'symbol-name (elfeed-entry-tags entry)))
         (tags-str (concat "[" (mapconcat 'identity tags ",") "]"))
         (title-width (- (window-width) elfeed-goodies/feed-source-column-width
                         elfeed-goodies/tag-column-width 4))
         (title-column (elfeed-format-column
                        title (elfeed-clamp
                               elfeed-search-title-min-width
                               title-width
                               title-width)
                        :left))
         (tag-column (elfeed-format-column
                      tags-str (elfeed-clamp (length tags-str)
                                             elfeed-goodies/tag-column-width
                                             elfeed-goodies/tag-column-width)
                      :left))
         (feed-column (elfeed-format-column
                       feed-title (elfeed-clamp elfeed-goodies/feed-source-column-width
                                                elfeed-goodies/feed-source-column-width
                                                elfeed-goodies/feed-source-column-width)
                       :left)))

    (if (>= (window-width) (* (frame-width) elfeed-goodies/wide-threshold))
        (progn
          (insert (propertize date 'face 'elfeed-search-date-face) " ")
          (insert (propertize feed-column 'face 'elfeed-search-feed-face) " ")
          (insert (propertize tag-column 'face 'elfeed-search-tag-face) " ")
          (insert (propertize title 'face title-faces 'kbd-help title)))
      (insert (propertize title 'face title-faces 'kbd-help title)))))
#+end_src
*** elfeed-tube
#+begin_src emacs-lisp
;; https://www.reddit.com/r/emacs/comments/vo2szt/for_digital_minimalists_rssatom_emacs_and_elfeed/
(defun dorneanu/elfeed-play-with-mpv ()
  (interactive)
  (start-process "elfeed-mpv" nil "mpv"
                 (elfeed-entry-link
                  (or elfeed-show-entry
                      (elfeed-search-selected t)))))

;; https://github.com/skeeto/elfeed/issues/267
(defun elfeed-play-with-mpv ()
  "Play entry link with mpv."
  (interactive)
  (let ((entry (if (eq major-mode 'elfeed-show-mode) elfeed-show-entry (elfeed-search-selected :single)))
        (quality-arg "")
        (quality-val (completing-read "Max height resolution (0 for unlimited): " '("0" "480" "720") nil nil)))
    (setq quality-val (string-to-number quality-val))
    (message "Opening %s with height≤%s with mpv..." (elfeed-entry-link entry) quality-val)
    (when (< 0 quality-val)
      (setq quality-arg (format "--ytdl-format=[height<=?%s]" quality-val)))
    (start-process "elfeed-mpv" nil "mpv" quality-arg (elfeed-entry-link entry))))

(use-package elfeed-tube
  ;; :straight (:host github :repo "karthink/elfeed-tube")
  :after elfeed
  :demand t
  :config
  ;; (setq elfeed-tube-auto-save-p t) ;; t is auto-save (not default)
  ;; (setq elfeed-tube-auto-fetch-p t) ;;  t is auto-fetch (default)
  (elfeed-tube-setup)

  :bind (:map elfeed-show-mode-map
         ("M" . #'dorneanu/elfeed-play-with-mpv)
         ("F" . elfeed-tube-fetch)
         ([remap save-buffer] . elfeed-tube-save)
         :map elfeed-search-mode-map
         ("M" . #'dorneanu/elfeed-play-with-mpv)
         ("F" . elfeed-tube-fetch)
         ([remap save-buffer] . elfeed-tube-save)))

(use-package elfeed-tube-mpv
  ;; :straight (:host github :repo "karthink/elfeed-tube")
  :bind (:map elfeed-show-mode-map
              ("C-c C-f" . elfeed-tube-mpv-follow-mode)
              ("C-c C-w" . elfeed-tube-mpv-where)))

#+end_src
** Documentation
*** google-translate
#+begin_src emacs-lisp
;; With fix from https://github.com/atykhonov/google-translate/issues/52#issuecomment-727920888
(use-package google-translate
  :custom
  (google-translate-backend-method 'curl)
  :config
  (setq google-translate-translation-directions-alist
        '(("en" . "de") ("de" . "en")))
  (setq google-translate-pop-up-buffer-set-focus t)
  (setq google-translate-default-source-language "en")
  (setq google-translate-default-target-language "de")
  (defun google-translate--search-tkk () "Search TKK." (list 430675 2721866130)))
#+end_src
*** TODO dict.cc                                                              :todo:todo:
#+begin_src emacs-lisp
(use-package dictcc)
(my-leader-def "m l d" 'dictcc)
#+end_src
** Productivity
*** wakatime
#+begin_src emacs-lisp
(use-package wakatime-mode
  :config
  (setq
   wakatime-python-bin "/home/victor/.pyenv/versions/emacs/bin/python"
   wakatime-cli-path "/home/victor/.pyenv/versions/emacs/bin/wakatime")
  (global-wakatime-mode))
#+end_src
*** Jira
#+begin_src emacs-lisp
(use-package jiralib2)
(use-package ejira
  :init
  (setq
   ;; NOTE, this directory needs to be in `org-agenda-files'`
   ejira-org-directory       org-directory
   ejira-projects            '("TECH" "SEC" "CP")

   ejira-priorities-alist    '(("Highest" . ?A)
                               ("High"    . ?B)
                               ("Medium"  . ?C)
                               ("Low"     . ?D)
                               ("Lowest"  . ?E))
   ejira-todo-states-alist   '(("To Do"       . 1)
                               ("In Progress" . 2)
                               ("Done"        . 3)))
  :config
  ;; Tries to auto-set custom fields by looking into /editmeta
  ;; of an issue and an epic.
  ;; (add-hook 'jiralib2-post-login-hook #'ejira-guess-epic-sprint-fields)

  ;; They can also be set manually if autoconfigure is not used.
  ;; (setq ejira-sprint-field       'customfield_10001
  ;;       ejira-epic-field         'customfield_10002
  ;;       ejira-epic-summary-field 'customfield_10004)

  (require 'ejira-agenda)

  ;; Make the issues visisble in your agenda by adding `ejira-org-directory'
  ;; into your `org-agenda-files'.
  ;; (add-to-list 'org-agenda-files ejira-org-directory)

  ;; Add an agenda view to browse the issues that
  ;; (org-add-agenda-custom-command
  ;;  '("j" "My JIRA issues"
  ;;    ((ejira-jql "resolution = unresolved and assignee = currentUser()"
  ;;                ((org-agenda-overriding-header "Assigned to me"))))))
  )

#+end_src
*** mu4e
#+begin_src emacs-lisp
(use-package mu4e
  ;; :load-path "/usr/share/emacs/site-lisp/mu4e/"
  ;; :defer 20 ; Wait until 20 seconds after startup
  :custom
  (mu4e-use-fancy-chars t)
  (mu4e-headers-fields
   '((:account    . 13)
     (:human-date . 12)
     (:flags      . 6)
     (:from       . 22)
     (:subject    . nil)))
  :config
  ;; This is set to 't' to avoid mail syncing issues when using mbsync
  ;; (setq mu4e-change-filenames-when-moving t)

  ;; Refresh mail using isync every 10 minutes
  (setq mu4e-update-interval (* 10 60))
  (setq mu4e-get-mail-command "mbsync -a")
  (setq mu4e-maildir "/cs/priv/mail")

  ;; Set citation settings
  (setq message-citation-line-format "\nOn %a, %b %d, %Y at %r %z, %N wrote:\n")
  (setq message-citation-line-function 'message-insert-formatted-citation-line)


  ;; Set date format (header view)
  (setq mu4e-headers-date-format "%F")

  ;; How should html context be converted
  ;; (setq mu4e-html2text-command "/usr/bin/w3m -T text/html")
  (setq mu4e-html2text-command "iconv -c -t utf-8 | pandoc -f html -t plain")

  ;; Improve rendering of rich-text messages (html)
  (setq shr-color-visible-luminance-min 80))



;; Use password store (especially for SMTP passwords)
(after! auth-source
    (setq auth-sources '(password-store))
)
  ;; (setq mu4e-drafts-folder "/[Gmail]/Drafts")
  ;; (setq mu4e-sent-folder   "/[Gmail]/Sent Mail")
  ;; (setq mu4e-refile-folder "/[Gmail]/All Mail")
  ;; (setq mu4e-trash-folder  "/[Gmail]/Trash")

  ;; (setq mu4e-maildir-shortcuts
  ;;       '(("/Inbox"             . ?i)
  ;;         ("/[Gmail]/Sent Mail" . ?s)
  ;;         ("/[Gmail]/Trash"     . ?t)
  ;;         ("/[Gmail]/Drafts"    . ?d)
  ;;         ("/[Gmail]/All Mail"  . ?a))))
#+end_src
**** contexts
#+begin_src emacs-lisp
 (setq mu4e-contexts
       `( ,(make-mu4e-context
            :name "gmail"
            :enter-func (lambda () (mu4e-message "Entering gmail context"))
            :leave-func (lambda () (mu4e-message "Leaving gmail context"))
            ;; we match based on the contact-fields of the message
            :match-func
            (lambda (msg)
              (when msg
                (string-prefix-p "/gmail" (mu4e-message-field msg :maildir))))
            :vars `((user-mail-address . ,(+pass-get-secret "mail/gmail/personal/username"))
                    (user-full-name    . "Cyneox")
                    (smtpmail-smtp-user . ,(+pass-get-secret "mail/gmail/personal/username"))
                    (smtpmail-smtp-server  . "smtp.gmail.com")
                    (smtpmail-smtp-service . 465)
                    (smtpmail-stream-type  . ssl)
                    (mu4e-compose-signature . "Cyneox via Gmail")
                    (mu4e-drafts-folder  . "/[Gmail]/drafts")
                    (mu4e-sent-folder  . "/[Gmail]/sent")
                    (mu4e-refile-folder  . "/[Gmail]/All Mail")
                    (mu4e-trash-folder  . "/[Gmail]/bin")))
          ,(make-mu4e-context
            :name "variomedia"
            :enter-func (lambda () (mu4e-message "Switch to the variomedia context"))
            :match-func
            (lambda (msg)
              (when msg
                (string-prefix-p "/variomedia" (mu4e-message-field msg :maildir))))
            :vars `((user-mail-address . ,(+pass-get-secret "mail/personal/username"))
                    (user-full-name    . "Victor Dorneanu")
                    (smtpmail-smtp-user . ,(+pass-get-secret "mail/personal/username"))
                    (smtpmail-smtp-server  . "smtp.variomedia.de")
                    (smtpmail-smtp-service . 465)
                    (smtpmail-stream-type  . ssl)
                    (mu4e-compose-signature . "Victor via Emacs")
                    (mu4e-drafts-folder  . "/variomedia/drafts")
                    (mu4e-sent-folder  . "/variomedia/sent")
                    (mu4e-trash-folder  . "/variomedia/bin")))
          ,(make-mu4e-context
            :name "cashlink"
            :enter-func (lambda () (mu4e-message "Switch to the cashlink context"))
            :match-func
            (lambda (msg)
              (when msg
                (string-prefix-p "/gmail" (mu4e-message-field msg :maildir))))
            :vars `((user-mail-address . ,(+pass-get-secret "mail/gmail/work/username"))
                    (user-full-name    . "Victor Dorneanu")
                    (smtpmail-smtp-user . ,(+pass-get-secret "mail/gmail/work/username"))
                    (smtpmail-smtp-server  . "smtp.gmail.com")
                    (smtpmail-smtp-service . 465)
                    (smtpmail-stream-type  . ssl)
                    (mu4e-compose-signature . "Victor via Emacs")
                    (mu4e-drafts-folder  . "/cashlink/drafts")
                    (mu4e-sent-folder  . "/cashlink/sent")
                    (mu4e-trash-folder  . "/cashlink/bin")
                    (mu4e-compose-signature . ,(concat "Victor Dorneanu\n" "Senior Security Engineer @ Cashlink\n"))
                    ))))
#+end_src
** Bookmarks
*** pocket-reader.el
#+begin_src emacs-lisp
(use-package pocket-reader
    :after (pocket-lib)
    :config
    ;; Check max column width for site field
    (setq pocket-reader-site-column-max-width 20)

    ;; don't archive automatically on open
    (setq pocket-reader-archive-on-open nil))

    ;; dirt hack to change title-width
    (defun pocket-reader--set-tabulated-list-format ()
      "Set `tabulated-list-format' according to the maximum width of items about to be displayed."
      (when-let ((domain-width (cl-loop for item being the hash-values of pocket-reader-items
                                        maximizing (length (ht-get item 'domain))))
                 (title-width (- (window-text-width) 11 2 domain-width 70 1)))
        (when (> domain-width pocket-reader-site-column-max-width)
          (setq domain-width pocket-reader-site-column-max-width))
        (setq tabulated-list-format (vector (list "Added" 10 pocket-reader-added-column-sort-function)
                                            (list "*" 1 t)
                                            (list "Title" title-width t)
                                            (list "Site" domain-width t)
                                            (list "Tags" 10 t)))))
;; Define key bindings
(map! :map pocket-reader-mode-map
      :after pocket-reader
      :nm "d" #'pocket-reader-delete
      :nm "SD" #'dorneanu/pocket-reader-send-to-dropbox
      :nm "a" #'pocket-reader-toggle-archived
      :nm "B" #'pocket-reader-open-in-external-browser
      :nm "e" #'pocket-reader-excerpt
      :nm "G" #'pocket-reader-more
      :nm "TAB" #'pocket-reader-open-url
      :nm "tr" #'pocket-reader-remove-tags
      :nm "tN" #'dorneanu/pocket-reader-remove-next
      :nm "mm" #'dorneanu/pocket-play-with-mpv
      :nm "C-b" #'dorneanu/tiddlywiki-add-bookmark
      :nm "ta" #'pocket-reader-add-tags
      :nm "gr" #'pocket-reader-refresh
      :nm "p" #'pocket-reader-search
      :nm "U" #'pocket-reader-unmark-all
      :nm "y" #'pocket-reader-copy-url
      :nm "Y" #'dorneanu/pocket-reader-copy-to-scratch)
#+end_src
**** Functions
#+begin_src emacs-lisp
;; Copy current url to scratch buffer
(defun dorneanu/pocket-reader-copy-to-scratch ()
  "Copy URL of current item to kill-ring/clipboard."
  (interactive)
  (when-let ((id (tabulated-list-get-id))
             (item (ht-get pocket-reader-items id))
             (url (pocket-reader--get-url item)))
    (with-current-buffer "*scratch*"
      (insert url)
      (newline))
     (message "Added: %s to scratch buffer" url)))

;; Download current URL and send to Dropbox
(defun dorneanu/pocket-reader-send-to-dropbox ()
  "Downloads current URL as epub and sends it to Dropbox"
  (interactive)
  (when-let ((id (tabulated-list-get-id))
             (item (ht-get pocket-reader-items id))
             (url (pocket-reader--get-url item)))
    ;; (pocket-reader--add-tags (list "1e"))
    (message (concat "Adding: " url ))
    (pocket-reader-add-tags "1e")
    (async-shell-command (concat "adld " "" url))
 ))

;; Remove 2read and next tags from current pocket reader item
(defun dorneanu/pocket-reader-remove-next()
  (interactive)
  (pocket-reader--remove-tags (list "2read" "next"))
  (message "Removed 2read, next tags from current item")
  (pocket-reader-toggle-archived)
  (message "Archived item")
)

;; custom functions for getpockt
(defun dorneanu/pocket-2share ()
  "Show getpocket items to be shared"
  (interactive)
  (pocket-reader-search ":all t:2share" :add nil))

(defun dorneanu/pocket-2share-work ()
  "Show getpocket items to be shared (work context)"
  (interactive)
  (pocket-reader-search ":all t:2share t:work" :add nil))

(defun dorneanu/pocket-2read ()
  "Show getpocket items to be shared"
  (interactive)
  (pocket-reader-search "t:2read" :add nil))

(defun dorneanu/pocket-play-with-mpv ()
  "Play entry link with mpv."
  (interactive)
  (let* ((quality-arg "")
        (quality-val (completing-read "Max height resolution (0 for unlimited): " '("0" "480" "720") nil nil))
        (item (ht-get pocket-reader-items (tabulated-list-get-id)))
        (url (pocket-reader--get-url item)))
    (setq quality-val (string-to-number quality-val))
    (message "Opening %s with height≤%s with mpv..." url quality-val)
    (when (< 0 quality-val)
      (setq quality-arg (format "--ytdl-format=[height<=?%s]" quality-val)))
    (start-process "mpv" nil "mpv" quality-arg url)))

#+end_src
** Twitter
#+begin_src emacs-lisp
(use-package twittering-mode)
;; I'm not sure about this
(setq twittering-allow-insecure-server-cert t)
#+end_src
** ChatGPT
#+begin_src emacs-lisp
(use-package! chatgpt
  :defer t
  :config
  (unless (boundp 'python-interpreter)
    (defvaralias 'python-interpreter 'python-shell-interpreter))
  (setq chatgpt-repo-path (expand-file-name "straight/repos/ChatGPT.el/" doom-local-dir))
  (set-popup-rule! (regexp-quote "*ChatGPT*")
    :side 'bottom :size .5 :ttl nil :quit t :modeline nil)
  :bind ("C-c q" . chatgpt-query))
#+end_src

* Inspiration
- https://www.suenkler.info/emacs/emacs-config/
- https://sqrtminusone.xyz/configs/readme/
- https://config.daviwil.com/emacs
- https://quinoa42.github.io/en/dot-emacs/
- https://sriramkswamy.github.io/dotemacs/
