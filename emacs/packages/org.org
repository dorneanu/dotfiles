#+title: Emacs — Packages — Org Mode
#+setupfile: ../../headers
#+property: header-args:emacs-lisp  :mkdirp yes :lexical t :exports code
#+property: header-args:emacs-lisp+ :tangle ~/.config/emacs/lisp/org.el
#+property: header-args:emacs-lisp+ :mkdirp yes :noweb no-export

* Org-mode
#+name: general-keybindings-gen
#+header: :tangle no :exports none :results value :cache no
#+begin_src emacs-lisp :var table=org-keybinds-babel prefix=""
(mapconcat (lambda (line)
             (let* ((key      (nth 0 line))
                    (function (nth 1 line))
                    (comment  (or (nth 2 line) ""))
                    (package  (or (nth 3 line) "")))
               (format "\"%s%s\" %s"
                       prefix
                       key
                       (if (string= "" comment)
                           (if (member function '("" "nil")) "nil" (concat "#'" function))
                         (format "'(%s :wk %s%s)"
                                 (if (member function '("" "nil")) ":ignore t" function)
                                 (if (member function '("none" "nil")) "t" (concat "\"" comment "\""))
                                 (if (string-blank-p package) "" (concat ":package " package)))))))
           table
           "\n")
#+end_src

Main configuration

#+begin_src emacs-lisp
(use-package org
  :ensure nil
  :defer t
  :hook (
         ;; (org-mode . visual-line-mode)
         (org-mode . org-indent-mode))
  :config
  (require 'ox-beamer)
  (require 'org-protocol)
  (setq org-hide-leading-stars             t
        org-hide-macro-markers             t
        org-ellipsis                       "…"
        org-image-actual-width             600
        org-redisplay-inline-images        t
        org-display-inline-images          t
        org-auto-align-tags                t
        org-startup-with-inline-images     "inlineimages"
        org-pretty-entities                t
        org-fontify-whole-heading-line     t
        org-fontify-done-headline          t
        org-fontify-quote-and-verse-blocks t
        org-startup-indented               nil
        org-startup-align-all-tables       t
        org-use-property-inheritance       t
        org-list-allow-alphabetical        t
        org-M-RET-may-split-line           nil
        org-src-window-setup               'split-window-below
        org-src-fontify-natively           t
        org-src-tab-acts-natively          t
        org-src-preserve-indentation       t
        org-adapt-indentation              nil
        org-log-done                       'time
        org-directory                      "~/work/repos/org/"
        org-default-notes-file             (expand-file-name "notes.org" org-directory))

  ;; Set TODO keywords
  (setq org-todo-keywords
        '((sequence
           "TODO(t)"
           "STARTED(s)"
           "NEXT(n)"
           "WIP(p)"
           "WAITING(w!)"
           "|"
           "DONE(d)"
           "CANCELED(c)")
          (sequence
           "PROJ(p)"
           "MEETING(m)"
           "REVIEW(r)"
           "IDEA(i)"))
        ;; "|"
        ;; "STOP(c)"
        ;; "EVENT(m)"
)

  ;; No blank lines before new entries
  (setq org-blank-before-new-entry
        '((heading . nil)
          (plain-list-item . nil)))

  <<org-agenda-files>>
  <<org-behavior-electric>>
  <<org-refiling>>
  <<org-create-emphasis-functions()>>
  <<org-babel-load-languages>>
  <<org-mode-visual-prettify-symbols>>
  <<org-re-reveal>>
  <<org-html-validation>>
  :general
  (phundrak/evil
    :keymaps 'org-mode-map
    :packages 'org
    "RET" 'org-open-at-point)
  (phundrak/major-leader-key
    :keymaps 'org-mode-map
    :packages 'org
    <<general-keybindings-gen(table=org-keybinds-various)>>
    <<general-keybindings-gen(table=org-keybinds-babel)>>
    <<general-keybindings-gen(table=org-keybinds-dates)>>
    <<general-keybindings-gen(table=org-keybinds-insert)>>
    <<general-keybindings-gen(table=org-keybinds-jump)>>
    <<general-keybindings-gen(table=org-keybinds-tables)>>
    <<general-keybindings-gen(table=org-keybinds-refiling)>>
    <<general-keybindings-gen(table=org-keybinds-toggles)>>)
  (phundrak/major-leader-key
    :packages 'org
    :keymaps 'org-src-mode-map
    "'" #'org-edit-src-exit
    "k" #'org-edit-src-abort)
  )
#+end_src

#+RESULTS:

** Packages
*** evil-org
#+begin_src emacs-lisp
(use-package evil-org
  :straight (:build t)
  :diminish
  :after (org)
  :hook (org-mode . (lambda () evil-org-mode))
  :config
  (evil-org-set-key-theme)
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys)
  ;; Disable SPC key in org-agenda
  ;; (define-key org-agenda-mode-map (kbd "SPC") nil)
  (evil-define-key 'motion org-agenda-mode-map (kbd "SPC") nil)
)
#+end_src

*** COMMENT evil-org-agenda
#+begin_src emacs-lisp
;; (use-package evil-org-agenda
;;   :after (evil-org org-agenda)
;;   :hook 
;;   (org-agenda-mode . evil-org-agenda-mode)
;;   :config
;;   (evil-org-agenda-set-keys)
;;   ;; Disable SPC in org-agenda-mode
;;   ;; (require 'evil-org-agenda)
;;   ;; (evil-define-key* 'motion evil-org-agenda-mode-map
;;   ;;   (kbd "SPC") nil)
;;   )

#+end_src
*** org-contrib
#+begin_src emacs-lisp
(use-package org-contrib
  :after (org)
  :defer t
  :straight (:build t)
  :init
  (require 'ox-extra)
  (ox-extras-activate '(latex-header-blocks ignore-headlines)))
#+end_src

*** org-agenda
#+name: org-agenda-files
#+begin_src emacs-lisp :tangle no
(setq org-agenda-files (list org-directory))
#+end_src

#+name: org-agenda
#+begin_src emacs-lisp
(use-package org-agenda
  :ensure nil
  ;; :after org
  :defer t
  :config
  (setq
   ;; Set agenda files
   org-agenda-files (list org-directory)

   org-agenda-file-regexp
   (replace-regexp-in-string "\\\\\\.org" "\\\\.org\\\\(\\\\.gpg\\\\)?"
                             org-agenda-file-regexp)

   ;; Skip unavailable agenda files
   org-agenda-skip-unavailable-files t

   ;; Skip done tasks
   org-agenda-skip-scheduled-if-done t
   org-agenda-skip-deadline-if-done t

   ;; Show warnings for deadlines 7 days in advance.
   org-deadline-warning-days 5
   org-agenda-include-deadlines t
   org-agenda-todo-list-sublevels t

   ;; Set column width for tags in agenda
   org-agenda-tags-column 80


   ;; org-agenda-todo-ignore-scheduled 'all
   ;; org-agenda-todo-ignore-deadlines 'all
   ;; org-agenda-todo-ignore-with-date 'all

   ;; Use straight line as separator between agenda blocks
   ;; https://www.utf8-chartable.de/unicode-utf8-table.pl?start=9472&utf8=dec&unicodeinhtml=dec
   ;; org-agenda-block-separator 9472
   org-agenda-compact-blocks t
   org-agenda-start-day nil ;; i.e. today
   org-agenda-span 1
   org-agenda-start-on-weekday nil

   ;; Clock report settings
   org-agenda-start-with-clockreport-mode t
   org-clock-report-include-clocking-task t
   org-agenda-clockreport-parameter-plist '(:link nil :maxlevel 6 :fileskip0 t :compact nil)

   ;; Time grid
   org-agenda-time-grid
   '((daily today require-timed)
     (0900 01000 1100 1200 1300 1400 1500 1600 1700 1800)
     "-"
     "────────────────")


   ;; http://doc.endlessparentheses.com/Var/org-agenda-prefix-format.html
   org-agenda-prefix-format
   '(
     (agenda . "%5c %4e %?-12t %s")
     (todo   . " %4e %-12c")
     (tags   . " %-22c")
     (search . " %-12c")))


  ;; (add-hook 'org-agenda-mode-hook
  ;;           (lambda ()
  ;;             (visual-line-mode -1)
  ;;             (toggle-truncate-lines 1)
  ;;             (display-line-numbers-mode 0)))

  ;; Add extra files to org-agenda-files
  (add-to-list 'org-agenda-files "~/syncthing/org/2-PARA.org" "~/syncthing/org/0box.org"))

#+end_src

#+RESULTS: org-agenda
: t

**** org-super-agenda

Define custom org agenda commands.
Inspired by https://www.rousette.org.uk/archives/doom-emacs-tweaks-org-journal-and-org-super-agenda/

#+begin_src emacs-lisp
(use-package org-super-agenda
  :straight t
  :after org-agenda
  :config
  ;; Toogle org links display
  ;; (org-toggle-link-display)

  ;; Enable it
  (org-super-agenda-mode)

  ;; Toggle org links display
  (setq org-link-descriptive t)

  ;; Set agenda custom commands
  (setq org-agenda-custom-commands
        '(
          ("a" "Agenda"
           ((agenda "" ((org-agend-span 'day)
                        (org-super-agenda-groups
                         '(
                           (:name "Today"
                            :time-grid t
                            :date today
                            :scheduled today
                            :order 1)
                           (:discard (:anything))))))
            (tags (concat "wk" (format-time-string "%V")) ((org-agenda-overriding-header  (concat "--\nToDos Week " (format-time-string "%V")))
                                                           (org-super-agenda-groups
                                                            '((:discard (:deadline t))
                                                              (:discard (:todo ("DONE" "CANCELED" "WAITING")))
                                                              (:discard (:not (:todo t)))))))

            (alltodo "" ((org-agenda-overriding-header "")
                         (org-agenda-prefix-format '(
                                                     (agenda . "%7c %4e %?-12t %s")
                                                     (todo . " %-8c [%-4e] %?-12t %s")
                                                     (tags   . " %-22c")
                                                     (search . " %-12c")))

                         (org-super-agenda-groups
                          '(
                            (:log t)
                            (:discard (:tag "inactive"))
                            (:discard (:tag "jira"))
                            (:name "Started"
                             :todo ("STARTED")
                             :order 1)
                            (:name "Quickies"
                             :and (:effort< "0:15" :not (:tag "recurring")))

                            (:name "This Week"
                             :auto-property "week")

                            (:name "Overdue"
                             :deadline past
                             :scheduled past
                             :order 2)
                            (:name "Soon"
                             :deadline feature
                             :scheduled feature
                             :order 2)
                            (:name "Waiting"
                             :todo "WAITING"
                             :order 2)
                            (:name "To refile"
                             :category "inbox"
                             :todo ""
                             :order 10)
                            (:name "Next to do"
                             :todo "NEXT"
                             :order 20)
                            ;; (:name "WIP"
                            ;;  :todo ("WIP")
                            ;;  :order 40)
                            (:discard (:anything))))))
            (alltodo "" ((org-agenda-overriding-header "")
                         (org-agenda-hide-tags-regexp "project\\|ticket\\|active")
                         (org-agenda-prefix-format '((todo . " %-8c [%-4e] %?-12t %s")))
                         (org-super-agenda-groups
                          '(
                            (:log t)
                            (:discard (:tag "inactive"))
                            (:name "Projects"
                             :auto-property "project"
                             :todo t
                             :order 1)
                            (:discard (:anything))))))))


          ("r" "Resonance"
           ((alltodo "" ((org-agenda-overriding-header "Resonance calendar")
                         (org-super-agenda-groups
                          '(
                            (:discard (:not (:tag ("video" "article"))))
                            (:and (:tag))
                            (:auto-parent t)
                            (:discard (:anything)))))))))))

#+end_src

Copy same keymap as in ~org-agenda-mode~:

#+begin_src emacs-lisp
(eval-after-load "evil-org-agenda"
  '(progn
     (setq org-super-agenda-header-map (copy-keymap org-agenda-mode-map))
     ))
#+end_src
*** org-sidebar-tree                                                    :todo:
#+begin_src emacs-lisp
(use-package org-sidebar
  :straight t)
#+end_src
*** org-timeblock
#+begin_src emacs-lisp
(use-package org-timeblock
  :straight t
  :after (org org-agenda)
  :bind (:map org-timeblock-mode-map
              ("M-n" . org-timeblock-forward-block)
              ("M-p" . org-timeblock-backward-block)
              ("M-s" . org-timeblock-schedule)
              ("M-c i" . org-timeblock-clock-in)
              ("M-c t" . org-timeblock-todo)
              ("r" . org-timeblock-redraw-buffers)
              ("s" . org-timeblock-switch-view))
  :general
  (phundrak/major-leader-key
    :keymaps 'org-timeblock-mode-map
    :packages 'org-timeblock
    :infix "O"
    ""  '(:ignore t :which-key "preview")
    "c" #'org-timeblock-clock-in
    "g"  #'org-timeblock-goto
    "j"  #'org-timeblock-jump-to-day
    "s"  #'org-timeblock-switch-view
    "t"  #'org-timeblock-todo)
  :config
  (setq org-timeblock-n-days-view 2
        org-timeblock-scale-options '(8 . 17)))

(defun dorneanu/org-setup-org-timeblock()
  (interactive)
  (add-hook `org-agenda-mode-hook #'org-timeblock-redraw-buffers)
  (split-window-right)
  (balance-windows)
  (other-window 1)
  (org-timeblock))
#+end_src

*** org-capture
Finish this:

#+begin_src emacs-lisp
(use-package org-capture
  :ensure nil
  :preface
  (defvar my/org-appointment
    (concat "* TODO %^{Appointment} :appt:\n"
            "SCHEDULED: %t\n") "Template for appointment task.")
  (defvar my/org-active-task-template
    (concat "* NEXT %^{Task}\n"
            ":PROPERTIES:\n"
            ":Effort: %^{effort|1:00|0:05|0:15|0:30|2:00|4:00}\n"
            ":CAPTURED: %<%Y-%m-%d %H:%M>\n"
            ":END:") "Template for basic task.")
  (defvar my/org-meeting
    (concat "* MEETING %^{Meeting}\n"
            "SCHEDULED: %t\n") "Template for meetings")

  (defvar my/org-weekly
    (concat "* wk" (format-time-string "%V") "       " ":wk" (format-time-string "%V") ":")
    "Template for weeklies")

  (defvar my/org-basic-task-template
    (concat "* TODO %^{Task}\n"
            ":PROPERTIES:\n"
            ":Effort: %^{effort|1:00|0:05|0:15|0:30|2:00|4:00}\n"
            ":CAPTURED: %<%Y-%m-%d %H:%M>\n"
            ":END:") "Template for basic task.")
  :custom
  (org-capture-templates
   `(
     ("a" "Appointment" entry (file+headline "inbox.org" "Appointments"),
      my/org-appointment
      :empty-lines 1)

     ("m" "Meeting" entry (file+headline "inbox.org" "Meetings"),
      my/org-meeting
      :empty-lines 1)

     ("M" "Active meeting" entry (file+headline "inbox.org" "Meetings")
      "* MEETING with %? :meeting:\n%U" :clock-in t :clock-resume t :empty-lines 1)

     ("t" "New Task")
     ("ta" "Active" entry (file+headline "inbox.org" "Active"),
      my/org-active-task-template
      :empty-lines 1
      :clock-in t)
     ("tb" "Backlog" entry (file+headline "inbox.org" "Backlog"),
      my/org-basic-task-template
      :empty-lines 1)

     ("w" "Weekly" entry (file+headline "inbox.org" "Weeklies"),
      my/org-weekly
      :empty-lines 1))))
#+end_src

#+RESULTS:

*** org-emphasize

#+name: org-emphasis-character
| Emphasis       | Character | Character code |
|----------------+-----------+----------------|
| bold           | ~*~       |             42 |
| italic         | ~/~       |             47 |
| underline      | ~_~       |             95 |
| verbatim       | ~=~       |             61 |
| code           | ~~~       |            126 |
| strike-through | ~+~       |             43 |

#+name: org-create-emphasis-functions
#+header: :tangle no :exports results :cache yes
#+header: :wrap "src emacs-lisp :tangle no :exports code"
#+begin_src emacs-lisp :var emphasis-list=org-emphasis-character
(mapconcat (lambda (emphasis)
             (let ((type (car emphasis))
                   (code (nth 2 emphasis)))
               (format "(defun org-emphasize-%s ()
  \"Emphasize as %s the current region.\"
  (interactive)
  (org-emphasize %s))"
                       type
                       type
                       code)))
           emphasis-list
           "\n")
#+end_src

#+RESULTS[dbd10cce4ae05a046838214784f0f4c16765e728]: org-create-emphasis-functions
#+begin_src emacs-lisp :tangle no :exports code
(defun org-emphasize-bold ()
  "Emphasize as bold the current region."
  (interactive)
  (org-emphasize 42))
(defun org-emphasize-italic ()
  "Emphasize as italic the current region."
  (interactive)
  (org-emphasize 47))
(defun org-emphasize-underline ()
  "Emphasize as underline the current region."
  (interactive)
  (org-emphasize 95))
(defun org-emphasize-verbatim ()
  "Emphasize as verbatim the current region."
  (interactive)
  (org-emphasize 61))
(defun org-emphasize-code ()
  "Emphasize as code the current region."
  (interactive)
  (org-emphasize 126))
(defun org-emphasize-strike-through ()
  "Emphasize as strike-through the current region."
  (interactive)
  (org-emphasize 43))
#+end_src

You can find the keybinds for these functions [[file:./org#keybindings][here]].

*** org-refile
Some extras copied from Doom Emacs
#+begin_src emacs-lisp
(defun +org-headline-avy ()
  "TODO"
  (require 'avy)
  (save-excursion
    (when-let* ((org-reverse-note-order t)
                (pos (avy-with avy-goto-line (avy-jump (rx bol (1+ "*") (1+ blank))))))
      (when (integerp (car pos))
        ;; If avy is aborted with "C-g", it returns `t', so we know it was NOT
        ;; aborted when it returns an int. If it doesn't return an int, we
        ;; return nil.
        (copy-marker (car pos))))))

(defun +org/goto-visible ()
  "TODO"
  (interactive)
  (goto-char (+org-headline-avy)))
#+end_src

And now all the settings for ~org-refile~:

#+name: org-refiling
#+begin_src emacs-lisp
;; Refiling
(setq org-refile-use-cache t)
(setq org-refile-targets '((nil :maxlevel . 9)
                           (org-agenda-files :maxlevel . 9)))

;; Allow refile to create parent tasks with confirmation
(setq org-refile-allow-creating-parent-nodes 'confirm)
(setq org-refile-use-outline-path 'file)       ; Show filename for refiling
(setq org-outline-path-complete-in-steps nil)  ; Refile in a single go

;; Exclude DONE state tasks from refile targets
(defun dorneanu/verify-refile-target ()
  "Exclude todo keywords with a done state from refile targets."
  (not (member (nth 2 (org-heading-components)) org-done-keywords)))
(setq org-refile-target-verify-function 'dorneanu/verify-refile-target)

;; Some custom elisp functions
(defun dorneanu/org-refile-anywhere (&optional goto default-buffer rfloc msg)
  "A version of `org-refile' which allows refiling to any subtree."
  (interactive "P")
  (let ((org-refile-target-verify-function))
    (org-refile goto default-buffer rfloc msg)))

(defun dorneanu/org-agenda-refile-anywhere (&optional goto rfloc no-update)
  "A version of `org-agenda-refile' which allows refiling to any subtree."
  (interactive "P")
  (let ((org-refile-target-verify-function))
    (org-agenda-refile goto rfloc no-update)))

;; These are from Doom Emacs: https://github.com/doomemacs/doomemacs/blob/master/modules/lang/org/autoload/org-refile.el
(defun +org/refile-to-current-file (arg &optional file)
  "Refile current heading to elsewhere in the current buffer.
If prefix ARG, copy instead of move."
  (interactive "P")
  (let ((org-refile-targets `((,file :maxlevel . 10)))
        (org-refile-use-outline-path t)
        (org-refile-keep arg)
        current-prefix-arg)
    (call-interactively #'org-refile)))

(defun +org/refile-to-visible ()
  "Refile current heading as first child of visible heading selected with Avy."
  (interactive)
  (when-let (marker (+org-headline-avy))
    (let* ((buffer (marker-buffer marker))
           (filename
            (buffer-file-name (or (buffer-base-buffer buffer)
                                  buffer)))
           (heading
            (org-with-point-at marker
              (org-get-heading 'no-tags 'no-todo)))
           ;; Won't work with target buffers whose filename is nil
           (rfloc (list heading filename nil marker))
           (org-after-refile-insert-hook (cons #'org-reveal org-after-refile-insert-hook)))
      (org-refile nil nil rfloc))))

(defun +org/refile-to-last-location (arg)
  "Refile current heading to the last node you refiled to.
If prefix ARG, copy instead of move."
  (interactive "P")
  (or (assoc (plist-get org-bookmark-names-plist :last-refile)
             bookmark-alist)
      (user-error "No saved location to refile to"))
  (let ((org-refile-keep arg)
        (completing-read-function
         (lambda (_p _coll _pred _rm _ii _h default &rest _)
           default)))
    (org-refile)))

;; Save all buffers after refilling
(advice-add 'org-refile :after (lambda (&rest _) (org-save-all-org-buffers)))
#+end_src

*** org-roam
After hearing about it for so many years and thinking I really should
install it one day, 2023 is finally the year I installed org-roam! For
those unaware of it, org-roam is a Zettelkasten-style knowledge
management system based on org-mode.

#+begin_src emacs-lisp
(use-package org-roam
  :straight (:build t)
  :defer t
  :custom
  (org-roam-directory "/cs/priv/repos/roam/org")
  ;; (org-roam-directory (expand-file-name "org/roam/" (getenv "HOME")))
  ;; (org-roam-completion-everywhere t)
  :config
  (org-roam-db-autosync-mode 1)
  (setq org-roam-capture-templates
        '(("d" "default" plain
           "%?"
           :if-new (file+head "topics/${slug}.org" "#+title: ${title}\n")
           :unnarrowed t)
          ("j" "Journal" plain "%?"
           :if-new (file+head "journal/%<%Y-%m-%d>.org"
                              "#+title: %<%Y-%m-%d>\n#+filetags: journal\n#+date: %<%Y-%m-%d>\n")
           :immediate-finish t
           :unnarrowed t)
          ("b" "book" plain "%?"
           :if-new
           (file+head "books/${slug}.org" "#+title: ${title}\n#+filetags: book\n")
           :immediate-finish t
           :unnarrowed t)
          ;; Idea from https://daryl.wakatara.com/emacs-gtd-flow-evolved/
          ("r" "Rez" plain "%?"
           :target (file+head "rez/%<%Y>/${slug}.org"
                              "#+TITLE: ${title}
      ,#+CREATED: %u

      ,* ${title}
      :PROPERTIES:
      :URL:
      :END:

      ,* Actions
      ,* Quotes
      ,* Notes
      ") :unnarrowed t)
          ("x" "Blog" plain "%?"
           :if-new (file+head "blog/%<%Y-%m-%d>-${slug}.org" "#+SETUPFILE: setup.org\n#+TITLE: ${title}\n#+CREATED: %<%Y-%m-%d>\n#+HUGO_DRAFT: true\n\n")
           :unnarrowed t)
          ))
  :general
  (phundrak/leader-key
    :packages '(org org-roam)
    :infix "o"
    "r"   '(:ignore t :which-key "roam")
    "rb"  '(org-mark-ring-goto :which-key "back")
    "rB"  #'org-roam-buffer-toggle
    "rn"  '(:ignore t :which-key "nodes")
    "rnf" #'org-roam-node-find
    "rni" #'org-roam-node-insert
    "rno" #'org-roam-node-open
    "rnr" #'org-roam-node-random
    "rnv" #'org-roam-node-visit
    "rs"  '(:ignore t :which-key "sync")
    "rsa" #'org-roam-db-autosync-mode
    "rsc" #'org-roam-db-clear-all
    "rsd" #'org-roam-db-diagnose-node
    "rss" #'org-roam-db-sync
    "rt" '(:ignore t :which-key "tags")
    "rta" #'org-roam-tag-add
    "rtd" #'org-roam-tag-remove
    "ru"  '(:ignore t :which-key "ui")
    "rua" #'org-roam-ui-add-to-local-graph
    "ruo" #'org-roam-ui-open)
  (phundrak/major-leader-key
    :keymaps 'org-mode-map
    :packages '(org org-roam)
    "h"   #'org-id-get-create
    "r"   '(:ignore t :which-key "roam")
    "ra"  '(:ignore t :which-key "alias")
    "raa" #'org-roam-alias-add
    "rar" #'org-roam-alias-remove))
#+end_src

#+begin_src emacs-lisp
(use-package org-roam-ui
  :straight (:build t)
  :defer t
  :after org-roam
  :config
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t))
#+end_src
**** consult-org-roam
#+begin_src emacs-lisp
(use-package consult-org-roam
   :straight t
   :after org-roam
   :init
   (require 'consult-org-roam)
   ;; Activate the minor mode
   (consult-org-roam-mode 1)
   :custom
   ;; Use `ripgrep' for searching with `consult-org-roam-search'
   (consult-org-roam-grep-func #'consult-ripgrep)
   ;; Configure a custom narrow key for `consult-buffer'
   (consult-org-roam-buffer-narrow-key ?r)
   ;; Display org-roam buffers right after non-org-roam buffers
   ;; in consult-buffer (and not down at the bottom)
   (consult-org-roam-buffer-after-buffers t)
   :config
   ;; Eventually suppress previewing for certain functions
   (consult-customize
    consult-org-roam-forward-links
    :preview-key (kbd "M-."))
   :bind
   ;; Define some convenient keybindings as an addition
   ("C-c n e" . consult-org-roam-file-find)
   ("C-c n b" . consult-org-roam-backlinks)
   ("C-c n l" . consult-org-roam-forward-links)
   ("C-c n r" . consult-org-roam-search))
#+end_src

*** org-re-reveal

Use [[https://oer.gitlab.io/org-re-reveal/][org-re-reveal]] for creating presentations using [[https://revealjs.com/][revealjs]].
#+begin_src emacs-lisp
(use-package org-re-reveal
   :straight t)
#+end_src
** Babel
One of the amazing features of org-mode is its literary programming capacities
by running code blocks from within Org-mode itself. But for that, only a couple
of languages are supported directly by Org-mode itself, and they need to be
activated. Here are the languages I activated in my Org-mode configuration:
#+NAME: org-babel-languages-table
| C          |
| emacs-lisp |
| gnuplot    |
| latex      |
| makefile   |
| plantuml   |
| python     |
| sass       |
| shell      |
| sql        |

#+NAME: org-babel-languages-gen
#+header: :cache yes :results replace
#+header: :var languages=org-babel-languages-table[,0]
#+BEGIN_SRC emacs-lisp :exports none :tangle no
(format "'(%s)"
        (mapconcat (lambda ($language)
                     (format "(%s . t)" $language))
                   languages
                   "\n  "))
#+END_SRC

#+RESULTS[b0a5bea13e6ba99525ad166ea5538e74ba4c6ddc]: org-babel-languages-gen
#+begin_example
'((C . t)
  (emacs-lisp . t)
  (gnuplot . t)
  (latex . t)
  (makefile . t)
  (plantuml . t)
  (python . t)
  (sass . t)
  (shell . t)
  (sql . t))
#+end_example

The corresponding code is as follows:
#+NAME: org-babel-load-languages
#+BEGIN_SRC emacs-lisp :noweb yes :tangle no
(org-babel-do-load-languages
 'org-babel-load-languages
 <<org-babel-languages-gen()>>)
#+END_SRC
*** ob-async
Some languages can run asynchronously with the help of ~ob-async~.
#+begin_src emacs-lisp
(use-package ob-async
  :straight (:build t)
  :defer t
  :after (org ob))
#+end_src

A package I use from time to time is ~ob-latex-as-png~ which allows me
to easily convert a LaTeX snippet into a PNG, regardless of the
exporter I use afterwards. Its installation is pretty simple:
#+begin_src emacs-lisp
;; (use-package ob-latex-as-png
;;   :after org
;;   :straight (:build t))
#+end_src

*** ob-restclient
A nice thing to have when working with REST APIs is to have a REST
client. Even better if it can work inside org-mode!
#+begin_src emacs-lisp
(use-package ob-restclient
  :straight (:build t)
  :defer t
  :after (org ob)
  :init
  (add-to-list 'org-babel-load-languages '(restclient . t)))
#+end_src

*** ob-go
#+begin_src emacs-lisp
;; (use-package ob-go
;;   :straight (:build t)
;;   :defer t
;;   :after (org ob))
#+end_src

** Behavior

~electric-mode~ also bothers me a lot when editing org files, so let’s deactivate it:
#+name: org-behavior-electric
#+begin_src emacs-lisp :tangle no
(add-hook 'org-mode-hook (lambda ()
                           (interactive)
                           (electric-indent-local-mode -1)))
#+end_src

As explained in my [[https://blog.phundrak.com/better-custom-ids-orgmode/][blog post]], org-mode is terrible with coming up with
meaningful IDs for its headings. I actually wrote a package for this!
#+begin_src emacs-lisp
(use-package org-unique-id
  :straight (org-unique-id :build t
                           :type git
                           :host github
                           :repo "Phundrak/org-unique-id")
  :defer t
  :after org
  :init (add-hook 'before-save-hook #'org-unique-id-maybe))
#+end_src

** Exporters
*** HTML
On HTML exports, Org-mode tries to include a validation link for the
exported HTML. Let’s disable that since I never use it.
#+NAME: org-html-validation
#+BEGIN_SRC emacs-lisp :tangle no
(setq org-html-validation-link nil)
#+END_SRC

This package allows for live-previewing the HTML export of an org
buffer in an XWidget Webkit browser window. But when testing it, it’s
not great for large org files, I should keep its usage for smaller org
files.
#+begin_src emacs-lisp
(use-package preview-org-html-mode
  :defer t
  :after (org)
  :straight (preview-org-html-mode :build t
                                   :type git
                                   :host github
                                   :repo "jakebox/preview-org-html-mode")
  :general
  (phundrak/major-leader-key
   :keymaps 'org-mode-map
   :packages 'preview-org-html-mode
   :infix "P"
   ""  '(:ignore t :which-key "preview")
   "h" #'preview-org-html-mode
   "r" #'preview-org-html-refresh
   "p" #'preview-org-html-pop-window-to-frame)
  :config
  (setq preview-org-html-refresh-configuration 'save))
#+end_src

*** Hugo
#+begin_src emacs-lisp
(use-package ox-hugo
  :defer t
  :after ox
  :straight t)
#+end_src

*** COMMENT Gemini
Gemini is a lightweight protocol for creating lightweight websites
that are basically text-only websites with maybe some images. I’m
currently maintaining my own fork of Justin Abrahms’ =ox-gemini= which
fixes two issues I had with the original package.
#+begin_src emacs-lisp
;; (use-package ox-gemini
;;   :defer t
;;   :straight (ox-gemini :build t
;;                        :fork (:repo "https://labs.phundrak.com/phundrak/ox-gemini"))
;;   :after (ox org))
#+end_src

*** COMMENT Epub
A backend for exporting files through org I like is ~ox-epub~ which, as
you can guess, exports org files to the [[https://www.w3.org/publishing/epub32/][Epub format]].
#+begin_src emacs-lisp
(use-package ox-epub
  :after (org ox)
  :straight (:build t))
#+end_src

*** COMMENT LaTeX
When it comes to exports, I want the LaTeX and PDF exports to be done
with XeTeX only. I also want LaTeX exports to use my labels rather
than org-generated labels.
#+NAME: org-latex-compiler
#+BEGIN_SRC emacs-lisp :tangle no
(setq org-latex-compiler "xelatex"
      org-latex-prefer-user-labels t)
#+END_SRC

A new backend that was introduced in org-mode for LaTeX source block
coloring is ~engraved~.
#+BEGIN_SRC emacs-lisp
(use-package engrave-faces
  :straight (:build t))
#+END_SRC

#+name: org-latex-src-block-backend
#+begin_src emacs-lisp :tangle no
(require 'engrave-faces)
(setq org-latex-src-block-backend 'engraved)
#+end_src

The default packages break my LaTeX exports: for some reason, images
are not loaded and exported in PDFs, so I needed to redefine the
default packages excluding the one that broke my exports; namely, I
need to remove ~inputenc~, ~fontenc~ and ~grffile~. I also added some
default packages:
- ~cleveref~ for better references to various elements.
- ~svg~ for inserting SVG files in PDF outputs
- ~booktabs~ for nicer tables
- and ~tabularx~ for tabulars with adjustable columns
#+NAME: org-latex-default-packages
#+BEGIN_SRC emacs-lisp :tangle no
(dolist (package '(("AUTO" "inputenc" t ("pdflatex"))
                   ("T1"   "fontenc"  t ("pdflatex"))
                   (""     "grffile"  t)))
  (delete package org-latex-default-packages-alist))

(dolist (package '(("AUTO" "babel" nil ("pdflatex"))
                   ("AUTO" "polyglossia" nil ("xelatex" "lualatex"))
                   ("capitalize" "cleveref")
                   (""           "booktabs")
                   (""           "tabularx")))
  (add-to-list 'org-latex-default-packages-alist package t))

(setq org-latex-reference-command "\\cref{%s}")
#+END_SRC

By the way, reference links in LaTeX should be written in this format,
since we are using ~cleveref~:
#+NAME: org-export-latex-hyperref-format
#+BEGIN_SRC emacs-lisp :tangle no
(setq org-export-latex-hyperref-format "\\ref{%s}")
#+END_SRC

[[https://tectonic-typesetting.github.io/en-US/][Tectonic]] is awesome for processing LaTeX documents! Look how simple it
is!
#+NAME: org-latex-pdf-process
#+BEGIN_SRC emacs-lisp :tangle no
(setq org-latex-pdf-process
      '("tectonic -Z shell-escape --synctex --outdir=%o %f"))
#+END_SRC

Finally, org-mode is supposed to automatically clean logfiles after it
exports an org file to LaTeX. However, it misses a few, so I need to
add their extension like so:
#+name: org-latex-logfiles-add-extensions
#+begin_src emacs-lisp :tangle no
(dolist (ext '("bbl" "lot"))
  (add-to-list 'org-latex-logfiles-extensions ext t))
#+end_src

*** COMMENT Reveal.js
#+NAME: org-re-reveal
#+begin_src emacs-lisp
(use-package org-re-reveal
  :defer t
  :after org
  :straight (:build t)
  :init
  (add-hook 'org-mode-hook (lambda () (require 'org-re-reveal)))
  :config
  (setq org-re-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js"
        org-re-reveal-revealjs-version "4"))
#+end_src

*** COMMENT SSH Config
Yet another exporter I enjoy is [[https://github.com/dantecatalfamo/ox-ssh][~ox-ssh~]] with which I manage my
~$HOME/.ssh/config~ file. You won’t find my org file for managing my
servers on my repos though.
#+begin_src emacs-lisp
(use-package ox-ssh
  :after (ox org)
  :straight (:build t))
#+end_src

** Visual Configuration
*** mixed-pitch
While most modes of Emacs are dedicated to development, and therefore
are much more comfortable with a fixed-pitch font, more literary modes
such as org-mode are much more enjoyable if you have a variable pitch
font enabled. *BUT*, these modes can also require some fixed-pitch fonts
for some elements of the buffer, such as code blocks with
org-mode. ~mixed-pitch~ comes to the rescue!
#+begin_src emacs-lisp
(use-package mixed-pitch
  :after org
  :straight (:build t)
  :hook
  ;; (org-mode           . mixed-pitch-mode)
  (emms-browser-mode  . mixed-pitch-mode)
  (emms-playlist-mode . mixed-pitch-mode)
  :config
  (add-hook 'org-agenda-mode-hook (lambda () (mixed-pitch-mode -1))))
#+end_src

*** org-appear
I have an issue with org-mode’s emphasis markers: I find them ugly. I
can of course hide them if I simply set ~org-hide-emphasis-markers~ to
~t~, but it makes editing hard since I never know whether I am before or
after the emphasis marker when editing near the beginning/end of an
emphasized region. ~org-appear~ fixes this issue so that it shows the
emphasis markers only when the cursor is in the emphasized region,
otherwise they will remain hidden! Very cool!
#+begin_src emacs-lisp
(use-package org-appear
  :after org
  :straight (:build t)
  :hook (org-mode . org-appear-mode)
  :config
  (setq org-appear-autoemphasis   t
        org-hide-emphasis-markers t
        org-appear-autolinks      t
        org-appear-autoentities   t
        org-appear-autosubmarkers t)
  (run-at-time nil nil #'org-appear--set-elements))
#+end_src
*** org-modern
Org-modern modernizes a bit the appearance of org buffers, including
tables, source blocks, and tags, and it applies settings similar to
~org-superstar~ which I used to use.
#+begin_src emacs-lisp
(use-package org-modern
  :straight (:build t)
  :after org
  :defer t
  :config
  (setq
   ;; Edit settings
   org-auto-align-tags t
   org-catch-invisible-edits 'show-and-error
   org-special-ctrl-a/e t
   org-insert-heading-respect-content t
   ;; Appearance
   org-modern-radio-target    '("❰" t "❱")
   org-modern-internal-target '("↪ " t "")
   org-modern-todo t
   org-modern-tag t
   org-modern-timestamp t
   org-modern-statistics nil
   org-modern-progress nil
   org-modern-priority t
   org-modern-horizontal-rule "──────────"
   org-modern-hide-stars "·"
   ;; org-modern-star ["⁖"]
   org-modern-block-name '("" . "")
   org-modern-keyword "‣"
   org-modern-list '((43 . "•")
                     (45 . "–")
                     (42 . "↪"))
   org-modern-todo-faces
   '(("[-]"  . +org-todo-active)
     ("NEXT" . +org-todo-active)
     ("STARTED" . +org-todo-active)
     ("WAITING" . +org-todo-onhold)
     ("CANCELED" . +org-archived)
     ("PROJ" . +org-todo-project)
     ("DONE"   . +org-todo-cancel)))
  ;; (global-org-modern-mode)
  )

(add-hook 'org-mode-hook #'org-modern-mode)
(add-hook 'org-agenda-finalize #'org-modern-agenda)
#+end_src
*** COMMENT org-modern-indent
#+begin_src emacs-lisp
(use-package org-modern-indent
  :after (org)
  :straight (org-modern-indent :type git :host github :repo "jdtsmith/org-modern-indent")
  :config
  (add-hook 'org-indent-mode-hook #'org-modern-indent-mode 90))
#+end_src
*** org-outline-tree
/Org Outline Tree/ is a better way of managing my org files’ outline.
#+begin_src emacs-lisp
(use-package org-ol-tree
  :after (org avy)
  :defer t
  :straight (org-ol-tree :build t
                         :host github
                         :type git
                         :repo "Townk/org-ol-tree")
  :general
  (phundrak/major-leader-key
    :packages 'org-ol-tree
    :keymaps 'org-mode-map
    "O" #'org-ol-tree))
#+end_src

*** prettify symbols
#+name: org-mode-visual-prettify-symbols
#+begin_src emacs-lisp
(add-hook 'org-mode-hook
          (lambda ()
            (dolist (pair '(("[ ]"         . ?☐)
                            ("[X]"         . ?☑)
                            ("[-]"         . ?❍)
                            ("#+title:"    . ?📕)
                            ("#+TITLE:"    . ?📕)
                            ("#+author:"   . ?✎)
                            ("#+AUTHOR:"   . ?✎)
                            ("#+email:"    . ?📧)
                            ("#+EMAIL:"    . ?📧)
                            ("#+include"   . ?⭳)
                            ("#+INCLUDE"   . ?⭳)
                            ("#+begin_src" . ?λ)
                            ("#+BEGIN_SRC" . ?λ)
                            ("#+end_src"   . ?λ)
                            ("#+END_SRC"   . ?λ)))
              (add-to-list 'prettify-symbols-alist pair))
            (prettify-symbols-mode)))
#+end_src
*** COMMENT svg-tag-mode
I also use ~svg-tag-mode~ for styling tags (from https://hieuphay.com/doom-emacs-config/):

#+begin_src emacs-lisp
(use-package svg-tag-mode
  :straight t
  :config
  (defconst date-re "[0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\}")
  (defconst time-re "[0-9]\\{2\\}:[0-9]\\{2\\}")
  (defconst day-re "[A-Za-z]\\{3\\}")
  (defconst day-time-re (format "\\(%s\\)? ?\\(%s\\)?" day-re time-re))

  (defun svg-progress-percent (value)
    (svg-image (svg-lib-concat
                (svg-lib-progress-bar
                 (/ (string-to-number value) 100.0) nil
                 :height 0.8 :foreground (doom-color 'fg) :background (doom-color 'bg)
                 :margin 0 :stroke 2 :radius 3 :padding 2 :width 11)
                (svg-lib-tag (concat value "%") nil
                             :height 0.8 :foreground (doom-color 'fg) :background (doom-color 'bg)
                             :stroke 0 :margin 0)) :ascent 'center))

  (defun svg-progress-count (value)
    (let* ((seq (mapcar #'string-to-number (split-string value "/")))
           (count (float (car seq)))
           (total (float (cadr seq))))
      (svg-image (svg-lib-concat
                  (svg-lib-progress-bar (/ count total) nil
                                        :foreground (doom-color 'fg)
                                        :background (doom-color 'bg) :height 0.8
                                        :margin 0 :stroke 2 :radius 3 :padding 2 :width 11)
                  (svg-lib-tag value nil
                               :foreground (doom-color 'fg)
                               :background (doom-color 'bg)
                               :stroke 0 :margin 0 :height 0.8)) :ascent 'center)))

  (set-face-attribute 'svg-tag-default-face nil :family "Source Code Pro")
  (setq svg-tag-tags
        `(;; Progress e.g. [63%] or [10/15]
          ("\\(\\[[0-9]\\{1,3\\}%\\]\\)" . ((lambda (tag)
                                              (svg-progress-percent (substring tag 1 -2)))))
          ("\\(\\[[0-9]+/[0-9]+\\]\\)" . ((lambda (tag)
                                            (svg-progress-count (substring tag 1 -1)))))
          ;; Task priority e.g. [#A], [#B], or [#C]
          ("\\[#A\\]" . ((lambda (tag) (svg-tag-make tag :face 'error :inverse t :height .85
                                                     :beg 2 :end -1 :margin 0 :radius 10))))
          ("\\[#B\\]" . ((lambda (tag) (svg-tag-make tag :face 'warning :inverse t :height .85
                                                     :beg 2 :end -1 :margin 0 :radius 10))))
          ("\\[#C\\]" . ((lambda (tag) (svg-tag-make tag :face 'org-todo :inverse t :height .85
                                                     :beg 2 :end -1 :margin 0 :radius 10))))
          ;; Keywords
          ("TODO" . ((lambda (tag) (svg-tag-make tag :inverse t :height .95 :face 'org-todo))))
          ("WAITING" . ((lambda (tag) (svg-tag-make tag :height .95 :face 'org-warning))))
          ("DONE" . ((lambda (tag) (svg-tag-make tag :inverse t :height .95 :face 'org-done))))
          ("CANCELED" . ((lambda (tag) (svg-tag-make tag :inverse t :height .95 :face 'org-archived))))
          ("NEXT\\|STARTED" . ((lambda (tag) (svg-tag-make tag :inverse t :height .95 :face '+org-todo-active))))
          ("PROJ\\|IDEA\\|MEETING" .
           ((lambda (tag) (svg-tag-make tag :inverse t :height .95 :face '+org-todo-project))))
          ("REVIEW" . ((lambda (tag) (svg-tag-make tag :inverse t :height .95 :face '+org-todo-onhold))))))


  :hook (org-mode . svg-tag-mode))


;; Also show svg tags in org-agenda
(defun org-agenda-show-svg ()
  (let* ((case-fold-search nil)
         (keywords (mapcar #'svg-tag--build-keywords svg-tag--active-tags))
         (keyword (car keywords)))
    (while keyword
      (save-excursion
        (while (re-search-forward (nth 0 keyword) nil t)
          (overlay-put (make-overlay
                        (match-beginning 0) (match-end 0))
                       'display  (nth 3 (eval (nth 2 keyword))))))
      (pop keywords)
      (setq keyword (car keywords)))))
(add-hook 'org-agenda-finalize-hook #'org-agenda-show-svg)
#+end_src

** Misc
*** org-download

Insert images easily into ORG mode files

#+begin_src emacs-lisp
(use-package org-download
  :straight t
  :after org
  :hook (org-mode . org-download-enable))

;; Drag-and-drop to `dired`
(add-hook 'dired-mode-hook 'org-download-enable)
#+end_src
*** org-web-tools
#+begin_src emacs-lisp
(use-package org-web-tools
  :straight t
  :demand t)
#+end_src

*** COMMENT org-tree-slide
~org-tree-slide~ is a presentation tool for org-mode.
#+begin_src emacs-lisp
;; (use-package org-tree-slide
;;   :defer t
;;   :after org
;;   :straight (:build t)
;;   :config
;;   (setq org-tree-slide-skip-done nil)
;;   :general
;;   (phundrak/evil
;;     :keymaps 'org-mode-map
;;     :packages 'org-tree-slide
;;     "<f8>" #'org-tree-slide-mode)
;;   (phundrak/major-leader-key
;;     :keymaps 'org-tree-slide-mode-map
;;     :packages 'org-tree-slide
;;     "d" (lambda () (interactive (setq org-tree-slide-skip-done (not org-tree-slide-skip-done))))
;;     "p" #'org-tree-slide-move-next-tree
;;     "n" #'org-tree-slide-move-previous-tree
;;     "t" #'org-tree-slide-move-next-tree
;;     "s" #'org-tree-slide-move-previous-tree
;;     "u" #'org-tree-slide-content))
#+end_src

** Keybindings
:PROPERTIES:
:ID:       fbdd75ee-506e-4287-895a-1c18bc585b2d
:END:
Be prepared, I have a lot of keybindings for org-mode! They are all
prefixed with a comma ~,~ in normal mode.
#+name: org-keybinds-various
| Key chord | Function                          | Description |
|-----------+-----------------------------------+-------------|
| RET       | org-ctrl-c-ret                    |             |
| *         | org-ctrl-c-star                   |             |
| ,         | org-ctrl-c-ctrl-c                 |             |
| '         | org-edit-special                  |             |
| -         | org-ctrl-c-minus                  |             |
| a         | org-agenda                        |             |
| c         | nil                               | ORG clock   |
| ci        | org-clock-in                      |             |
| co        | org-clock-out                     |             |
| cr        | org-clock-report                  |             |
| cn        | org-clock-goto                    |             |
| cm        | dorneanu/org-clock-enter-manually |             |
| C         | org-columns                       |             |
| e         | org-export-dispatch               |             |
| l         | org-store-link                    |             |
| p         | org-priority                      |             |
| r         | org-reload                        |             |
| s         | org-sort                          |             |

*** babel
I then have a couple of babel-related functions.
#+name: org-keybinds-babel
| Key chord | Function                            | Description |
|-----------+-------------------------------------+-------------|
| b         | nil                                 | babel       |
| b         | org-babel-transient/body            |             |
| bb        | org-babel-execute-buffer            |             |
| bc        | org-babel-check-src-block           |             |
| bC        | org-babel-tangle-clean              |             |
| be        | org-babel-execute-maybe             |             |
| bf        | org-babel-tangle-file               |             |
| bn        | org-babel-next-src-block            |             |
| bo        | org-babel-open-src-block-result     |             |
| bp        | org-babel-previous-src-block        |             |
| br        | org-babel-remove-result-one-or-many |             |
| bR        | org-babel-goto-named-result         |             |
| bt        | org-babel-tangle                    |             |
| bi        | org-babel-view-src-block-info       |             |

*** dates
We next have keybindings related to org-mode’s agenda capabilities. We
can schedule a todo header for some dates, or set a deadline.
#+name: org-keybinds-dates
| Key chord | Function                | Description |
|-----------+-------------------------+-------------|
| d         | nil                     | dates       |
| dd        | org-deadline            |             |
| ds        | org-schedule            |             |
| dt        | org-time-stamp          |             |
| dT        | org-time-stamp-inactive |             |

*** inserts
Let’s now define some keybinds for inserting stuff in our org buffer:
#+name: org-keybinds-insert
| Key chord | Function                                | Description |
|-----------+-----------------------------------------+-------------|
| i         | nil                                     | insert      |
| ib        | org-insert-structure-template           |             |
| id        | org-insert-drawer                       |             |
| ie        | nil                                     | emphasis    |
| ieb       | org-emphasize-bold                      |             |
| iec       | org-emphasize-code                      |             |
| iei       | org-emphasize-italic                    |             |
| ies       | org-emphasize-strike-through            |             |
| ieu       | org-emphasize-underline                 |             |
| iev       | org-emphasize-verbatim                  |             |
| idc       | org-download-clipboard                  |             |
| iE        | org-set-effort                          |             |
| if        | org-footnote-new                        |             |
| ih        | org-insert-heading                      |             |
| iH        | counsel-org-link                        |             |
| ii        | org-insert-item                         |             |
| il        | org-insert-link                         |             |
| iL        | dorneanu/org-insert-link-from-clipboard |             |
| in        | org-add-note                            |             |
| ip        | org-set-property                        |             |
| is        | org-insert-subheading                   |             |
| iq        | counsel-org-tag                         |             |

*** jumps
There isn’t a lot of stuff I can jump to yet, but there’s still some:
#+name: org-keybinds-jump
| Key chord | Function             | Description |
|-----------+----------------------+-------------|
| j         | nil                  | jump        |
| ja        | counsel-org-goto-all |             |
| jh        | counsel-org-goto     |             |

*** tables
Tables get a bit more love:
#+name: org-keybinds-tables
| Key chord | Function                             | Description |
|-----------+--------------------------------------+-------------|
| t         | nil                                  | tables      |
| t.        | org-todo                             |             |
| tc        | org-table-move-column-left           |             |
| tt        | org-table-move-row-down              |             |
| ts        | org-table-move-row-up                |             |
| tr        | org-table-move-column-right          |             |
| ta        | org-table-align                      |             |
| te        | org-table-eval-formula               |             |
| tf        | org-table-field-info                 |             |
| tF        | org-table-edit-formulas              |             |
| th        | org-table-convert                    |             |
| tl        | org-table-recalculate                |             |
| tp        | org-plot/gnuplot                     |             |
| tS        | org-table-sort-lines                 |             |
| tw        | org-table-wrap-region                |             |
| tx        | org-table-shrink                     |             |
| tN        | org-table-create-with-table.el       |             |
| td        | nil                                  | delete      |
| tdc       | org-table-delete-column              |             |
| tdr       | org-table-kill-row                   |             |
| ti        | nil                                  | insert      |
| tic       | org-table-insert-column              |             |
| tih       | org-table-insert-hline               |             |
| tir       | org-table-insert-row                 |             |
| tiH       | org-table-hline-and-move             |             |
| tt        | nil                                  | toggle      |
| ttf       | org-table-toggle-formula-debugger    |             |
| tto       | org-table-toggle-coordinate-overlays |             |

Finally, let’s make enabling and disabling stuff accessible:
*** refiling
#+name: org-keybinds-refiling
| Key chord | Function                     | Description |
|-----------+------------------------------+-------------|
| r         | nil                          | toggle      |
| rr        | org-refile                   |             |
| ra        | dorneanu/org-refile-anywhere |             |
| rf        | +org/refile-to-current-file  |             |
| rl        | +org/refile-to-last-location |             |
| rv        | +org/refile-to-visible       |             |

*** toggles
#+name: org-keybinds-toggles
| Key chord | Function                             | Description |
|-----------+--------------------------------------+-------------|
| T         | nil                                  | toggle      |
| Tc        | org-toggle-checkbox                  |             |
| Ti        | org-toggle-inline-images             |             |
| Tl        | org-latex-preview                    |             |
| Tn        | org-num-mode                         |             |
| Ts        | phundrak/toggle-org-src-window-split |             |
| Tt        | org-show-todo-tree                   |             |
| TT        | org-todo                             |             |
** Disabled
*** COMMENT LaTeX formats
:PROPERTIES:
:header-args:emacs-lisp: :tangle no :exports code :results silent
:END:
I currently have two custom formats for my Org-mode exports: one for
general use (initially for my conlanging files, hence its ~conlang~
name), and one for beamer exports.

Below is the declaration of the ~conlang~ LaTeX class:
#+NAME: org-latex-class-conlang
#+BEGIN_SRC emacs-lisp
'("conlang"
  "\\documentclass{book}"
  ("\\chapter{%s}" . "\\chapter*{%s}")
  ("\\section{%s}" . "\\section*{%s}")
  ("\\subsection{%s}" . "\\subsection*{%s}")
  ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))
#+END_SRC

And here is the declaration of the ~beamer~ class:
#+NAME: org-latex-class-beamer
#+BEGIN_SRC emacs-lisp
`("beamer"
  ,(concat "\\documentclass[presentation]{beamer}\n"
           "[DEFAULT-PACKAGES]"
           "[PACKAGES]"
           "[EXTRA]\n")
  ("\\section{%s}" . "\\section*{%s}")
  ("\\subsection{%s}" . "\\subsection*{%s}")
  ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))
#+END_SRC

Both these classes have to be added to ~org-latex-classes~ like so:
#+NAME: org-latex-classes
#+BEGIN_SRC emacs-lisp :noweb yes
(eval-after-load "ox-latex"
  '(progn
     (add-to-list 'org-latex-classes
                  <<org-latex-class-conlang>>)
     (add-to-list 'org-latex-classes
                  <<org-latex-class-beamer>>)))
#+END_SRC

*** COMMENT Projects
:PROPERTIES:
:header-args:emacs-lisp: :tangle no :exports code :results silent
:END:
Another great features of Org-mode is the Org projects that allow the user to
easily publish a bunch of org files to a remote location. Here is the current
declaration of my projects, which will be detailed later:
#+NAME: org-publish-projects
#+BEGIN_SRC emacs-lisp :noweb yes :noweb-prefix no
<<org-proj-config-setup>>
(setq org-publish-project-alist
      `(<<org-proj-config-html>>
        <<org-proj-config-static>>
        <<org-proj-config>>))
#+END_SRC

**** Configuration website
This is my configuration for exporting my dotfiles to my website in a web format
only. No PDFs or anything, just HTML. Please note that I do not use that often
anymore, I much prefer the automatic script that I have which deploys through my
Drone instance my website on git pushes.

And before we get into the actual configuration, I would like to introduce a
couple of variables. This is a bit more verbose than if I declared everything
manually, but now I can change all three values at the same time without a
hasle.
#+NAME: org-proj-config-setup
#+BEGIN_SRC emacs-lisp
(defvar phundrak//projects-config-target
  "/ssh:Tilo:~/www/phundrak.com/config"
  "Points to where exported files for config.phundrak.com should be put.")
(defvar phundrak//projects-config-source
  "~/org/config/"
  "Points to where the sources for config.phundrak.com are.")
(defvar phundrak//projects-config-language
  "en"
  "Language of the website config.phundrak.com.")
(defvar phundrak//projects-config-recursive
  t
  "Defines whether subdirectories should be parsed for config.phundrak.com.")
#+END_SRC

Now, here is my configuration. In this snippet, my org files located in my
source directory get exported in the HTML format and published to my target
directory on my remote server through RSYNC via TRAMP. A sitemap is
automatically generated, which comes in handy with the online sitemap that is
available through the navigation bar.
#+NAME: org-proj-config-html
#+BEGIN_SRC emacs-lisp
("config-website-html"
 :base-directory ,phundrak//projects-config-source
 :base-extension "org"
 :publishing-directory ,phundrak//projects-config-target
 :recursive ,phundrak//projects-config-recursive
 :language ,phundrak//projects-config-language
 :publishing-function org-html-publish-to-html
 :headline-levels 5
 :auto-sitemap t
 :auto-preamble t)
#+END_SRC

We also have the component for all the static files needed to run the website
(mostly images tbh).
#+NAME: org-proj-config-static
#+BEGIN_SRC emacs-lisp
("config-website-static"
 :base-directory ,phundrak//projects-config-source
 :base-extension "png\\|jpg\\|gif\\|webp\\|svg\\|jpeg\\|ttf\\|woff\\|txt\\|epub\\|md"
 :publishing-directory ,phundrak//projects-config-target
 :recursive ,phundrak//projects-config-recursive
 :language ,phundrak//projects-config-language
 :publishing-function org-publish-attachment)
#+END_SRC

The project is then defined like so:
#+NAME: org-proj-config
#+BEGIN_SRC emacs-lisp
("config-website"
 :components ("config-website-org"
              "config-website-static"))
#+END_SRC

*** COMMENT Org-ref and Bibtex configuration
#+begin_src emacs-lisp
(use-package reftex
  :commands turn-on-reftex
  :init (setq reftex-default-bibliography "~/org/bibliography/references.bib"
              reftex-plug-into-AUCTeX     t))
#+end_src

#+begin_src emacs-lisp
(use-package org-ref
  ;; :after (org ox-bibtex pdf-tools)
  :after org
  :defer t
  :straight (:build t)
  :custom-face
  (org-ref-cite-face ((t (:weight bold))))
  :init
  (setq org-ref-completion-library    'org-ref-ivy-cite
        org-latex-logfiles-extensions '("lof" "lot" "aux" "idx" "out" "log" "fbd_latexmk"
                                        "toc" "nav" "snm" "vrb" "dvi" "blg" "brf" "bflsb"
                                        "entoc" "ps" "spl" "bbl" "pygtex" "pygstyle"))
  (add-hook 'org-mode-hook (lambda () (require 'org-ref)))
  :config
  (setq bibtex-completion-pdf-field    "file"
        bibtex-completion-notes-path   "~/org/bibliography/notes/"
        bibtex-completion-bibliography "~/org/bibliography/references.bib"
        bibtex-completion-library-path "~/org/bibliography/bibtex-pdfs/"
        bibtex-completion-pdf-symbol   "⌘"
        bibtex-completion-notes-symbol "✎")
  :general
  (phundrak/evil
   :keymaps 'bibtex-mode-map
   :packages 'org-ref
   "C-t" #'org-ref-bibtex-next-entry
   "C-s" #'org-ref-bibtex-previous-entry
   "gt"  #'org-ref-bibtex-next-entry
   "gs"  #'org-ref-bibtex-previous-entry)
  (phundrak/major-leader-key
   :keymaps '(bibtex-mode-map)
   :packages 'org-ref
   ;; Navigation
   "t" #'org-ref-bibtex-next-entry
   "s" #'org-ref-bibtex-previous-entry

   ;; Open
   "b" #'org-ref-open-in-browser
   "n" #'org-ref-open-bibtex-notes
   "p" #'org-ref-open-bibtex-pdf

   ;; Misc
   "h" #'org-ref-bibtex-hydra/body
   "i" #'org-ref-bibtex-hydra/org-ref-bibtex-new-entry/body-and-exit
   "s" #'org-ref-sort-bibtex-entry

   "l" '(:ignore t :which-key "lookup")
   "la" #'arxiv-add-bibtex-entry
   "lA" #'arxiv-get-pdf-add-bibtex-entry
   "ld" #'doi-utils-add-bibtex-entry-from-doi
   "li" #'isbn-to-bibtex
   "lp" #'pubmed-insert-bibtex-from-pmid)
  (phundrak/major-leader-key
   :keymaps 'org-mode-map
   :pakages 'org-ref
   "ic" #'org-ref-insert-link
   "iL" #'org-ref-insert-ref-link
   "ir" #'org-ref-insert-link-hydra/body
   "iB" #'org-ref-bibtex-hydra/body))
#+end_src

#+begin_src emacs-lisp
(use-package ivy-bibtex
  :defer t
  :straight (:build t)
  :config
  (setq bibtex-completion-pdf-open-function #'find-file)
  :general
  (phundrak/leader-key
    :keymaps '(bibtex-mode-map)
    :packages 'ivy-bibtex
    "m" #'ivy-bibtex))
#+end_src

*** COMMENT Org-present
~org-present~ allows its user to create presentations through ~org-mode~,
which is really nice! However, most of my configuration will be stolen
[[https://config.daviwil.com/emacs#org-present][from Daviwil’s]] with minor changes.
#+begin_src emacs-lisp
 ;; (defun my/org-present-prepare-slide ()
 ;;   (org-overview)
 ;;   (org-show-entry)
 ;;  (org-show-children)
 ;;   (org-present-hide-cursor))

 ;; (defun my/org-present-init ()
 ;;   (setq header-line-format " ")
 ;;   (org-display-inline-images)
 ;;   (my/org-present-prepare-slide))

 ;; (defun my/org-present-quit ()
 ;;   (setq header-line-format nil)
 ;;   (org-present-small)
 ;;   (org-present-show-cursor))

 ;; (defun my/org-present-prev ()
 ;;   (interactive)
 ;;   (org-present-prev)
 ;;   (my/org-present-prepare-slide))

 ;; (defun my/org-present-next ()
 ;;   (interactive)
 ;;   (org-present-next)
 ;;   (my/org-present-prepare-slide))

 ;; (use-package org-present
 ;;   :after org
 ;;   :defer t
 ;;   :straight (:build t)
 ;;   :general
 ;;   (phundrak/major-leader-key
 ;;     :packages 'org-present
 ;;     :keymaps 'org-mode-map
 ;;     "P" #'org-present)
 ;;   (phundrak/evil
 ;;     :states 'normal
 ;;     :packages 'org-present
 ;;     :keymaps 'org-present-mode-keymap
 ;;     "+" #'org-present-big
 ;;     "-" #'org-present-small
 ;;     "<" #'org-present-beginning
 ;;     ">" #'org-present-end
 ;;     "«" #'org-present-beginning
 ;;     "»" #'org-present-end
 ;;     "c" #'org-present-hide-cursor
 ;;     "C" #'org-present-show-cursor
 ;;     "n" #'org-present-next
 ;;     "p" #'org-present-prev
 ;;     "r" #'org-present-read-only
 ;;     "w" #'org-present-read-write
 ;;     "q" #'org-present-quit)
 ;;   :hook ((org-present-mode      . my/org-present-init)
 ;;          (org-present-mode-quit . my/org-present-quit)))
 ;; (use-package hide-mode-line
 ;;   :straight t
 ;;   :after (org-present))

 ;; (defun my/present-next-with-latex ()
 ;;   (interactive)
 ;;   (org-present-next)
 ;;   (org-latex-preview '(16)))

 ;; (defun my/present-prev-with-latex ()
 ;;   (interactive)
 ;;   (org-present-prev)
 ;;   (org-latex-preview '(16)))

 ;; (use-package org-present
 ;;   :straight t
 ;;   :commands (org-present)
 ;;   :config
 ;;   (general-define-key
 ;;    :keymaps 'org-present-mode-keymap
 ;;    "<next>" 'my/present-next-with-latex
 ;;    "<prior>" 'my/present-prev-with-latex)
 ;;   (setq org-present-mode-hook
 ;;         (list (lambda ()
 ;;                 (blink-cursor-mode 0)
 ;;                 (org-present-big)
 ;;                 (org-bars-mode -1)
 ;;                 ;; (org-display-inline-images)
 ;;                 (org-present-hide-cursor)
 ;;                 (org-present-read-only)
 ;;                 (display-line-numbers-mode 0)
 ;;                 (hide-mode-line-mode +1)
 ;;                 ;; (org-latex-preview '(16))
 ;;                 ;; TODO ^somehow this stucks at running LaTeX^
 ;;                 (setq-local olivetti-body-width 60)
 ;;                 (olivetti-mode 1))))
 ;;   (setq org-present-mode-quit-hook
 ;;         (list (lambda ()
 ;;                 (blink-cursor-mode 1)
 ;;                 (org-present-small)
 ;;                 (org-bars-mode 1)
 ;;                 ;; (org-remove-inline-images)
 ;;                 (org-present-show-cursor)
 ;;                 (org-present-read-write)
 ;;                 (display-line-numbers-mode 1)
 ;;                 (hide-mode-line-mode 0)
 ;;                 (org-latex-preview '(64))
 ;;                 (olivetti-mode -1)
 ;;                 (setq-local olivetti-body-width (default-value 'olivetti-body-width))))))
 #+end_src

#+end_src
