#+title: Emacs — Packages — Making My Life Easier
#+setupfile: ../../headers
#+property: header-args:emacs-lisp  :mkdirp yes :lexical t :exports code
#+property: header-args:emacs-lisp+ :tangle ~/.config/emacs/lisp/helpful.el
#+property: header-args:emacs-lisp+ :mkdirp yes :noweb no-export

* Making my life easier
** Bufler
A replacement for ~ibuffer~
#+begin_src emacs-lisp
(use-package bufler
  :straight (bufler :build t
                    :files (:defaults (:exclude "helm-bufler.el")))
  :defer t
  :general
  (phundrak/evil
   :keymaps  'bufler-list-mode-map
   :packages 'bufler
   "?"   #'hydra:bufler/body
   "g"   #'bufler
   "f"   #'bufler-list-group-frame
   "F"   #'bufler-list-group-make-frame
   "N"   #'bufler-list-buffer-name-workspace
   "k"   #'bufler-list-buffer-kill
   "p"   #'bufler-list-buffer-peek
   "s"   #'bufler-list-buffer-save
   "RET" #'bufler-list-buffer-switch))
#+end_src

** dict.cc
#+begin_src emacs-lisp
(use-package dictcc
  :straight t
  :defer t)
#+end_src
** discover-my-major
#+begin_src emacs-lisp
(use-package discover-my-major
  :bind ("C-h C-m" . discover-my-major))
#+end_src
** google-translate
#+begin_src emacs-lisp
;; With fix from https://github.com/atykhonov/google-translate/issues/52#issuecomment-727920888
(use-package google-translate
  :straight t
  :defer t
  :custom
  (google-translate-backend-method 'curl)
  :config
  (setq google-translate-translation-directions-alist
        '(("en" . "de") ("en" . "ro") ("de" . "en") ("de" . "ro")))
  (setq google-translate-pop-up-buffer-set-focus t)
  ;; (setq google-translate-default-source-language "en")
  ;; (setq google-translate-default-target-language "de")
  (defun google-translate--search-tkk () "Search TKK." (list 430675 2721866130)))

;; TODO add keybindings
#+end_src
** Helpful
As the name tells, ~helpful~ is a really helpful package which greatly
enhances a couple of built-in functions from Emacs, namely:
| Vanilla Emacs Function | Helpful Function | Comment                                       |
|------------------------+------------------+-----------------------------------------------|
| ~describe-function~      | ~helpful-callable~ | Only interactive functions                    |
| ~describe-function~      | ~helpful-function~ | Only actual functions (including interactive) |
| ~describe-function~      | ~helpful-macro~    |                                               |
| ~describe-command~       | ~helpful-command~  |                                               |
| ~describe-key~           | ~helpful-key~      |                                               |
| ~describe-variable~      | ~helpful-variable~ |                                               |

#+begin_src emacs-lisp
(use-package helpful
  :straight (:build t)
  :after (consult)
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command]  . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key]      . helpful-key))
#+end_src

** Info
Let’s define some more intuitive keybinds for ~info-mode~.
#+begin_src emacs-lisp
(use-package info
  :defer t
  :straight (info :type built-in :build t)
  :general
  (phundrak/evil
    :keymaps 'Info-mode-map
    "c" #'Info-prev
    "t" #'evil-scroll-down
    "s" #'evil-scroll-up
    "r" #'Info-next)
  (phundrak/major-leader-key
    :keymaps 'Info-mode-map
    "?" #'Info-toc
    "b" #'Info-history-back
    "f" #'Info-history-forward
    "m" #'Info-menu
    "t" #'Info-top-node
    "u" #'Info-up))
#+end_src
** leo

#+begin_src emacs-lisp
(use-package leo
  :straight t
  :defer t)
#+end_src

** wordreference
#+begin_src emacs-lisp
(use-package wordreference
  :straight t
  :defer t
  :bind (:map wordreference-mode-map
              ("S" . wordreference-switch-source-target-and-search))
  :config
  (setq
   wordreference-source-lang "en"
   wordreference-target-lang "de"))

(add-hook 'wordreference-mode-hook #'turn-off-evil-mode)
#+end_src
** which-key
Which key is, I think, one of my favorite quality of life package.
When you begin a keybind, Emacs will show you all keybinds you can
follow the first one with in order to form a full keychord. Very
useful when you have a lot of keybinds and don’t remember exactly what
is what.
#+begin_src emacs-lisp
(use-package which-key
  :straight (:build t)
  :defer t
  :init (which-key-mode)
  :diminish which-key-mode
  :custom
  (which-key-show-early-on-C-h t)
  (which-key-idle-delay (float 10000))
  (which-key-show-transient-maps t)
  (which-key-idle-secondary-delay (float 0.05)))
#+end_src
