#+title: Minimal Emacs — Config
#+property: header-args:emacs-lisp  :mkdirp yes :lexical t :exports code
#+property: header-args:emacs-lisp+ :mkdirp yes :noweb no-export
#+property: header-args:emacs-lisp+ :results none
#+startup: indent overview

Configuration based on https://github.com/jamescherti/minimal-emacs.d.

* Basics
** pre-early-init
:properties:
:header-args:emacs-lisp: :tangle ~/.config/minimal-emacs/pre-early-init.el
:end:
#+begin_src emacs-lisp
  ;;; pre-earlly-init.el --- Pre Early Init -*- no-byte-compile: t; lexical-binding: t; -*-

  ;; Activate debugging
  (setq minimal-emacs-debug t)
#+end_src

** pre-init
:properties:
:header-args:emacs-lisp: :tangle ~/.config/minimal-emacs/pre-init.el
:end:
*** straight.el
#+begin_src emacs-lisp
  ;;; pre-init.el --- Pre Init -*- no-byte-compile: t; lexical-binding: t; -*-

  ;; straight.el options
  (setq straight-repository-branch "develop"        ; Use develop branch of straight.el
        straight-use-package-by-default t          ; Make `straight-use-package' the default
        straight-check-for-modifications '(check-on-save find-when-checking) ; Check for modified files
        ;; straight-vc-git-default-clone-depth 1      ; Shallow clone to save space
        straight-enable-use-package-integration t   ; Enable use-package integration
        straight-cache-autoloads t                 ; Cache autoloads to improve startup time
        )

  ;; Bootstrapping straight.el
  ;; See: github.com/radian-software/straight.el#bootstrapping-straightel
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name
          "straight/repos/straight.el/bootstrap.el"
          (or (bound-and-true-p straight-base-dir)
              user-emacs-directory)))
        (bootstrap-version 7))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  ;; Configure `use-package'
  (straight-use-package 'use-package)

  ;; Enable verbose logging for debugging
  (setq use-package-verbose t
        use-package-compute-statistics t  ; Generate loading statistics
        debug-on-error t)                 ; Show the debugger on errors

  ;; Fixes eglot problem ("Feature provided by other file: ...")
  (straight-use-package '(project :type built-in))
  (straight-use-package '(xref :type built-in))
#+end_src
** Extras
:properties:
:header-args:emacs-lisp: :tangle ~/.config/minimal-emacs/pre-init.el
:end:
#+begin_src emacs-lisp
;; From https://github.com/abougouffa/minemacs/blob/main/core/me-lib-extra.el
;;;###autoload
(defun +region-or-thing-at-point (&optional leave-region-marked)
  "Return the region or the thing at point.

  If LEAVE-REGION-MARKED is no-nil, don't call `desactivate-mark'
  when a region is selected."
  (when-let* ((thing (ignore-errors
                       (or (prog1 (thing-at-point 'region t)
                             (unless leave-region-marked (deactivate-mark)))
                           (cl-some (+apply-partially-right #'thing-at-point t)
                                    '(symbol email number string word))))))
    ;; If the matching thing has multi-lines, join them
    (string-join (string-lines thing))))
#+end_src
** customizations
#+begin_src emacs-lisp
;; Load the custom variables file if it exists
;; (when (file-exists-p custom-file) (+load custom-file))
#+end_src
** Vertico & Co.
:properties:
:header-args:emacs-lisp: :tangle ~/.config/minimal-emacs/post-init.el
:end:

#+begin_src emacs-lisp
;;; post-init.el --- Post Init -*- no-byte-compile: t; lexical-binding: t; -*-
;; Tip: You can remove the `vertico-mode' use-package and replace it
;;      with the built-in `fido-vertical-mode'.
(use-package vertico
  ;; (Note: It is recommended to also enable the savehist package.)
  :straight t
  :defer t
  :commands vertico-mode
  :hook ((after-init . vertico-mode)
         (vertico-mode . vertico-multiform-mode)))

(use-package vertico-posframe
  :straight t
  :demand t
  ;; :hook (vertico-mode . vertico-posframe-mode)
  :config
  (vertico-posframe-mode 1)
  (setq vertico-posframe-border-width 2
        vertico-posframe-parameters '((internal-border-width . 2))))
;; (add-hook 'vertico-posframe-mode-hook (set-face-background 'vertico-posframe-border (face-background 'fringe))))

(use-package orderless
  ;; Vertico leverages Orderless' flexible matching capabilities, allowing users
  ;; to input multiple patterns separated by spaces, which Orderless then
  ;; matches in any order against the candidates.
  :straight t
  :custom
  (completion-styles '(orderless basic))
  (completion-category-defaults nil)
  (completion-category-overrides '((file (styles partial-completion)))))

(use-package marginalia
  ;; Marginalia allows Embark to offer you preconfigured actions in more contexts.
  ;; In addition to that, Marginalia also enhances Vertico by adding rich
  ;; annotations to the completion candidates displayed in Vertico's interface.
  :straight t
  :defer t
  :commands (marginalia-mode marginalia-cycle)
  :hook (after-init . marginalia-mode))

(use-package embark
  ;; Embark is an Emacs package that acts like a context menu, allowing
  ;; users to perform context-sensitive actions on selected items
  ;; directly from the completion interface.
  :straight t
  :defer t
  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

  :init
  (setq prefix-help-command #'embark-prefix-help-command)

  :config
  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

(use-package embark-consult
  :straight t
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))

(use-package consult
  :straight t
  :bind (;; C-c bindings in `mode-specific-map'
         ("C-c M-x" . consult-mode-command)
         ("C-c h" . consult-history)
         ("C-c k" . consult-kmacro)
         ("C-c m" . consult-man)
         ("C-c i" . consult-info)
         ([remap Info-search] . consult-info)
         ([remap recentf-open-files] . consult-recent-file)
         ([remap recentf] . consult-recent-file)
         ;; C-x bindings in `ctl-x-map'
         ("C-x M-:" . consult-complex-command)
         ("C-x b" . consult-buffer)
         ("C-x 4 b" . consult-buffer-other-window)
         ("C-x 5 b" . consult-buffer-other-frame)
         ("C-x t b" . consult-buffer-other-tab)
         ("C-x r b" . consult-bookmark)
         ("C-x p b" . consult-project-buffer)
         ;; Custom M-# bindings for fast register access
         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store)
         ("C-M-#" . consult-register)
         ;; Other custom bindings
         ("M-y" . consult-yank-pop)
         ;; M-g bindings in `goto-map'
         ("M-g C" . consult-theme)
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flymake)
         ("M-g g" . consult-goto-line)
         ("M-g M-g" . consult-goto-line)
         ("M-g o" . consult-outline)
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ;; M-s bindings in `search-map'
         ("M-s d" . consult-find)
         ("M-s c" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s l" . consult-line)
         ("M-s L" . consult-line-multi)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)
         ;; Isearch integration
         ("M-s e" . consult-isearch-history)
         :map isearch-mode-map
         ("M-e" . consult-isearch-history)
         ("M-s e" . consult-isearch-history)
         ("M-s l" . consult-line)
         ("M-s L" . consult-line-multi)
         ;; Minibuffer history
         :map minibuffer-local-map
         ("M-s" . consult-history)
         ("M-r" . consult-history))

  ;; Enable automatic preview at point in the *Completions* buffer.
  :hook (completion-list-mode . consult-preview-at-point-mode)

  :init
  ;; Optionally configure the register formatting. This improves the register
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  :config
  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   ;; :preview-key "M-."
   :preview-key '(:debounce 0.4 any)
   :initial (+region-or-thing-at-point))
  (setq consult-narrow-key "<"))
#+end_src
** Defaults
#+begin_src emacs-lisp
  ;; Auto-revert in Emacs is a feature that automatically updates the
  ;; contents of a buffer to reflect changes made to the underlying file
  ;; on disk.
  (add-hook 'after-init-hook #'global-auto-revert-mode)

  ;; recentf is an Emacs package that maintains a list of recently
  ;; accessed files, making it easier to reopen files you have worked on
  ;; recently.
  (add-hook 'after-init-hook #'recentf-mode)

  ;; savehist is an Emacs feature that preserves the minibuffer history between
  ;; sessions. It saves the history of inputs in the minibuffer, such as commands,
  ;; search strings, and other prompts, to a file. This allows users to retain
  ;; their minibuffer history across Emacs restarts.
  (add-hook 'after-init-hook #'savehist-mode)

  ;; save-place-mode enables Emacs to remember the last location within a file
  ;; upon reopening. This feature is particularly beneficial for resuming work at
  ;; the precise point where you previously left off.
  ;; (add-hook 'after-init-hook #'save-place-mode)
#+end_src
*** counsel
#+begin_src emacs-lisp
(use-package counsel
  :straight t)
#+end_src
*** epa-file
Configure GPG assistant
#+begin_src emacs-lisp
  (use-package epa-file
    :straight (:type built-in)
    :config
    (setq
     epa-file-encrypt-to '("B97574F0096F8AFAA099E1FB2FE40B159E04B416")
     password-cache nil
     password-cache-expiry nil
     epa-pinentry-mode 'ask)
    :custom
    (epa-file-select-keys 'silent))
#+end_src
* Autocompletion
:properties:
:header-args:emacs-lisp: :tangle ~/.config/minimal-emacs/post-init.el
:end:
** cape
#+begin_src emacs-lisp
  (use-package cape
    :straight t
    :defer t
    :commands (cape-dabbrev cape-file cape-elisp-block)
    :bind ("C-c p" . cape-prefix-map)
    :init
    ;; Add to the global default value of `completion-at-point-functions' which is
    ;; used by `completion-at-point'.
    (add-hook 'completion-at-point-functions #'cape-dabbrev)
    (add-hook 'completion-at-point-functions #'cape-file)
    (add-hook 'completion-at-point-functions #'cape-elisp-block))
#+end_src
** corfu
#+begin_src emacs-lisp
  (use-package corfu
    :straight t
    :defer t
    :commands (corfu-mode global-corfu-mode)
    :hook ((prog-mode . corfu-mode)
           (shell-mode . corfu-mode)
           (eshell-mode . corfu-mode)
           (lsp-completion-mode . dorneanu/corfu-setup-lsp) ; Use corfu for lsp completion
           )
    :custom
    ;; Hide commands in M-x which do not apply to the current mode.
    (read-extended-command-predicate #'command-completion-default-include-p)
    ;; Disable Ispell completion function. As an alternative try `cape-dict'.
    (text-mode-ispell-word-completion nil)
    (tab-always-indent 'complete)
    ;; Only use `corfu' when calling `completion-at-point' or
    ;; `indent-for-tab-command'
    (corfu-auto t)
    (corfu-auto-prefix 2)
    (corfu-auto-delay 0.25)
    (corfu-preselect 'first)
    (corfu-quit-at-boundary nil)
    (corfu-separator ?\s)            ; Use space
    (corfu-quit-no-match 'separator) ; Don't quit if there is `corfu-separator' inserted
    (corfu-preview-current 'insert)        ; Preview first candidate. Insert on input if only one
    (corfu-preselect-first t)        ; Preselect first candidate?
    (lsp-completion-provider :none)       ; Use corfu instead for lsp completion
    (corfu-on-exact-match nil)
    (completion-cycle-threshold nil)      ; Always show completion candidates
    (corfu-insert-at-point t)
    :config

    ;; Modify completion behavior for better Eglot integration
    (defun my/corfu-complete-full ()
      "Insert complete candidate, including any additional text edits."
      (interactive)
      (let ((completion-extra-properties nil))
        (corfu-insert)))

    ;; Setup lsp to use corfu for lsp completion
    (defun dorneanu/corfu-setup-lsp ()
      "Use orderless completion style with lsp-capf instead of the default lsp-passthrough."
      (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
            '(orderless)))

    ;; Free the RET key for less intrusive behavior.
    ;; Option 1: Unbind RET completely
    ;; (keymap-unset corfu-map "RET")
    ;; Option 2: Use RET only in shell modes
    (keymap-set corfu-map "RET" `( menu-item "" nil :filter
                                   ,(lambda (&optional _)
                                      (and (derived-mode-p 'eshell-mode 'comint-mode)
                                           #'corfu-send))))
    ;; Bind TAB to the new completion function
    (define-key corfu-map [tab] #'my/corfu-complete-full)
    (define-key corfu-map (kbd "TAB") #'my/corfu-complete-full)

    ;; Enable Corfu
    (global-corfu-mode))

  ;; Candidate information popup
  (use-package corfu-popupinfo
    :straight (:type built-in)
    :hook (corfu-mode . corfu-popupinfo-mode)
    :bind ( ; Bind these to toggle/scroll documentation
           :map corfu-map
           ("M-p" . corfu-popupinfo-scroll-down)
           ("M-n" . corfu-popupinfo-scroll-up)
           ("M-d" . corfu-popupinfo-toggle))
    :custom
    (corfu-popupinfo-delay nil)
    (corfu-popupinfo-max-height 15))

  ;; Corfu popup on terminal
  (use-package corfu-terminal
    :straight t
    :hook (corfu-mode . corfu-terminal-mode))

  ;; Icons for Corfu using `nerd-icons'
  (use-package nerd-icons-corfu
    :straight t
    :after corfu
    :init
    (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))
#+end_src

* Projects
** project
#+begin_src emacs-lisp
  (use-package project
    :straight t)
#+end_src
* Buffer Management
:properties:
:header-args:emacs-lisp: :tangle ~/.config/minimal-emacs/post-init.el
:end:
** popper
Used for popups (eshell, scratch buffer etc.)
#+begin_src emacs-lisp
(use-package popper
  :straight t
  :bind (("C-#"   . popper-toggle)
         ("M-#"   . popper-cycle)
         ("C-M-#" . popper-toggle-type))
  :init
  (setq popper-reference-buffers
        '("\\*Messages\\*"
          "Output\\*$"
          "\\*Async Shell Command\\*"
          help-mode
          compilation-mode))
  (popper-mode +1)
  (popper-echo-mode +1))                ; For echo area hints
#+end_src

* Editing
:properties:
:header-args:emacs-lisp: :tangle ~/.config/minimal-emacs/post-init.el
:end:
** meow
#+begin_src emacs-lisp
(defun meow-setup ()
  (interactive)
  (require 'meow)
  (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
  (meow-motion-overwrite-define-key
   '("j" . meow-next)
   '("k" . meow-prev)
   '("<escape>" . ignore))
  (meow-leader-define-key
   ;; SPC j/k will run the original command in MOTION state.
   '("j" . "H-j")
   '("k" . "H-k")
   ;; Use SPC (0-9) for digit arguments.
   '("1" . centaur-tabs-backward)
   '("2" . centaur-tabs-forward)
   '("3" . crux-switch-to-previous-buffer)
   '("4" . meow-digit-argument)
   '("5" . meow-digit-argument)
   '("6" . meow-digit-argument)
   '("7" . meow-digit-argument)
   '("8" . meow-digit-argument)
   '("9" . tab-switch)
   '("0" . tab-bar-switch-to-recent-tab)
   '("/" . meow-keypad-describe-key)
   '("bi" . ibuffer)
   '("om" . magit)
   '("?" . meow-cheatsheet))
  (meow-normal-define-key
   '("0" . meow-expand-0)
   '("9" . meow-expand-9)
   '("8" . meow-expand-8)
   '("7" . meow-expand-7)
   '("6" . meow-expand-6)
   '("5" . meow-expand-5)
   '("4" . meow-expand-4)
   '("3" . meow-expand-3)
   '("2" . meow-expand-2)
   '("1" . meow-expand-1)
   '("-" . negative-argument)
   '(";" . meow-reverse)
   '("," . meow-inner-of-thing)
   '("." . meow-bounds-of-thing)
   '("[" . meow-beginning-of-thing)
   '("]" . meow-end-of-thing)
   '("a" . meow-append)
   '("A" . meow-open-below)
   '("ä" . meow-kill-whole-line)
   '("b" . meow-back-word)
   '("B" . meow-back-symbol)
   '("c" . meow-change)
   '("d" . meow-delete)
   '("D" . meow-backward-delete)
   '("e" . meow-next-word)
   '("E" . meow-next-symbol)
   '("f" . meow-find)
   '("g" . meow-cancel-selection)
   '("G" . meow-grab)
   '("h" . meow-left)
   '("H" . meow-left-expand)
   '("i" . meow-insert)
   '("I" . meow-open-above)
   '("j" . meow-next)
   '("J" . meow-next-expand)
   '("k" . meow-prev)
   '("K" . meow-prev-expand)
   '("l" . meow-right)
   '("L" . meow-right-expand)
   '("m" . meow-join)
   '("n" . meow-search)
   '("o" . meow-block)
   ;; '("O" . meow-to-block)
   '("p" . meow-yank)
   '("q" . meow-quit)
   '("Q" . meow-goto-line)
   '("r" . meow-replace)
   '("R" . meow-swap-grab)
   '("s" . meow-kill)
   '("t" . meow-till)
   '("u" . meow-undo)
   '("U" . meow-undo-in-selection)
   '("v" . meow-visit)
   '("w" . meow-mark-word)
   '("W" . meow-mark-symbol)
   '("x" . meow-line)
   '("X" . meow-goto-line)
   '("y" . meow-save)
   '("Y" . meow-sync-grab)
   '("z" . meow-pop-selection)
   '("'" . repeat)))

    (use-package meow
    :straight t
    :demand t
    :config
    (meow-setup)
    (meow-global-mode 1))
#+end_src

*** meow for org
#+begin_src emacs-lisp
;; From https://aatmunbaxi.netlify.app/comp/meow_state_org_speed/
(setq meow-org-motion-keymap (make-keymap))
(meow-define-state org-motion
  "Org-mode structural motion"
  :lighter "[O]"
  :keymap meow-org-motion-keymap)

(meow-define-keys 'org-motion
  '("<escape>" . meow-normal-mode)
  '("i" . meow-insert-mode)
  '("g" . meow-normal-mode)
  '("u" .  meow-undo)
  ;; Moving between headlines
  '("k" .  (lambda () (interactive) (org-previous-visible-heading 1) (pulsar-recenter-center)))
  '("j" .  (lambda () (interactive) (org-next-visible-heading 1) (pulsar-recenter-center)))
  ;; Moving between headings at the same level
  '("p" .  (lambda () (interactive) (org-backward-heading-same-level 1) (pulsar-recenter-center)))
  '("n" .  (lambda () (interactive) (org-forward-heading-same-level 1) (pulsar-recenter-center)))
  ;; Moving subtrees themselves
  '("K" .  org-subtree-up)
  '("J" .  org-subtree-down)
  ;; Navigating paragraphs
  '("0" .  forward-paragraph)
  '("9" .  backward-paragraph)
  ;; Subtree de/promotion
  '("L" .  org-demote-subtree)
  '("H" .  org-promote-subtree)
  ;; Completion-style search of headings
  '("v" .  consult-org-heading)
  ;; Setting subtree metadata
  '("l" .  org-set-property)
  '("t" .  org-todo)
  '("d" .  org-deadline)
  '("s" .  org-schedule)
  '("e" .  org-set-effort)
  ;; Refiling
  '("rv" .  +org/refile-to-visible)
  '("rf" .  +org/refile-to-current-file)
  '("rr" .  org-refile)
  ;; Block navigation
  '("b" .  org-previous-block)
  '("f" .  org-next-block)
  ;; Narrowing/widening
  '("N" .  org-narrow-to-subtree)
  '("W" .  widen))

(meow-define-keys 'normal
  '("O" . meow-org-motion-mode))
#+end_src

** expand-region
#+begin_src emacs-lisp
  (use-package expand-region
    :straight t
    :bind
    (("M-g =" . er/expand-region)
     ("M-g - " . er/contract-region)
     :map mode-specific-map
     :prefix-map region-prefix-map
     :prefix "r"
     ("(" . er/mark-inside-pairs)
     (")" . er/mark-outside-pairs)
     ("'" . er/mark-inside-quotes)
     ([34] . er/mark-outside-quotes) ; it's just a quotation mark
     ("o" . er/mark-org-parent)
     ("u" . er/mark-url)
     ("b" . er/mark-org-code-block)
     ("." . er/mark-method-call)
     (">" . er/mark-next-accessor)
     ("w" . er/mark-word)
     ("d" . er/mark-defun)
     ("e" . er/mark-email)
     ("," . er/mark-symbol)
     ("<" . er/mark-symbol-with-prefix)
     (";" . er/mark-comment)
     ("s" . er/mark-sentence)
     ("S" . er/mark-text-sentence)
     ("p" . er/mark-paragraph)
     ("P" . er/mark-text-paragraph)))
#+end_src
** smartparens
#+begin_src emacs-lisp
(use-package smartparens-config
  :straight (:type built-in)
  :after smartparens
  :config
  ;; don't create a pair with single quote in minibuffer
  (sp-local-pair 'minibuffer-inactive-mode "'" nil :actions nil)

  ;; indent after inserting any kinds of parens
  (defun my/smartparens-pair-newline-and-indent (id action context)
    (save-excursion
      (newline)
      (indent-according-to-mode))
    (indent-according-to-mode))
  
  (sp-pair "(" nil :post-handlers '(:add (my/smartparens-pair-newline-and-indent "RET")))
  (sp-pair "{" nil :post-handlers '(:add (my/smartparens-pair-newline-and-indent "RET")))
  (sp-pair "[" nil :post-handlers '(:add (my/smartparens-pair-newline-and-indent "RET"))))

(use-package smartparens
  :straight t
  :hook (after-init . show-smartparens-global-mode)
  :bind (:map smartparens-mode-map
              ;; paredit bindings
              ("C-M-f" . sp-forward-sexp)
              ("C-M-b" . sp-backward-sexp)
              ("C-M-d" . sp-down-sexp)
              ("C-M-u" . sp-backward-up-sexp)
              ("C-M-n" . sp-up-sexp)
              ("C-M-p" . sp-backward-down-sexp)
              ;; ("M-s" . sp-splice-sexp)
              ("M-<up>" . sp-splice-sexp-killing-backward)
              ("M-<down>" . sp-splice-sexp-killing-forward)
              ;; ("M-r" . sp-splice-sexp-killing-around)
              ("M-(" . sp-wrap-round)
              ("M-{" . sp-wrap-curly)
              ("C-)" . sp-forward-slurp-sexp)
              ("C-<right>" . sp-forward-slurp-sexp)
              ("C-}" . sp-forward-barf-sexp)
              ("C-<left>" . sp-forward-barf-sexp)
              ("C-(" . sp-backward-slurp-sexp)
              ("C-M-<left>" . sp-backward-slurp-sexp)
              ("C-{" . sp-backward-barf-sexp)
              ("C-M-<right>" . sp-backward-barf-sexp)
              ;; ("M-S" . sp-split-sexp)
              ;; mine
              ("C-M-k" . sp-kill-sexp) ("C-M-w" . sp-copy-sexp)
              ("M-@" . sp-mark-sexp)
              )
  :diminish smartparens-mode
  :init
  (setq sp-show-pair-delay 0.2
        ;; avoid slowness when editing inside a comment for modes with
        ;; parenthesized comments e.g. coq
        sp-show-pair-from-inside nil
        sp-cancel-autoskip-on-backward-movement nil
        sp-highlight-pair-overlay nil
        sp-highlight-wrap-overlay nil
        sp-highlight-wrap-tag-overlay nil)
  :config
  (require 'smartparens-org)

  ;; Define pairs for Org mode
  (sp-local-pair 'org-mode "*" "*")
  (sp-local-pair 'org-mode "/" "/")
  (sp-local-pair 'org-mode "_" "_")
  (sp-local-pair 'org-mode "=" "=")
  (sp-local-pair 'org-mode "~" "~")
  (sp-local-pair 'org-mode "+" "+")

  ;; Auto-indent
  ;; from https://xenodium.com/emacs-smartparens-auto-indent/
  (defun indent-between-pair (&rest _ignored)
    (newline)
    (indent-according-to-mode)
    (forward-line -1)
    (indent-according-to-mode))

  (sp-local-pair 'prog-mode "{" nil :post-handlers '((indent-between-pair "RET")))
  (sp-local-pair 'prog-mode "[" nil :post-handlers '((indent-between-pair "RET")))
  (sp-local-pair 'prog-mode "(" nil :post-handlers '((indent-between-pair "RET"))))
#+end_src
** olivetti
#+begin_src emacs-lisp
  (use-package olivetti
    :straight t
    :custom
    (olivetti-body-width 0.68))
#+end_src
** drag-stuff
#+begin_src emacs-lisp
(use-package drag-stuff
  :straight t
  :bind (("C-M-ö" . drag-stuff-up)
         ("C-M-ä" . drag-stuff-down))
  :diminish
  :hook (prog-mode . drag-stuff-mode)
  :config
  (add-to-list 'drag-stuff-except-modes 'org-mode)
  (drag-stuff-define-keys))
#+end_src
** undo-fu
#+begin_src emacs-lisp
(use-package undo-fu
  :straight t
  :commands (undo-fu-only-undo
             undo-fu-only-redo
             undo-fu-only-redo-all
             undo-fu-disable-checkpoint)
  :custom
  ;; 3 times the default values
  (undo-limit (* 3 160000))
  (undo-strong-limit (* 3 240000)))

(use-package undo-fu-session
  :straight t
  :config
  (undo-fu-session-global-mode))
#+end_src
** TODO multiple-cursors
#+begin_src emacs-lisp
(use-package multiple-cursors
  :straight t
  :defer t
  :hook ((multiple-cursors-mode-enabled-hook . (lambda () (corfu-mode -1)))
         (multiple-cursors-mode-disabled-hook . (lambda () (corfu-mode 1))))
  ;; :bind
  ;; (("C-c m l" . mc/edit-lines)
  ;;  ("C-c m b" . mc/edit-beginnings-of-lines)
  ;;  ("C-c m e" . mc/edit-ends-of-lines)
  ;;  ("C-c m a" . mc/mark-all-dwim)
  ;;  ("C-c m s" . mc/mark-all-symbols-like-this)
  ;;  ("C-c m w" . mc/mark-all-words-like-this)
  ;;  ("C-c m r" . mc/mark-all-in-region)
  ;;  ("C-c m R" . mc/mark-all-in-region-regexp)
  ;;  ("C-c m d" . mc/mark-all-like-this-in-defun)
  ;;  ("C-c m S" . mc/mark-all-symbols-like-this-in-defun)
  ;;  ("C-c m W" . mc/mark-all-words-like-this-in-defun)
  ;;  ("C-c m i" . mc/insert-numbers)
  ;;  ("C-c m n" . mc/mark-next-like-this)
  ;;  ("C-c m p" . mc/mark-previous-like-this)
  ;;  ("C-c m N" . mc/skip-to-next-like-this)
  ;;  ("C-c m P" . mc/skip-to-previous-like-this)
  ;;  ("C-c m M-n" . mc/unmark-next-like-this)
  ;;  ("C-c m M-p" . mc/unmark-previous-like-this))
  )
#+end_src
** Search
*** isearch

#+begin_src emacs-lisp
  (use-package isearch
    :straight (:type built-in)
    :custom
    (isearch-lazy-count t) ; Show the match count (need a non-nil `isearch-lazy-highlight')
    (search-ring-max 200) ; 16 is too little
    (regexp-search-ring-max 200)
    :bind (;; Swap `isearch-*' with `isearch-*-regexp' to use regexp based search by default
           ("C-s" . isearch-forward-regexp)
           ("C-r" . isearch-backward-regexp)
           ("C-M-s" . isearch-forward)
           ("C-M-r" . isearch-backward)
           :map isearch-mode-map
           ("<up>" . isearch-ring-retreat)
           ("<down>" . isearch-ring-advance)
           ("M-i" . +insert-thing-at-point)))
#+end_src
*** swiper
Extended ~isearch~
#+begin_src emacs-lisp
  (use-package swiper
    :straight t
    :defer t
    :bind (("M-g s s" . swiper)
           ("M-g s ."   . swiper-all-thing-at-point))
    :config
    ;; Recenter afer jump
    (setq swiper-action-center t))
#+end_src

*** rg.el
#+begin_src emacs-lisp
  (use-package rg
    :straight t
    :defer t
    :config
    (rg-enable-default-bindings)
    ;; Not sure if I really need this
    (rg-define-toggle "--multiline --multiline-dotall" "u")
    (rg-define-toggle "--word-regexp" "w")
    (rg-define-toggle "--files-with-matches" "L")

    ;; Highlight longer
    (setq next-error-highlight-no-select t)

    ;; Custom searches
    ;; search in org roam folder
    (rg-define-search my/rg-org-roam-directory
      :query ask
      :format regexp
      :files "everything"
      :dir org-roam-directory
      :confirm prefix)

    ;; search in org roam folder where I have transcripts from the Huberman Lab
    (rg-define-search my/rg-org-roam-directory-huberman
      :query ask
      :format regexp
      :files "everything"
      :dir (concat org-roam-directory "/rez/huberman-lab")
      :confirm prefix)

    (setq dotemacs-directory "/cs/priv/repos/dotemacs")
    (rg-define-search my/rg-dotemacs
      :query ask
      :format regexp
      :files "everything"
      :dir dotemacs-directory
      :confirm prefix)

    (add-hook 'next-error-hook #'recenter)
    (add-hook 'next-error-hook #'focus-mode))
#+end_src

Configure custom searches
#+begin_src emacs-lisp
;; search in org roam folder
(rg-define-search my/rg-org-roam-directory
  :query ask
  :format regexp
  :files "everything"
  :dir org-roam-directory
  :confirm prefix)

;; search in org roam folder where I have transcripts from the Huberman Lab
(rg-define-search my/rg-org-roam-directory-huberman
  :query ask
  :format regexp
  :files "everything"
  :dir (concat org-roam-directory "/rez/huberman-lab")
  :confirm prefix)

(setq dotemacs-directory "/cs/priv/repos/dotemacs")
(rg-define-search my/rg-dotemacs
  :query ask
  :format regexp
  :files "everything"
  :dir dotemacs-directory
  :confirm prefix)
#+end_src
*** dogears
#+begin_src emacs-lisp
;; Never lose your place in Emacs again
(use-package dogears
  :straight t
  :bind (("M-g d"   . dogears-go)
         ("M-g M-b" . dogears-back)
         ("M-g M-f" . dogears-forward)
         ("M-g M-d" . dogears-list)
         ("M-g M-D" . dogears-sidebar)
         ([mouse-8] . dogears-back)
         ([mouse-9] . dogears-forward))
  :custom
  (dogears-hooks '(imenu-after-jump-hook xref-after-jump-hook xref-after-return-hook consult-after-jump-hook rtags-jump-hook))
  :config
  (dogears-mode))
#+end_src
** Kill ring
*** easy-kill
#+begin_src emacs-lisp
 ;; Kill & Mark things easily
(use-package easy-kill
  :straight t
  :bind (([remap kill-ring-save] . easy-kill)
         ([remap mark-sexp] . easy-mark)))

#+end_src

*** browse-kill-ring
#+begin_src emacs-lisp
;; Interactively insert and edit items from kill-ring
(use-package browse-kill-ring
  :straight t
  :bind ("C-c k" . browse-kill-ring)
  :hook (after-init . browse-kill-ring-default-keybindings)
  :init (setq browse-kill-ring-separator "────────────────"
              browse-kill-ring-separator-face 'shadow))
#+end_src
* UI
:properties:
:header-args:emacs-lisp: :tangle ~/.config/minimal-emacs/post-init.el
:end:
** Theme

Install additional themes:
#+begin_src emacs-lisp
  (use-package doom-themes
    :straight (:build t)
    :defer t
    ;; :init (load-theme 'doom-nord-aurora t)
    )

  ;; Install kaolin themes
  (use-package kaolin-themes
    :straight t
    :defer t)

  ;; Install moe-theme
  (use-package moe-theme
    :straight t)

  (use-package ef-themes
    :straight t)

  (use-package modus-themes
    :straight t)

  (use-package solarized-theme
    :straight t)

  (use-package lambda-themes
    :straight (:type git :host github :repo "lambda-emacs/lambda-themes")
    :custom
    (lambda-themes-set-italic-comments t)
    (lambda-themes-set-italic-keywords t)
    (lambda-themes-set-variable-pitch t))

  ;; Install sanityinc tomorrow
  (use-package color-theme-sanityinc-tomorrow
    :straight t)
#+end_src

Load theme
#+begin_src emacs-lisp
(load-theme 'ef-owl t)
#+end_src

** Fonts
Set default font
#+begin_src emacs-lisp
(set-face-attribute 'default nil :family "JetBrains Mono")
#+end_src
** visual-fill-column
#+begin_src emacs-lisp
(use-package visual-fill-column
  :straight t
  :demand t)
#+end_src
** Modeline
*** doom-modeline
#+begin_src emacs-lisp
(use-package doom-modeline
  :straight (:type git :host github :repo "seagle0128/doom-modeline") 
  :init
  :custom
  (doom-modeline-height 15)
  (doom-modeline-enable-word-count t)
  (doom-modeline-continuous-word-count-modes '(markdown-mode gfm-mode org-mode))
  (doom-modeline-mu4e nil)
  (doom-modeline-project-detection nil)
  (doom-modeline-env-version t)
  (doom-modeline-persp-name nil)
  (doom-modeline-persp-icon nil)
  (doom-modeline-buffer-file-name-style 'truncate-upto-project)
  :config
  (setq find-file-visit-truename t)
  (doom-modeline-mode 1))
#+end_src
** pulsar
#+begin_src emacs-lisp
(use-package pulsar
  :straight t
  :hook (after-init-hook . pulsar-global-mode)
  :hook ((next-error xref-after-return) . pulsar-pulse-line) ; only pulse, don't recenter
  :hook ((consult-after-jump imenu-after-jump xref-after-jump) . pulsar-recenter-center) ; pulse and recenter
  :hook ((consult-after-jump imenu-after-jump xref-after-jump xref-after-return) . pulsar-reveal-entry) ; reveal if hidden
  :custom
  (pulsar-face 'pulsar-red)
  :config
  (cl-callf append pulsar-pulse-functions
    '(what-cursor-position scroll-up-command scroll-down-command kill-whole-line yank-from-kill-ring yank yank-pop)))
#+end_src
** Folding
*** hideshow
#+begin_src emacs-lisp
  (use-package hideshow
    :straight (:type built-in)
    :defer t
    :hook ((prog-mode conf-mode nxml-mode) . hs-minor-mode) ; Hide/show code blocks, a.k.a. code folding
    :custom
    (hs-hide-comments-when-hiding-all nil)
    :bind (:map hs-minor-mode-map
                ("C-c f" . #'hs-toggle-hiding)
                ("C-c F" . #'+hs-toggle-all))
    :config
    (defvar-local +hs-toggle-all-show nil)
    (defun +hs-toggle-all ()
      (interactive)
      (if +hs-toggle-all-show (hs-show-all) (hs-hide-all))
      (setq +hs-toggle-all-show (not +hs-toggle-all-show))))
#+end_src

#+RESULTS:
** Windows
*** ace-window
#+begin_src emacs-lisp
  ;; Quickly switch windows in Emacs
(use-package ace-window
  :straight t
  :bind (("M-o" . ace-window))
  :custom
  (aw-dispatch-always t))
#+end_src
*** windmove
#+begin_src emacs-lisp
  (use-package windmove
  :straight t
  :demand
  :config
  (windmove-default-keybindings 'shift) ; Navigate windows using Shift+Direction
  (defvar-keymap +windmove-keys
    ;; :repeat t ; Make it work with `repeat-mode'
    "k" #'windmove-up
    "j" #'windmove-down
    "h" #'windmove-left
    "l" #'windmove-right)
  (keymap-global-set "C-c w" +windmove-keys))
#+end_src
** Tabs
*** centaur-tabs
#+begin_src emacs-lisp
(use-package centaur-tabs
  :straight t
  :init
  (setq centaur-tabs-enable-key-bindings t)
  :config
  (setq centaur-tabs-style "bar"
        centaur-tabs-height 25
        centaur-tabs-set-icons t
        centaur-tabs-show-new-tab-button t
        centaur-tabs-set-modified-marker t
        centaur-tabs-show-navigation-buttons t
        centaur-tabs-set-bar 'under
        centaur-tabs-show-count nil
        ;; centaur-tabs-label-fixed-length 15
        ;; centaur-tabs-gray-out-icons 'buffer
        centaur-tabs-plain-icons t
        x-underline-at-descent-line t
        centaur-tabs-left-edge-margin nil)
  ;; Exclude some buffers
  (setq centaur-tabs-excluded-prefixes
        (append centaur-tabs-excluded-prefixes
                '("*ginko-output*"
                  "*new-prefix2*"
                  "*new-prefix3*")))
  (centaur-tabs-change-fonts (face-attribute 'default :font) 110)
  (centaur-tabs-headline-match)
  ;; (centaur-tabs-enable-buffer-alphabetical-reordering)
  ;; (setq centaur-tabs-adjust-buffer-order t)
  (setq centaur-tabs-adjust-buffer-order 'left)
  (centaur-tabs-mode t)
  (centaur-tabs-group-by-projectile-project)
  (setq uniquify-separator "/")
  (setq uniquify-buffer-name-style 'forward)
  (defun centaur-tabs-buffer-groups ()
    "`centaur-tabs-buffer-groups' control buffers' group rules.

Group centaur-tabs with mode if buffer is derived from `eshell-mode' `emacs-lisp-mode' `dired-mode' `org-mode' `magit-mode'.
All buffer name start with * will group to \"Emacs\".
Other buffer group by `centaur-tabs-get-group-name' with project name."
    (list
     (cond
      ;; ((not (eq (file-remote-p (buffer-file-name)) nil))
      ;; "Remote")
      ((or (string-equal "*" (substr
           (memq major-mode '(magit-process-mode
                              magit-status-mode
                              magit-diff-mode
                              magit-log-mode
                              magit-file-mode
                              magit-blob-mode
                              magit-blame-mode
                              )))
       "Emacs")
      ((derived-mode-p 'prog-mode)
       "Editing")
      ((derived-mode-p 'dired-mode)
       "Dired")
      ((memq major-mode '(helpful-mode
                          help-mode))
       "Help")
      ((memq major-mode '(org-mode
                          org-agenda-clockreport-mode
                          org-src-mode
                          org-agenda-mode
                          org-beamer-mode
                          org-indent-mode
                          org-bullets-mode
                          org-cdlatex-mode
                          org-agenda-log-mode
                          diary-mode))
       "OrgMode")
      (t
       (centaur-tabs-get-group-name (current-buffer))))))))
  :hook
  (dashboard-mode . centaur-tabs-local-mode)
  (term-mode . centaur-tabs-local-mode)
  (calendar-mode . centaur-tabs-local-mode)
  (org-agenda-mode . centaur-tabs-local-mode)
  (prog-mode . centaur-tabs-mode)
  (eshell-mode . centaur-tabs-local-mode)
  (popper-mode . centaur-tabs-local-mode)
  ;; :bind
  ;; ("s-1" . centaur-tabs-backward)
  ;; ("s-2" . centaur-tabs-forward)
  ;; ("s-S h" . centaur-tabs-move-current-tab-to-left)
  ;; ("s-S l" . centaur-tabs-move-current-tab-to-right)
  )
#+end_src
*** tabspaces
#+begin_src emacs-lisp
  (use-package tabspaces
    ;; use this next line only if you also use straight, otherwise ignore it. 
    :straight (:type git :host github :repo "mclear-tools/tabspaces")
    :hook (after-init . tabspaces-mode) ;; use this only if you want the minor-mode loaded at startup. 
    :commands (tabspaces-switch-or-create-workspace
               tabspaces-open-or-create-project-and-workspace)
    :custom
    (tabspaces-use-filtered-buffers-as-default t)
    (tabspaces-default-tab "Default")
    (tabspaces-remove-to-default t)
    (tabspaces-include-buffers '("*scratch*"))
    (tabspaces-initialize-project-with-todo t)
    (tabspaces-todo-file-name "project-todo.org")
    ;; sessions
    (tabspaces-session t)
    (tabspaces-session-auto-restore nil)
    (tab-bar-new-tab-choice "*scratch*"))
#+end_src
* Files
:properties:
:header-args:emacs-lisp: :tangle ~/.config/minimal-emacs/post-init.el
:end:
** dirvish
#+begin_src emacs-lisp
(use-package dirvish
  :straight t
  :after dired
  :init
  (dirvish-override-dired-mode)
  :custom
  (dirvish-attributes '(subtree-state file-size vc-state))
  ;; (dirvish-quick-access-entries ; It's a custom option, `setq' won't work
  ;;  '(("r" "~/work/repos"   "Repos (work)")
  ;;    ("b" "~/sync/blog"    "Blog")))
  :config
  (setq dirvish-side-width 40)
  ;; (setq dirvish-attributes '(vc-state subtree-state all-the-icons collapse git-msg file-time file-size))
  :bind (("C-c a d" . dirvish-side)
         :map
         dirvish-mode-map ; Dirvish inherits `dired-mode-map'
         ("a"   . dirvish-quick-access)
         ("f"   . dirvish-file-info-menu)
         ("y"   . dirvish-yank-menu)
         ("N"   . dirvish-narrow)
         ("^"   . dirvish-history-last)
         ("h"   . dirvish-history-jump) ; remapped `describe-mode'
         ("s"   . dirvish-quicksort)    ; remapped `dired-sort-toggle-or-edit'
         ("v"   . dirvish-vc-menu)      ; remapped `dired-view-file'
         ("TAB" . dirvish-subtree-toggle)
         ("M-f" . dirvish-history-go-forward)
         ("M-b" . dirvish-history-go-backward)
         ("M-l" . dirvish-ls-switches-menu)
         ("M-m" . dirvish-mark-menu)
         ("M-t" . dirvish-layout-toggle)
         ("M-s" . dirvish-setup-menu)
         ("M-e" . dirvish-emerge-menu)
         ("M-j" . dirvish-fd-jump)))
#+end_src
** recentf
#+begin_src emacs-lisp
  (use-package recentf
    :custom
    (recentf-max-saved-items 200) ; Increase the maximum number of saved items
    (recentf-case-fold-search t) ; Ignore case when searching recentf files
    (recentf-exclude ; Exclude some files from being remembered by recentf
     `(file-remote-p
       ,(rx (or "/elfeed-db/" "/eln-cache/" "/cache/" "/.maildir/" "/.cache/"))
       ,(rx bol "/tmp/")))
    :bind (("C-c c r" . recentf-open-files))
    :init
    ;; Enable `recentf-mode' to remember recent files
    (recentf-mode 1))
#+end_src
* Programming
:properties:
:header-args:emacs-lisp: :tangle ~/.config/minimal-emacs/post-init.el
:end:
** Languages
*** Golang
#+begin_src emacs-lisp
(use-package company-go
  :straight t
  :after (company go-mode))

(use-package go-mode
  :straight t
  :mode "\\.go\\'"
  :hook ((before-save . gofmt-before-save))
  ;; ((go-mode . gofmt-before-save)
  ;;  (go-mode . eglot-ensure)
  :bind (:map go-mode-map
              ("C-c e h" . eldoc-box-hover-mode)
              ("C-c l e" . my-switch-to-eglot)
              ("C-c l l" . my-switch-to-lsp)
              ("M-?" . godoc-at-point)
              ("M-." . xref-find-definitions)
              ("M-_" . xref-find-references)
              ;; ("M-*" . pop-tag-mark) ;; Jump back after godef-jump
              ("C-c m r" . go-run))
  :custom
  (gofmt-command "goimports")
  :config
  ;; Configure LSP profiles
  (defun my-switch-to-eglot ()
    "Switch to eglot for the current Go buffer."
    (interactive)
    ;; Configure and start eglot
    (add-to-list 'completion-styles 'flex)
    (setq-local eglot-debug-server-messages t)
    (setq-local eglot-events-buffer-size 0)
    (setq-local eglot-workspace-configuration
                '(:gopls
                  ((usePlaceholders . t))))
    
    ;; Start eglot
    (eglot-ensure))

  (defun my-switch-to-lsp ()
    "Switch to lsp-mode for the current Go buffer."
    (interactive)
    ;; Configure and start lsp-mode
    (add-to-list 'completion-styles 'flex)
    (setq-local lsp-log-io t)
    (setq-local lsp-idle-delay 0.1)
    (setq-local lsp-enable-snippet t)
    
    ;; Start LSP
    (lsp-deferred)))

;; Configure gopls for go-mode

;; Setup capf
;; (add-hook 'go-ts-mode-hook (lambda ()
;;                              (setq-local completion-at-point-functions
;;                                          (list (cape-capf-super #'cape-dabbrev #'lsp-completion-at-point (cape-company-to-capf #'company-go) (cape-company-to-capf #'company-yasnippet))))))
;; (add-hook 'go-mode-hook (lambda ()
;;                           (setq-local completion-at-point-functions
;;                                       (list (cape-capf-super #'cape-dabbrev #'lsp-completion-at-point (cape-company-to-capf #'company-go) (cape-company-to-capf #'company-yasnippet))))))

;; (add-hook 'go-mode-hook (lambda ()
;;                         (flycheck-add-next-checker 'golangci-lint)
;;                         (flycheck-add-next-checker 'go-vet)))

(use-package gotest
  :straight t
  :after go-mode
  :bind (:map go-mode-map
              ("C-c t f" . go-test-current-file)
              ("C-c t t" . go-test-current-test)
              ("C-c t j" . go-test-current-project)
              ("C-c t b" . go-test-current-benchmark)
              ("C-c t c" . go-test-current-coverage)
              ("C-c t x" . go-run)))

(use-package go-guru
  :straight t
  :hook
  (go-mode . go-guru-hl-identifier-mode))

(use-package flycheck-golangci-lint
  :straight t
  :hook
  (go-mode . flycheck-golangci-lint-setup))

(use-package go-eldoc
  :straight t
  :hook
  (go-mode . go-eldoc-setup))

(use-package go-tag
  :straight t
  :bind (:map go-mode-map
              ("C-c t a" . go-tag-add)
              ("C-c t r" . go-tag-remove))
  :init (setq go-tag-args (list "-transform" "camelcase")))

(use-package go-fill-struct
  :straight t
  :defer t
  ;; :bind (:map go-mode-map
  ;;             ("C-c f" . go-fill-struct))
  )

;; (use-package go-imenu
;;   :straight t
;;   :config
;;   (add-hook 'go-mode-hook 'go-imenu-setup))
  
(use-package go-impl
  :straight t)

(use-package go-playground
  :straight t
  ;; :bind (:map go-mode-map
  ;;             ("C-c p" . go-playground))
)
#+end_src

**** ginkgo
#+begin_src emacs-lisp
(use-package ginkgo-mode
  :straight (:type git :host github :repo "garslo/ginkgo-mode")
  :defer t)
#+end_src
*** Yaml
#+begin_src emacs-lisp
  (use-package yaml-mode
    :straight t
    :defer t
    :mode "\\.yml\\'"
    :mode "\\.yaml\\'")
#+end_src

*** Makefiles
#+begin_src emacs-lisp
  (defun my/local-tab-indent ()
    (setq-local indent-tabs-mode 1))
  (add-hook 'makefile-mode-hook #'my/local-tab-indent)
#+end_src

*** PlantUML
#+begin_src emacs-lisp
  (use-package plantuml-mode
    :straight t
    :defer t
    :mode ("\\.\\(pum\\|puml\\)\\'" . plantuml-mode)
    :after ob
    :init
    (add-to-list 'org-babel-load-languages '(plantuml . t))
    :config
    (setq plantuml-default-exec-mode 'jar
          plantuml-jar-path "~/.local/bin/plantuml.jar"
          org-plantuml-jar-path "~/.local/bin/plantuml.jar"
          plantuml-indent-level 4))
#+end_src
*** Toml
#+begin_src emacs-lisp
  (use-package toml-mode
    :straight t
    :defer t
    :mode "/\\(Cargo.lock\\|\\.cargo/config\\)\\'")
#+end_src
*** Web
**** web-mode
#+begin_src emacs-lisp
(use-package web-mode
  :straight t
  :defer t
  :mode (("\\.phtml\\'"      . web-mode)
         ("\\.tpl\\.php\\'"  . web-mode)
         ("\\.twig\\'"       . web-mode)
         ("\\.xml\\'"        . web-mode)
         ("\\.html\\'"       . web-mode)
         ("\\.htm\\'"        . web-mode)
         ("\\.[gj]sp\\'"     . web-mode)
         ("\\.as[cp]x?\\'"   . web-mode)
         ("\\.eex\\'"        . web-mode)
         ("\\.erb\\'"        . web-mode)
         ("\\.mustache\\'"   . web-mode)
         ("\\.handlebars\\'" . web-mode)
         ("\\.hbs\\'"        . web-mode)
         ("\\.eco\\'"        . web-mode)
         ("\\.ejs\\'"        . web-mode)
         ("\\.svelte\\'"     . web-mode)
         ("\\.ctp\\'"        . web-mode)
         ("\\.djhtml\\'"     . web-mode)
         ("\\.vue\\'"        . web-mode))
  :bind (:map web-mode-map
        ;; Quick actions with direct M-g prefix
        ("M-g /" . web-mode-element-close)
        ("M-g k" . web-mode-element-kill)
        ("M-g s" . web-mode-element-select)
        
        ;; Tag operations (M-g t prefix)
        ("M-g t n" . web-mode-tag-next)
        ("M-g t p" . web-mode-tag-previous)
        ("M-g t m" . web-mode-tag-match)
        ("M-g t s" . web-mode-tag-select)
        ("M-g t b" . web-mode-tag-beginning)
        ("M-g t e" . web-mode-tag-end)
        
        ;; Element operations (M-g e prefix)
        ("M-g e n" . web-mode-element-next)
        ("M-g e p" . web-mode-element-previous)
        ("M-g e u" . web-mode-element-parent)
        ("M-g e d" . web-mode-element-child)
        ("M-g e k" . web-mode-element-kill)
        ("M-g e w" . web-mode-element-wrap)
        ("M-g e s" . web-mode-element-select)
        ("M-g e c" . web-mode-element-clone)
        ("M-g e r" . web-mode-element-rename)
        
        ;; Attribute operations (M-g a prefix)
        ("M-g a n" . web-mode-attribute-next)
        ("M-g a p" . web-mode-attribute-previous)
        ("M-g a k" . web-mode-attribute-kill)
        ("M-g a i" . web-mode-attribute-insert)
        ("M-g a s" . web-mode-attribute-select))
  :config
  (setq web-mode-markup-indent-offset 2
        web-mode-code-indent-offset 2
        web-mode-css-indent-offset 2
        web-mode-enable-auto-pairing t
        web-mode-enable-css-colorization t))
#+end_src
**** emmet-mode
#+begin_src emacs-lisp
(use-package emmet-mode
  :straight t
  :defer t
  :hook ((css-mode  . emmet-mode)
         (html-mode . emmet-mode)
         (web-mode  . emmet-mode)
         (sass-mode . emmet-mode)
         (scss-mode . emmet-mode)
         (web-mode  . emmet-mode))
  :bind (:map emmet-mode-keymap
        (("M-RET" . 'emmet-expand-yas))))
#+end_src
*** Yaml
#+begin_src emacs-lisp
  (use-package yaml-mode
    :straight t
    :defer t
    :mode "\\.yml\\'"
    :mode "\\.yaml\\'")
#+end_src
** LSP
*** eglot
#+begin_src emacs-lisp
(use-package eglot
  :ensure nil
  :defer t
  :commands (eglot
             eglot-rename
             eglot-ensure
             eglot-rename
             eglot-format-buffer)
  :custom
  (eglot-report-progress t)  ; Prevent minibuffer spam
  (eglot-autoshutdown t) ; shutdown after closing the last managed buffer
  (eglot-sync-connect 0) ; async, do not block
  (eglot-extend-to-xref t) ; can be interesting!
  (eglot-report-progress nil) ; disable annoying messages in echo area!
  (eglot-events-buffer-size 0)
  :config
  ;; Optimizations
  (fset #'jsonrpc--log-event #'ignore)
  (setq jsonrpc-event-hook nil)
  ;; Not sure if this really helps
  ;; Enable completion capabilities
  ;; (setq completion-category-overrides '((eglot (styles orderless))))
  ;; Configure tab for completion
  (setq tab-always-indent 'complete)
  ;; Enable snippet/template support
  (setq eglot-insert-completion-annotations t)

  ;; Enable eglot for certain modes
  (add-hook 'go-mode-hook 'eglot-ensure))
#+end_src
*** TODO eldoc
Need to add some keybindings here: 
#+begin_src emacs-lisp
(use-package eldoc
  :straight (:type built-in)
  :hook (prog-mode-hook . eldoc-mode)
  :init
  (global-eldoc-mode 1))

(use-package eldoc-box
  :straight t
  :hook (eldoc-mode-hook . eldoc-box-hover-mode)
  :init
  (setq eldoc-box-position-function #'eldoc-box--default-upper-corner-position-function
        eldoc-box-clear-with-C-g t))
#+end_src
*** lsp-mode
#+begin_src emacs-lisp

(use-package lsp-mode
  :straight t
  :config
  (setq lsp-idle-delay 0.5
        lsp-enable-symbol-highlighting t
        lsp-enable-snippet t  ;; Not supported by company capf, which is the recommended company backend
        ;; lsp-disabled-clients '(eslint)
        lsp-pyls-plugins-flake8-enabled t)
  ;; :hook (
  ;;        ;; (go-mode . lsp-deferred)
  ;;        ;; (typescript-mode . lsp)
  ;;        ;; (js-mode . lsp)
  ;;        ;; (vue-mode . lsp)
  ;;        ;; (svelte-mode . lsp)
  ;;        ;; (python-mode . lsp)
  ;;        ;; (json-mode . lsp)
  ;;        ;; (lsp-mode . lsp-headerline-breadcrumb-mode)
  ;;        ;; (lsp-mode . lsb-enable-which-key-integration))
  ;;        )
  :commands (lsp lsp-deferred)
  :custom
  (lsp-print-io nil)
  (lsp-trace nil)
  (lsp-print-performance nil)
  (lsp-prefer-flymake t))
#+end_src


*** lsp-ui
#+begin_src emacs-lisp
(use-package lsp-ui
  :straight t
  :config
  (setq
        lsp-ui-sideline-show-hover nil
        ;; lsp-ui-sideline-delay 0.5
        ;; lsp-ui-sideline-ignore-duplicates t
        lsp-ui-doc-delay 0.5
        lsp-ui-doc-position 'bottom
        lsp-ui-doc-alignment 'frame
        lsp-ui-doc-header nil
        lsp-ui-doc-include-signature t
        lsp-ui-doc-use-childframe t)
  :commands lsp-ui-mode
  :custom
  ;; lsp-ui-doc
  (lsp-ui-doc-enable t)
  (lsp-ui-doc-header t)
  (lsp-ui-doc-include-signature t)
  (lsp-ui-doc-position 'top) ;; top, bottom, or at-point
  (lsp-ui-doc-max-width 120)
  (lsp-ui-doc-max-height 30)
  (lsp-ui-doc-use-childframe t)
  (lsp-ui-doc-use-webkit t)
  ;; signature
  (lsp-signature-auto-activate t)
  (lsp-signature-render-documentation t)
  (lsp-eldoc-hook t)

  :bind
  (:map lsp-ui-mode-map
              ;; ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
              ;; ([remap xref-find-references] . lsp-ui-peek-find-references)
              ("C-c C-r" . lsp-ui-peek-find-references)
              ("C-c C-j" . lsp-ui-peek-find-definitions)
              ("C-c i"   . lsp-ui-peek-find-implementation)
              ("C-c u" . lsp-ui-imenu)
              ("C-c d" . lsp-ui-doc-glance)
              ("C-c e" . lsp-treemacs-errors-list)
              ("C-c D" . lsp-ui-doc-show)
              ("C-c o" . lsp-describe-thing-at-point)
              ("C-c s"   . lsp-ui-sideline-mode)))
#+end_src
**** TODO testing
#+begin_src emacs-lisp
;; Manual reload sequence
(defun my-reload-eglot ()
  (interactive)
  ;; Shutdown current server
  (eglot-shutdown-all)
  ;; Clear workspace configuration
  (setq eglot-workspace-configuration nil)
  ;; Restart eglot
  (eglot-ensure))

;; Bind to a key for quick testing
(global-set-key (kbd "C-c e r") 'my-reload-eglot)


(defun my-test-eglot-config (config)
  "Test different eglot configurations."
  (interactive)
  (when (eglot-managed-p)
    (eglot-shutdown-all))

  (pcase config
    ('default
     (setq-local eglot-workspace-configuration nil))
    ('go-aggressive
     (add-to-list 'completion-styles 'flex)
     (setq eglot-debug-server-messages t)
     ;; (setq eglot-ignored-server-capabilities '())
     (setq eglot-events-buffer-size 0)
     (setq-local eglot-workspace-configuration
                 '(:gopls
                   ((usePlaceholders . t)
                    ;; (completeFunctionCalls . t)
                    ;; (experimentalPostfixCompletions . t)
                    ;; (completeUnimported . t)
                    ;; (completionBudget . "1s")
                    ;; (matcher . "CaseSensitive")          ; Better matching
                    ))))
    ('go-conservative
     (setq-local eglot-workspace-configuration
                 '(:gopls
                   ((usePlaceholders . nil)
                    (completeUnimported . nil)
                    (staticcheck . t))))))

  ;; Restart eglot
  (eglot-ensure))

;; Quick keybindings for testing
(define-key go-mode-map (kbd "C-c e d") 
            (lambda () (interactive) 
              (my-test-eglot-config 'default)))
(define-key go-mode-map (kbd "C-c e a") 
            (lambda () (interactive) 
              (my-test-eglot-config 'go-aggressive)))
#+end_src

#+RESULTS:
: my-reload-eglot

** Snippets
#+begin_src emacs-lisp
  (use-package yasnippet
    :straight t
    :demand t
    ;; :diminish yas-minor-mode
    :commands yas-minor-mode-on
    :bind (("C-c y d" . yas-load-directory)
           ("C-c y i" . yas-insert-snippet)
           ("C-c y f" . yas-visit-snippet-file)
           ("C-c y n" . yas-new-snippet)
           ("C-c y t" . yas-tryout-snippet)
           ("C-c y l" . yas-describe-tables)
           ("C-c y g" . yas-global-mode)
           ("C-c y m" . yas-minor-mode)
           ("C-c y r" . yas-reload-all)
           ("C-c y x" . yas-expand)
           :map yas-keymap
           ("C-i" . yas-next-field-or-maybe-expand))
    :mode ("/\\.emacs\\.d/snippets/" . snippet-mode)
    :hook (prog-mode . yas-minor-mode-on)
    :custom
    (yas-prompt-functions '(yas-completing-prompt yas-no-prompt))
    (yas-triggers-in-field t)
    (yas-wrap-around-region t)
    :custom-face
    (yas-field-highlight-face ((t (:background "#e4edfc")))))

  (use-package yasnippet-snippets
    :straight t
    :after yasnippet
    :demand t)

  (use-package doom-snippets
    :straight (:host github :repo "hlissner/doom-snippets" :files ("*.el" "*"))
    :after yasnippet
    :demand t)

  (use-package yasnippet-capf
    :straight t
    :after cape
    :hook ((prog-mode text-mode conf-mode) . +cape-yasnippet--setup-h)
    :config
    (defun +cape-yasnippet--setup-h ()
      (when (bound-and-true-p yas-minor-mode)
        (add-to-list 'completion-at-point-functions #'yasnippet-capf))))
#+end_src

** Debugging
*** dape
#+begin_src emacs-lisp
  (use-package dape
    :straight t
    :config
    ;; Pulse source line (performance hit)
    (add-hook 'dape-display-source-hook 'pulse-momentary-highlight-one-line)
    (setq dape-buffer-window-arrangement 'left)
    ;; Showing inlay hints
    (setq dape-inlay-hints t)
    (setq dape-minibuffer-hint t))

  ;; Enable repeat mode for more ergonomic `dape' use
  (use-package repeat
    :straight t
    :config
    (repeat-mode))
#+end_src
** Utilities
*** imenu-list
#+begin_src emacs-lisp
(use-package inenu-list
    :straight (imenu-list :type git :host github :repo "bmag/imenu-list")
    :defer t)
#+end_src
*** flycheck
#+begin_src emacs-lisp
(use-package flycheck
  :straight t
  :hook (prog-mode . flycheck-mode))

(use-package consult-flycheck
  :straight t
  :bind (("M-g f" . consult-flycheck)))
#+end_src
*** highlight-indent-guides
#+begin_src emacs-lisp
  (use-package highlight-indent-guides
    :straight t
    ;; :hook (prog-mode . highlight-indent-guides-mode)
    :custom (highlight-indent-guides-method 'character))
#+end_src
*** hl-todo
#+begin_src emacs-lisp
;; Highlight TODO keywords
(use-package hl-todo
  :straight (:host github :repo "tarsius/hl-todo")
  :hook (prog-mode . hl-todo-mode)
  :config
  (cl-callf append hl-todo-keyword-faces
    '(("BUG"   . "#ee5555")
      ("FIX"   . "#0fa050")
      ("PROJ"  . "#447f44")
      ("IDEA"  . "#0fa050")
      ("INFO"  . "#0e9030")
      ("TWEAK" . "#fe9030")
      ("PERF"  . "#e09030"))))
#+end_src
*** TODO dumb-jump
An Emacs "jump to definition" package for 50+ languages

#+begin_src emacs-lisp
(use-package dumb-jump
  :straight t
  :bind (:map prog-mode-map
        (("C-c C-o" . dumb-jump-go-other-window)
         ("C-c C-j" . dumb-jump-go)
         ("C-c C-i" . dumb-jump-go-prompt)))
  :custom
  (dumb-jump-selector 'completing-read)
  ;; :init
  ;; Use `dumb-jump' as `xref' backend
  ;; (add-hook 'xref-backend-functions #'dumb-jump-xref-activate)
  )
#+end_src

*** breadcrumb
#+begin_src emacs-lisp
(use-package breadcrumb
  :straight t
  :hook ((go-mode org-mode c-mode c++-mode c-ts-mode c++-ts-mode python-mode python-ts-mode rust-mode rust-ts-mode sh-mode bash-ts-mode) . breadcrumb-local-mode))
#+end_src
*** aggressive-indent
Keep lisp code always indented.
#+begin_src emacs-lisp
(use-package aggressive-indent
  :straight t
  :commands (aggressive-indent-mode aggressive-indent-global-mode)
  :hook
  ;; (clojure-mode . aggressive-indent-mode)
  ;; (clojurescript-mode . aggressive-indent-mode)
  ;; (emacs-lisp-mode . aggressive-indent-mode)
  (lisp-mode . aggressive-indent-mode))
#+end_src
** VC
*** magit
#+begin_src emacs-lisp
(use-package magit
  :straight t)
#+end_src
*** forge
#+begin_src emacs-lisp
(use-package forge
  :straight t
  :after magit)
#+end_src
*** diff-hl
#+begin_src emacs-lisp
(use-package diff-hl
  :straight t
  :hook (prog-mode . diff-hl-mode)
  :config
  ;; Added in https://github.com/dgutov/diff-hl/pull/207
  (setq diff-hl-update-async t)
  ;; (diff-hl-flydiff-mode +1)

  ;; Automatic diff-hl-margin-mode in terminal.
  ;; See https://github.com/dgutov/diff-hl/issues/155.
  (add-hook 'diff-hl-mode-on-hook
            (lambda ()
              (unless (display-graphic-p)
                (diff-hl-margin-local-mode))))
  :hook
  (magit-pre-refresh . diff-hl-magit-pre-refresh)
  (magit-post-refresh . diff-hl-magit-post-refresh))
#+end_src
*** browse-at-remote
#+begin_src emacs-lisp
  (use-package browse-at-remote
    :straight t
    :bind (("C-c go" . browse-at-remote)
           ("C-c gy" . browse-at-remote-kill))
    )
#+end_src
* ORG mode
:properties:
:header-args:emacs-lisp: :tangle ~/.config/minimal-emacs/post-init.el
:end:
** org
Basic configuration
#+begin_src emacs-lisp
(use-package org
  :straight (:type built-in)
  :hook ((org-mode . toggle-truncate-lines))
  :bind (
         :map org-mode-map
         ;; Basic structure
         ("C-c o i h" . org-insert-heading)
         ("C-c o i s" . org-insert-subheading)
         ("C-c o i t" . org-insert-todo-heading)
         ("C-c o i c" . dorneanu/org-insert-link-from-clipboard)

         ;; Clocking
         ("C-c o c i" . org-clock-in)
         ("C-c o c o" . org-clock-out)
         ("C-c o c m" . dorneanu/org-clock-enter-manually)

         ;; Demote / Promote
         ("C-c o d +" . org-do-promote)
         ("C-c o d -" . org-do-demote)

         ;; Navigation
         ("C-c o n n" . org-next-visible-heading)
         ("C-c o n p" . org-previous-visible-heading)

         ;; Todo state
         ("C-c o t t" . org-todo)
         ("C-c o t d" . org-deadline)
         ("C-c o t s" . org-schedule)

         ;; Tags and properties
         ("C-c o :" . org-set-tags-command)
         ("C-c o p" . org-set-property)

         ;; Formatting
         ;; ("C-c o b" . org-bold)
         ;; ("C-c o i" . org-italic)
         ;; ("C-c o u" . org-underline)
         ("C-c o f f" . org-emphasize)

         ;; Export
         ("C-c o e e" . org-export-dispatch)

         ;; Misc
         ("C-c o a" . org-archive-subtree)
         ("C-c o r" . org-refile)
         ("C-c o l" . org-insert-link))
  :custom
  (org-auto-align-tags t)
  (org-edit-src-content-indentation t) ; indent the content of src blocks
  (org-edit-src-turn-on-auto-save t) ; auto-save org-edit-src
  (org-fontify-quote-and-verse-blocks t)
  ;(org-id-locations-file (concat minemacs-config-dir "id-locations.el"))
  (org-pretty-entities t)
  (org-pretty-entities-include-sub-superscripts nil)
  (org-special-ctrl-a/e t)
  (org-startup-indented nil)
  (org-element-use-cache nil)
  (org-hide-emphasis-markers t)
  :config
  (setq org-hide-leading-stars             t
        org-hide-macro-markers             t
        org-ellipsis                       "…"
        org-image-actual-width             600
        org-redisplay-inline-images        t
        org-display-inline-images          t
        org-auto-align-tags                t
        org-startup-with-inline-images     "inlineimages"
        org-pretty-entities                t
        org-fontify-whole-heading-line     t
        org-fontify-done-headline          t
        org-fontify-quote-and-verse-blocks t
        org-startup-indented               t
        org-startup-align-all-tables       t
        org-use-property-inheritance       t
        org-list-allow-alphabetical        t
        org-M-RET-may-split-line           nil
        ;; org-src-window-setup               'split-window-below
        org-src-fontify-natively           t
        org-src-tab-acts-natively          t
        org-src-preserve-indentation       t
        org-adapt-indentation              t
        org-log-done                       'time
        org-log-into-drawer                nil     ;; Does this make sense?
        org-directory                      "~/repos/priv/org/"
        org-default-notes-file             (expand-file-name "notes.org" org-directory))

  ;; Set TODO keywords
  (setq org-todo-keywords
        '((sequence
           "TODO(t)"
           "STARTED(s)"
           "NEXT(n)"
           "WIP(p)"
           "WAITING(w!)"
           "|"
           "DONE(d)"
           "CANCELED(c)")
          (sequence
           "PROJ(P)"
           "MEETING(m)"
           "REVIEW(r)"
           "IDEA(i)")))
  ;; "|"
  ;; "STOP(c)"
  ;; "EVENT(m)"


  ;; No blank lines before new entries
  (setq org-blank-before-new-entry
        '((heading . nil)
          (plain-list-item . nil))))
#+end_src

** org-agenda
#+begin_src emacs-lisp
(use-package org-agenda
  :straight (:type built-in)
  :defer t
  :config
  (setq
   ;; Set agenda files
   org-agenda-files (mapcar
                     (lambda (f) (concat org-directory f))
                     '("inbox.org"
                       "work.org.gpg"
                       "sap.org.gpg"
                       "private.org.gpg"
                       "projects.org.gpg"))

   org-agenda-file-regexp
   (replace-regexp-in-string "\\\\\\.org" "\\\\.org\\\\(\\\\.gpg\\\\)?"
                             org-agenda-file-regexp)

   ;; Skip unavailable agenda files
   org-agenda-skip-unavailable-files t

   ;; Skip done tasks
   org-agenda-skip-scheduled-if-done t
   org-agenda-skip-deadline-if-done t

   ;; Show warnings for deadlines 7 days in advance.
   org-deadline-warning-days 5
   org-agenda-include-deadlines t
   org-agenda-todo-list-sublevels t

   ;; Set column width for tags in agenda
   org-agenda-tags-column 80


   ;; org-agenda-todo-ignore-scheduled 'all
   ;; org-agenda-todo-ignore-deadlines 'all
   ;; org-agenda-todo-ignore-with-date 'all

   ;; Use straight line as separator between agenda blocks
   ;; https://www.utf8-chartable.de/unicode-utf8-table.pl?start=9472&utf8=dec&unicodeinhtml=dec
   ;; org-agenda-block-separator 9472
   org-agenda-compact-blocks t
   org-agenda-start-day nil ;; i.e. today
   org-agenda-span 1
   org-agenda-start-on-weekday nil

   ;; Clock report settings
   org-agenda-start-with-clockreport-mode t
   org-clock-report-include-clocking-task t
   org-agenda-clockreport-parameter-plist '(:link nil :maxlevel 6 :fileskip0 t :compact nil)

   ;; Time grid
   org-agenda-time-grid
   '((daily today require-timed)
     (0900 01000 1100 1200 1300 1400 1500 1600 1700 1800)
     "-"
     "────────────────")

   ;; http://doc.endlessparentheses.com/Var/org-agenda-prefix-format.html
   org-agenda-prefix-format
   '(
     (agenda . "%5c %4e %?-12t %s")
     (todo   . " %4e %-12c")
     (tags   . " %-22c")
     (search . " %-12c"))

   ;; Append extra files
   org-agenda-files (append org-agenda-files
                            '("~/syncthing/org/2-PARA.org"
                              "~/syncthing/org/01-TDL.org")))

  ;; (add-hook 'org-agenda-mode-hook
  ;;           (lambda ()
  ;;             (visual-line-mode -1)
  ;;             (toggle-truncate-lines 1)
  ;;             (display-line-numbers-mode 0)))
  )
#+end_src

#+results:
: t

** org-super-agenda
Define custom org agenda commands.
Inspired by https://www.rousette.org.uk/archives/doom-emacs-tweaks-org-journal-and-org-super-agenda/

#+begin_src emacs-lisp
(use-package org-super-agenda
  :straight t)

(with-eval-after-load 'org-agenda
  ;; Enable it
  (org-super-agenda-mode)

  ;; Toggle org links display
  (setq org-link-descriptive t)

  ;; Set agenda custom commands
  (setq org-agenda-custom-commands
        '(
          ("a" "Agenda"
           ((agenda "" ((org-agend-span 'day)
                        (org-super-agenda-groups
                         '(
                           (:name "Today"
                            :time-grid t
                            :date today
                            :scheduled today
                            :order 1)
                           (:discard (:anything))))))
            (tags (concat "wk" (format-time-string "%V")) ((org-agenda-overriding-header  (concat "--\nToDos Week " (format-time-string "%V")))
                                                           (org-super-agenda-groups
                                                            '((:discard (:deadline t))
                                                              (:discard (:todo ("DONE" "CANCELED" "WAITING")))
                                                              (:discard (:not (:todo t)))))))

            (alltodo "" ((org-agenda-overriding-header "")
                         (org-agenda-prefix-format '(
                                                     (agenda . "%7c %4e %?-12t %s")
                                                     (todo . " %-8c [%-4e] %?-12t %s")
                                                     (tags   . " %-22c")
                                                     (search . " %-12c")))

                         (org-super-agenda-groups
                          '(
                            (:log t)
                            (:discard (:tag "inactive"))
                            (:discard (:tag "jira"))
                            (:name "Started"
                             :todo ("STARTED")
                             :order 1)
                            (:name "Quickies"
                             :and (:effort< "0:15" :not (:tag "recurring")))

                            (:name "This Week"
                             :auto-property "week")

                            (:name "Overdue"
                             :deadline past
                             :scheduled past
                             :order 2)
                            (:name "Soon"
                             :deadline feature
                             :scheduled feature
                             :order 2)
                            (:name "Waiting"
                             :todo "WAITING"
                             :order 2)
                            (:name "To refile"
                             :category "inbox"
                             :todo ""
                             :order 10)
                            (:name "Next to do"
                             :todo "NEXT"
                             :order 20)
                            ;; (:name "WIP"
                            ;;  :todo ("WIP")
                            ;;  :order 40)
                            (:discard (:anything))))))
            (alltodo "" ((org-agenda-overriding-header "")
                         (org-agenda-hide-tags-regexp "project\\|ticket\\|active")
                         (org-agenda-prefix-format '((todo . " %-8c [%-4e] %?-12t %s")))
                         (org-super-agenda-groups
                          '(
                            (:log t)
                            (:discard (:tag "inactive"))
                            (:name "Projects"
                             :auto-property "project"
                             :todo t
                             :order 1)
                            (:discard (:anything))))))))


          ("r" "Resonance"
           ((alltodo "" ((org-agenda-overriding-header "Resonance calendar")
                         (org-super-agenda-groups
                          '(
                            (:discard (:not (:tag ("video" "article"))))
                            (:and (:tag))
                            (:auto-parent t)
                            (:discard (:anything)))))))))))


#+end_src
** org-refile
Some extras copied from Doom Emacs:

#+begin_src emacs-lisp
(defun +org-headline-avy ()
  "TODO"
  (require 'avy)
  (save-excursion
    (when-let* ((org-reverse-note-order t)
                (pos (avy-with avy-goto-line (avy-jump (rx bol (1+ "*") (1+ blank))))))
      (when (integerp (car pos))
        ;; If avy is aborted with "C-g", it returns `t', so we know it was NOT
        ;; aborted when it returns an int. If it doesn't return an int, we
        ;; return nil.
        (copy-marker (car pos))))))

(defun +org/goto-visible ()
  "TODO"
  (interactive)
  (goto-char (+org-headline-avy)))
#+end_src

Now settings for ~org-refile~:

#+begin_src emacs-lisp
(with-eval-after-load 'org
  ;; Refiling
 (setq org-refile-use-cache t)
 (setq org-refile-targets '((nil :maxlevel . 9)
                            (org-agenda-files :maxlevel . 9)))

  ;; Allow refile to create parent tasks with confirmation
  (setq org-refile-allow-creating-parent-nodes 'confirm)
  (setq org-refile-use-outline-path 'file)       ; Show filename for refiling
  (setq org-outline-path-complete-in-steps nil)  ; Refile in a single go

  ;; Exclude DONE state tasks from refile targets
  (defun dorneanu/verify-refile-target ()
    "Exclude todo keywords with a done state from refile targets."
    (not (member (nth 2 (org-heading-components)) org-done-keywords)))
  (setq org-refile-target-verify-function 'dorneanu/verify-refile-target)

  ;; Some custom elisp functions
  (defun dorneanu/org-refile-anywhere (&optional goto default-buffer rfloc msg)
    "A version of `org-refile' which allows refiling to any subtree."
    (interactive "P")
    (let ((org-refile-target-verify-function))
      (org-refile goto default-buffer rfloc msg)))

  (defun dorneanu/org-agenda-refile-anywhere (&optional goto rfloc no-update)
    "A version of `org-agenda-refile' which allows refiling to any subtree."
    (interactive "P")
    (let ((org-refile-target-verify-function))
      (org-agenda-refile goto rfloc no-update)))

  ;; These are from Doom Emacs: https://github.com/doomemacs/doomemacs/blob/master/modules/lang/org/autoload/org-refile.el
  (defun +org/refile-to-current-file (arg &optional file)
    "Refile current heading to elsewhere in the current buffer.
If prefix ARG, copy instead of move."
    (interactive "P")
    (let ((org-refile-targets `((,file :maxlevel . 10)))
          (org-refile-use-outline-path t)
          (org-refile-keep arg)
          current-prefix-arg)
      (call-interactively #'org-refile)))

  (defun +org/refile-to-visible ()
    "Refile current heading as first child of visible heading selected with Avy."
    (interactive)
    (when-let (marker (+org-headline-avy))
      (let* ((buffer (marker-buffer marker))
             (filename
              (buffer-file-name (or (buffer-base-buffer buffer)
                                    buffer)))
             (heading
              (org-with-point-at marker
                (org-get-heading 'no-tags 'no-todo)))
             ;; Won't work with target buffers whose filename is nil
             (rfloc (list heading filename nil marker))
             (org-after-refile-insert-hook (cons #'org-reveal org-after-refile-insert-hook)))
        (org-refile nil nil rfloc))))

  (defun +org/refile-to-last-location (arg)
    "Refile current heading to the last node you refiled to.
If prefix ARG, copy instead of move."
    (interactive "P")
    (or (assoc (plist-get org-bookmark-names-plist :last-refile)
               bookmark-alist)
        (user-error "No saved location to refile to"))
    (let ((org-refile-keep arg)
          (completing-read-function
           (lambda (_p _coll _pred _rm _ii _h default &rest _)
             default)))
      (org-refile)))

  ;; Save all buffers after refilling
  (advice-add 'org-refile :after (lambda (&rest _) (org-save-all-org-buffers))))
#+end_src
** org-modern
#+begin_src emacs-lisp
(use-package org-modern
  :straight t
  :hook (org-mode . org-modern-mode)
  :hook (org-agenda-finalize . org-modern-agenda)
  ;; :custom-face
  ;; ;; force monospaced font for tags
  ;; (org-modern-tag ((t (:inherit org-verbatim :foreground "black" :background "lightgray" :box "black"))))
  :custom
  (org-modern-star '("◉" "○" "◈" "◇" "✳" "◆" "✸" "▶"))
  (org-modern-table-vertical 5)
  (org-modern-table-horizontal 2)
  (org-modern-list '((?+ . "➤") (?- . "–") (?* . "•")))
  (org-modern-block-fringe nil)
  (org-modern-checkbox nil) ;; not that interesting! maybe it depends on the used font
  (org-modern-todo-faces
   ;; tweak colors, and force it to be monospaced, useful when using `mixed-pitch-mode'.
   '(("idea" . (:inherit org-verbatim :weight semi-bold :foreground "white" :background "goldenrod"))
     ("next" . (:inherit org-verbatim :weight semi-bold :foreground "white" :background "indianred1"))
     ("strt" . (:inherit org-verbatim :weight semi-bold :foreground "white" :background "orangered"))
     ("wait" . (:inherit org-verbatim :weight semi-bold :foreground "white" :background "coral"))
     ("kill" . (:inherit org-verbatim :weight semi-bold :foreground "white" :background "darkgreen"))
     ("proj" . (:inherit org-verbatim :weight semi-bold :foreground "white" :background "limegreen"))
     ("hold" . (:inherit org-verbatim :weight semi-bold :foreground "white" :background "orange"))
     ("done" . (:inherit org-verbatim :weight semi-bold :foreground "black" :background "lightgray")))))
#+end_src

** org-capture
#+begin_src emacs-lisp
  (use-package org-capture
    :after org
    :straight (:type built-in)
    :bind (("C-c _" . org-capture))
    :preface
    (defvar my/org-appointment
      (concat "* TODO %^{Appointment} :appt:\n"
              "SCHEDULED: %t\n") "Template for appointment task.")
    (defvar my/org-active-task-template
      (concat "* NEXT %^{Task}\n"
              ":PROPERTIES:\n"
              ":Effort: %^{effort|1:00|0:05|0:15|0:30|2:00|4:00}\n"
              ":CAPTURED: %<%Y-%m-%d %H:%M>\n"
              ":END:") "Template for basic task.")
    (defvar my/org-meeting
      (concat "* MEETING %^{Meeting}\n"
              "SCHEDULED: %t\n") "Template for meetings")

    (defvar my/org-weekly
      (concat "* wk" (format-time-string "%V") "       " ":wk" (format-time-string "%V") ":")
      "Template for weeklies")

    (defvar my/org-basic-task-template
      (concat "* TODO %^{Task}\n"
              ":PROPERTIES:\n"
              ":Effort: %^{effort|1:00|0:05|0:15|0:30|2:00|4:00}\n"
              ":CAPTURED: %<%Y-%m-%d %H:%M>\n"
              ":END:") "Template for basic task.")
    :custom
    (org-capture-templates
     `(
       ("a" "Appointment" entry (file+headline "inbox.org" "Appointments"),
        my/org-appointment
        :empty-lines 1)

       ("m" "Meeting" entry (file+headline "inbox.org" "Meetings"),
        my/org-meeting
        :empty-lines 1)

       ("M" "Active meeting" entry (file+headline "inbox.org" "Meetings")
        "* MEETING with %? :meeting:\n%U" :clock-in t :clock-resume t :empty-lines 1)

       ("t" "New Task")
       ("ta" "Active" entry (file+headline "inbox.org" "Active"),
        my/org-active-task-template
        :empty-lines 1
        :clock-in t)
       ("tb" "Backlog" entry (file+headline "inbox.org" "Backlog"),
        my/org-basic-task-template
        :empty-lines 1)

       ("w" "Weekly" entry (file+headline "inbox.org" "Weeklies"),
        my/org-weekly
        :empty-lines 1))))
#+end_src

#+results:
: org-capture

** org-timeblock                                                       :todo:
#+begin_src emacs-lisp
(use-package org-timeblock
  :straight t
  :after (org org-agenda)
  :bind (:map org-timeblock-mode-map
              ("M-n" . org-timeblock-forward-block)
              ("M-p" . org-timeblock-backward-block)
              ("M-s" . org-timeblock-schedule)
              ("M-c i" . org-timeblock-clock-in)
              ("M-c t" . org-timeblock-todo)
              ("r" . org-timeblock-redraw-buffers)
              ("s" . org-timeblock-switch-view))
  :config
  (setq org-timeblock-n-days-view 2
        org-timeblock-scale-options '(8 . 17)))

(defun dorneanu/org-setup-org-timeblock()
  (interactive)
  (add-hook `org-agenda-mode-hook #'org-timeblock-redraw-buffers)
  (split-window-right)
  (balance-windows)
  (other-window 1)
  (org-timeblock))
#+end_src
** exporters
*** hugo
#+begin_src emacs-lisp
(use-package ox-hugo
  :after org
  :straight t)
#+end_src
** org-roam
#+begin_src emacs-lisp
(require 'ox-hugo)
(use-package org-roam
  :straight t
  :custom
  (org-roam-directory (getenv "ORG_ROAM_DIRECTORY"))
  (org-roam-node-display-template (concat "${title:*} " (propertize "${tags:20}" 'face 'org-tag)))
  ;; (org-roam-directory (expand-file-name "org/roam/" (getenv "HOME")))
  ;; (org-roam-completion-everywhere t)
  :config
  (org-roam-db-autosync-mode 1)
  (setq org-roam-capture-templates
        '(("d" "default" plain
           "%?"
           :if-new (file+head "topics/${slug}.org" "#+title: ${title}\n")
           :unnarrowed t)
          ("j" "Journal" plain "%?"
           :if-new (file+head "journal/%<%Y-%m-%d>.org"
                    "#+title: %<%Y-%m-%d>\n#+filetags: journal\n#+date: %<%Y-%m-%d>\n")
           :immediate-finish t
           :unnarrowed t)
          ("b" "book" plain "%?"
           :if-new
           (file+head "books/${slug}.org" "#+title: ${title}\n#+filetags: book\n")
           :immediate-finish t
           :unnarrowed t)
          ;; Idea from https://daryl.wakatara.com/emacs-gtd-flow-evolved/
          ("r" "Rez" plain "%?"
           :target (file+head "rez/%<%Y>/${slug}.org"
                    "#+TITLE: ${title}
      ,#+CREATED: %u

      ,* ${title}
      :properties:
      :url:
      :end:

      ,* Actions
      ,* Quotes
      ,* Notes
      ") :unnarrowed t)
          ("x" "Blog" plain "%?"
           :if-new (file+head "blog/%<%Y-%m-%d>-${slug}.org" "#+SETUPFILE: setup.org\n#+TITLE: ${title}\n#+CREATED: %<%Y-%m-%d>\n#+HUGO_DRAFT: true\n\n")
           :unnarrowed t)
          ))
  )
#+end_src
*** org-roam-dailies
#+begin_src emacs-lisp
(use-package org-roam-dailies
  :straight (:type built-in)
  :after org
  :bind (("M-g rj" . org-roam-dailies-goto-today))
  :config
  (setq org-roam-dailies-directory "journal/")
  (setq org-roam-dailies-capture-templates
        '(("d" "default" entry
           "* %?"
           :if-new (file+head "%<%Y-%m-%d>.org"
                              "#+TITLE: %<%Y-%m-%d>\n#+DATE: %<%Y-%m-%d>\n#+FILETAGS: journal")))))

#+end_src

#+results:
: org-roam-dailies-goto-today

*** consult-org-roam
#+begin_src emacs-lisp
(use-package consult-org-roam
  :straight t
  :bind (("M-g rn" . consult-org-roam-file-find)
         ("M-g rs" . consult-org-roam-search))
  :custom
  (consult-org-roam-grep-func #'consult-ripgrep)
  (consult-org-roam-buffer-narrow-key ?r) ; custom narrow key for `consult-buffer'
  (consult-org-roam-buffer-after-buffers t)
  :config
  (consult-org-roam-mode 1)
  ;; Eventually suppress previewing for certain functions
  (consult-customize consult-org-roam-forward-links :preview-key (kbd "M-.")))
#+end_src

** org-babel
#+begin_src emacs-lisp
;; Install ob-go
(use-package ob-go
  :straight t
  :defer t)

(use-package jq-mode
  :straight t
  :defer t)

(use-package ob-mermaid
  :straight t
  :defer t)

(setq org-src-preserve-indentation t)
(setq org-src-tab-acts-natively nil)
(org-babel-do-load-languages
 'org-babel-load-languages
 '((sql . t)
   (go . t)
   (plantuml . t)
   (emacs-lisp . t)
   (mermaid . t)
   (shell . t)))
#+end_src
** org-drawio
#+begin_src emacs-lisp
(use-package org-drawio
  :commands (org-drawio-add
             org-drawio-open)
  :custom ((org-drawio-input-dir "./draws")
           (org-drawio-output-dir "./images")
           (org-drawio-output-page "0")
           ;; set to t, if you want to crop the image.
           (org-drawio-crop nil)))
#+end_src
** counsel-org-tag
Use counsel-org-tag (I couldn't find any alternative for consult):

#+begin_src emacs-lisp
(global-set-key [remap org-set-tags-command] #'counsel-org-tag)
#+end_src
** packages
*** org-re-reveal
Use [[https://oer.gitlab.io/org-re-reveal/][org-re-reveal]] for creating presentations using [[https://revealjs.com/][revealjs]].
#+begin_src emacs-lisp
(use-package org-re-reveal
   :straight t
   :defer t)
#+end_src
*** org-present
#+begin_src emacs-lisp
(use-package org-present
  :straight t
  :commands (org-present)
  :config
  (setq  org-present-startup-folded t)
  (setq org-present-mode-hook
        (list (lambda ()
                (blink-cursor-mode 0)
                (org-present-big)
                (org-overview)
                ;; (org-display-inline-images)
                ;; (org-present-hide-cursor)
                (org-present-read-only)
                (display-line-numbers-mode 0)
                ;; (org-latex-preview '(16))
                ;; TODO ^somehow this stucks at running LaTeX^
                (setq-local olivetti-body-width 70)
                (olivetti-mode 1))))
  (setq org-present-mode-quit-hook
        (list (lambda ()
                (blink-cursor-mode 1)
                (org-present-small)
                ;; (org-remove-inline-images)
                (org-present-show-cursor)
                (org-present-read-write)
                (display-line-numbers-mode 1)
                (olivetti-mode -1)
                (setq-local olivetti-body-width (default-value 'olivetti-body-width))))))
#+end_src

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (26417 39284 13743 0) :init (26417 39284 13740 0) :init-secs (0 0 4529 0) :use-package-secs (0 0 21692 0) :config (26417 39284 13726 0) :config-secs (0 0 4511 0)))


** custom elisp
*** Enter clock data manually
From https://mbork.pl/2023-03-20_Manually_entering_clocking_data

#+begin_src emacs-lisp
(defun dorneanu/org-clock-enter-manually (begin end)
  "Enter a clock item manually."
  (interactive (list (org-read-date t t) (org-read-date t t)))
  (save-excursion
    (org-clock-find-position nil)
    (insert-before-markers-and-inherit "\n")
    (backward-char 1)
    (insert-and-inherit org-clock-string " ")
    (org-insert-time-stamp begin t t)
    (org-insert-time-stamp end t t "--")
    (org-evaluate-time-range t)))
#+end_src
*** Auto clock-in when task is started
#+begin_src emacs-lisp
;; From https://github.com/svetlyak40wt/dot-emacs/blob/master/.emacs.d/lib/org-auto-clock.el
;; Auto clock-in when task is marked STARTED
(defun wicked/org-clock-in-if-starting ()
  "Clock in when the task is marked STARTED."
  (when (and (string= org-state "STARTED")
             (not (string= org-last-state org-state)))
    (org-clock-in)))

(defun wicked/org-clock-out-if-waiting ()
  "Clock out when the task is marked WAITING or WIP (Work in Progress)."
  (when (and (or (string= org-state "WAITING")
                 (string= org-state "WIP"))
             (equal (marker-buffer org-clock-marker) (current-buffer))
             (< (point) org-clock-marker)
             (> (save-excursion (outline-next-heading) (point))
                org-clock-marker)
             (not (string= org-last-state org-state)))
    (org-clock-out)))

(with-eval-after-load 'org
  (add-hook 'org-after-todo-state-change-hook #'wicked/org-clock-in-if-starting)
  (defadvice org-clock-in (after wicked activate)
    "Set this task's status to 'STARTED'."
    (org-todo "STARTED"))
  (add-hook 'org-after-todo-state-change-hook #'wicked/org-clock-out-if-waiting))
#+end_src
*** Create ORG heading from clipboard link
#+begin_src emacs-lisp
(cl-defun dorneanu/org-insert-link-from-clipboard (&optional (url (org-web-tools--get-first-url)))
  "Extend org-web-tools to create to take URL from clipboard or kill-ring"
  (interactive)
  (require 'org-web-tools)
  (if-let ((dom (plz 'get url :as (lambda ()
                                    (libxml-parse-html-region (point-min) (point-max)))))
           (title (cl-caddr (car (dom-by-tag dom 'title)))))
      (insert (format "%s ◦ [[%s][%s]]" (format-time-string "%Y-%m-%d") url (org-web-tools--cleanup-title title)))))
#+end_src

** misc
*** org-download
Insert images easily into ORG mode files

#+begin_src emacs-lisp
(use-package org-download
  :straight t
  :after org
  :hook (org-mode . org-download-enable))

;; Drag-and-drop to `dired`
(add-hook 'dired-mode-hook 'org-download-enable)
#+end_src
*** org-web-tools
#+begin_src emacs-lisp
(use-package org-web-tools
  :straight t
  :config
  (setq org-web-tools-pandoc-sleep-time 10))
#+end_src

* Keybindings
:properties:
:header-args:emacs-lisp: :tangle ~/.config/minimal-emacs/post-init.el
:end:
** navigation
Now some keybindings for the ~Super_L~ key:

#+begin_src emacs-lisp
;; lower case “s” is for super Use windows key (super) for window navigation
(global-set-key (kbd "s-h") #'windmove-left)
(global-set-key (kbd "s-l") #'windmove-right)
(global-set-key (kbd "s-k") #'windmove-up)
(global-set-key (kbd "s-j") #'windmove-down)

;; Tab navigation
(global-set-key (kbd "s-.") #'tab-next)
(global-set-key (kbd "s-,") #'tab-previous)
;; (global-set-key (kbd "s-1") #'tab-line-switch-to-prev-tab)
;; (global-set-key (kbd "s-2") #'tab-line-switch-to-next-tab)
#+end_src

Some keybindings for *paragraphs*:

#+begin_src emacs-lisp
  (global-set-key (kbd "s-i") #'forward-paragraph)
  (global-set-key (kbd "s-u") #'backward-paragraph)
#+end_src

For buffers:
#+begin_src emacs-lisp
(keymap-global-set "C-c b h" #'previous-buffer)
(keymap-global-set "C-c b l" #'next-buffer)
#+end_src
** globals
Disable keyboard-escape-quit as it always closes windows in a nasty way:

#+begin_src emacs-lisp
;; Don't forget to handle minibuffer with "minibuffer-keyboard-quit".
(global-set-key (kbd "<escape>") 'keyboard-quit)

;; Avoid entering the ~repeat-complex-cammand~ when quiting everything with ~C-x~.
(global-unset-key (kbd "C-x <escape> <escape>")) ; repeat-complex-command

#+end_src

Something I use a lot:

#+begin_src emacs-lisp
;; (bind-key "C-c d" 'delete-pair)
#+end_src

*** MacOS
Some keybindings for MacOS
#+begin_src emacs-lisp
(setq mac-command-modifier      'super
      ns-command-modifier       'meta
      mac-option-modifier       'super
      ns-option-modifier        'super
      mac-right-option-modifier 'none
      ns-right-option-modifier  'none)
#+end_src
*** toggles

#+begin_src emacs-lisp
(keymap-global-set "M-g t o" #'olivetti-mode)
(keymap-global-set "M-g t t b" #'tab-bar-mode)
(keymap-global-set "M-g t t n" #'global-tab-line-mode)
(keymap-global-set "M-g t f" #'focus-mode)
(keymap-global-set "M-g t h" #'highlight-indent-guides-mode)
(keymap-global-set "M-g t n" #'display-line-numbers-mode)
(keymap-global-set "M-g t F" #'fringe-mode)
(keymap-global-set "M-g t v" #'visual-line-fill-column-mode)
#+end_src

*** jumps
#+begin_src emacs-lisp
(keymap-global-set "C-x j c" #'avy-goto-char)
(keymap-global-set "C-x j w" #'avy-goto-word-1)
(keymap-global-set "C-x j t" #'centaur-tabs-ace-jump)
;; This doesn't fit here
(keymap-global-set "M-j" #'crux-top-join-line)
#+end_src

*** Change from horizotanl split to vertical split
#+begin_src emacs-lisp
;; https://stackoverflow.com/questions/14881020/emacs-shortcut-to-switch-from-a-horizontal-split-to-a-vertical-split-in-one-move
(defun toggle-window-split ()
  (interactive)
  (if (= (count-windows) 2)
      (let* ((this-win-buffer (window-buffer))
         (next-win-buffer (window-buffer (next-window)))
         (this-win-edges (window-edges (selected-window)))
         (next-win-edges (window-edges (next-window)))
         (this-win-2nd (not (and (<= (car this-win-edges)
                     (car next-win-edges))
                     (<= (cadr this-win-edges)
                     (cadr next-win-edges)))))
         (splitter
          (if (= (car this-win-edges)
             (car (window-edges (next-window))))
          'split-window-horizontally
        'split-window-vertically)))
    (delete-other-windows)
    (let ((first-win (selected-window)))
      (funcall splitter)
      (if this-win-2nd (other-window 1))
      (set-window-buffer (selected-window) this-win-buffer)
      (set-window-buffer (next-window) next-win-buffer)
      (select-window first-win)
      (if this-win-2nd (other-window 1))))))

(global-set-key (kbd "C-x |") 'toggle-window-split)
#+end_src

**** MacOS
#+begin_src emacs-lisp
(setq mac-command-modifier      'super
      ns-command-modifier       'meta
      mac-option-modifier       'super
      ns-option-modifier        'super
      mac-right-option-modifier 'none
      ns-right-option-modifier  'none)
#+end_src

**** toggles

#+begin_src emacs-lisp :results none
(keymap-global-set "M-g t o" #'olivetti-mode)
(keymap-global-set "M-g t t b" #'tab-bar-mode)
(keymap-global-set "M-g t t n" #'global-tab-line-mode)
(keymap-global-set "M-g t F" #'focus-mode)
(keymap-global-set "M-g t h" #'highlight-indent-guides-mode)
(keymap-global-set "M-g t H" #'hl-line-mode)
(keymap-global-set "M-g t n" #'display-line-numbers-mode)
(keymap-global-set "M-g t f" #'fringe-mode)
(keymap-global-set "M-g t v" #'visual-line-fill-column-mode)
#+end_src

**** COMMENT inserts
#+begin_src emacs-lisp
(+map!
 ;; ====== Inserts ======
 "ii"     #'org-download-clipboard
 "ioc"    #'dorneanu/org-insert-link-from-clipboard
 "iot"    #'counsel-org-tag)
#+end_src

**** hydras
#+begin_src emacs-lisp
(keymap-global-set "M-g t . w" #'+window-adjust-size-transient)
#+end_src
**** jumps
#+begin_src emacs-lisp
(keymap-global-set "C-x j c" #'avy-goto-char)
(keymap-global-set "C-x j w" #'avy-goto-word-1)
(keymap-global-set "C-x j t" #'centaur-tabs-ace-jump)
;; This doesn't fit here
(keymap-global-set "M-j" #'crux-top-join-line)
#+end_src

**** projects
#+begin_src emacs-lisp
(keymap-global-set "M-g 0" #'dirvish-side)
(keymap-global-set "C-M-0" #'indent-region)
#+end_src

**** COMMENT searches
#+begin_src emacs-lisp
(+map!
 ;; ====== Searches ======
 "srd"   #'my/rg-dotemacs
 "srh"   #'my/rg-org-roam-directory-huberman
 "sro"   #'my/rg-org-roam-directory)
#+end_src
**** COMMENT tabs
#+begin_src emacs-lisp
(+map!
 ;; ====== Tabs ======
 "TAB SPC"   #'tab-bar-switch-to-recent-tab)
#+end_src
**** COMMENT evil-org
#+begin_src emacs-lisp
(with-eval-after-load 'evil-org-agenda
  ;; Disable SPC key in org-agenda
  ;; (define-key org-agenda-mode-map (kbd "SPC") nil)
  (evil-define-key 'motion org-agenda-mode-map (kbd "SPC") nil))
#+end_src
**** COMMENT org-mode
#+begin_src emacs-lisp
(with-eval-after-load 'org
  (define-prefix-command 'dorneanu/my-org-mode-map)
  (define-key org-mode-map (kbd "C-c o") 'dorneanu/my-org-mode-map)

  (defun dorneanu/my-org-key (key)
    "Create a key sequence for org-mode custom bindings."
    (kbd (concat "C-c o " key)))

  ;; Basic structure
  (define-key org-mode-map (dorneanu/my-org-key "i h") #'org-insert-heading)
  (define-key org-mode-map (dorneanu/my-org-key "i s") #'org-insert-subheading)
  (define-key org-mode-map (dorneanu/my-org-key "i t") #'org-insert-todo-heading)
  (define-key org-mode-map (dorneanu/my-org-key "i c") #'dorneanu/org-insert-link-from-clipboard)

  ;; Clocking
  (define-key org-mode-map (dorneanu/my-org-key "c i") #'org-clock-in)
  (define-key org-mode-map (dorneanu/my-org-key "c o") #'org-clock-out)
  (define-key org-mode-map (dorneanu/my-org-key "c m") #'dorneanu/org-clock-enter-manually)

  ;; Navigation
  (define-key org-mode-map (dorneanu/my-org-key "n n") #'org-next-visible-heading)
  (define-key org-mode-map (dorneanu/my-org-key "n p") #'org-previous-visible-heading)

  ;; Todo state
  (define-key org-mode-map (dorneanu/my-org-key "t t") #'org-todo)
  (define-key org-mode-map (dorneanu/my-org-key "t d") #'org-deadline)
  (define-key org-mode-map (dorneanu/my-org-key "t s") #'org-schedule)

  ;; Tags and properties
  (define-key org-mode-map (dorneanu/my-org-key ":") #'org-set-tags-command)
  (define-key org-mode-map (dorneanu/my-org-key "p") #'org-set-property)

  ;; Formatting
  ;; (define-key org-mode-map (dorneanu/my-org-key "b") #'org-bold)
  ;; (define-key org-mode-map (dorneanu/my-org-key "i") #'org-italic)
  ;; (define-key org-mode-map (dorneanu/my-org-key "u") #'org-underline)
  (define-key org-mode-map (dorneanu/my-org-key "ff") #'org-emphasize)

  ;; Export
  (define-key org-mode-map (dorneanu/my-org-key "e e") #'org-export-dispatch)

  ;; Misc
  (define-key org-mode-map (dorneanu/my-org-key "a") #'org-archive-subtree)
  (define-key org-mode-map (dorneanu/my-org-key "r") #'org-refile)
  (define-key org-mode-map (dorneanu/my-org-key "l") #'org-insert-link))
#+end_src

* Misc
:properties:
:header-args:emacs-lisp: :tangle ~/.config/minimal-emacs/post-init.el
:end:
#+begin_src emacs-lisp
  ;; Hide warnings and display only errors
  (setq warning-minimum-level :error)

  (use-package which-key
    :ensure t
    :config
    (which-key-mode))

  (pixel-scroll-precision-mode)

  (display-time-mode)
  (show-paren-mode +1)  ; Paren match highlighting
  (winner-mode 1)
  (pixel-scroll-precision-mode 1)

  ;; Configure Emacs to ask for confirmation before exiting
  (setq confirm-kill-emacs 'y-or-n-p)

  (use-package uniquify
    :straight (:type built-in)
    :custom
    (uniquify-buffer-name-style 'reverse)
    (uniquify-separator "•")
    (uniquify-after-kill-buffer-p t)
    (uniquify-ignore-buffers-re "^\\*"))

  ;; Window dividers separate windows visually. Window dividers are bars that can
  ;; be dragged with the mouse, thus allowing you to easily resize adjacent
  ;; windows.
  ;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Window-Dividers.html
  (add-hook 'after-init-hook #'window-divider-mode)
#+end_src
** crux
Various useful utilities

#+begin_src emacs-lisp
(use-package crux
  :straight t
  :bind (("C-x C-d" . crux-duplicate-current-line-or-region)
         ("C-c u" . crux-view-url)
         ("C-c f r" . crux-rename-buffer-and-file)
         ("C-c f d" . crux-delete-file-and-buffer)
         ("C-x C-b" . create-scratch-buffer)
         ("s-k"   . crux-kill-whole-line)
         ;;("s-o"   . crux-smart-open-line-above)
         ("C-a"   . crux-move-beginning-of-line)
         ("C-k"   . crux-kill-whole-line)
         ([(shift return)] . crux-smart-open-line)
         ([(control shift return)] . crux-smart-open-line-above))
  :config
  ;; No need to create a new scratch buffer every time
  ;; Just use one. 
  (defun create-scratch-buffer ()
    "Create a scratch buffer."
    (interactive)
    (switch-to-buffer (get-buffer-create "*scratch*"))
    (lisp-interaction-mode))

  (crux-with-region-or-buffer indent-region)
  (crux-with-region-or-buffer untabify)
  (crux-with-region-or-point-to-eol kill-ring-save)
  (defalias 'rename-file-and-buffer #'crux-rename-file-and-buffer))
#+end_src
** link-hint
#+begin_src emacs-lisp
(use-package link-hint
  :straight t
  :demand t
  :bind (("C-c l o" . link-hint-open-link)
         ("C-c l c" . link-hint-copy-link)))
#+end_src

* Helpful
:properties:
:header-args:emacs-lisp: :tangle ~/.config/minimal-emacs/post-init.el
:end:
** leo
#+begin_src emacs-lisp
  (use-package leo
    :straight t
    :defer t
    :bind (("M-g .l" . leo-translate-word)))
#+end_src
** dict.cc
#+begin_src emacs-lisp
  (use-package dictcc
    :straight t
    :defer t
    :init
    :bind (("M-g .d" . dictcc)))
#+end_src
** webjump
#+begin_src emacs-lisp
;; From https://github.com/abougouffa/minemacs/blob/main/core/me-lib-extra.el
(defvar +webjump-read-string-initial-query nil)

(defun +webjump-read-string-with-initial-query (prompt)
  (let ((input (read-string (concat prompt ": ") +webjump-read-string-initial-query)))
    (unless (webjump-null-or-blank-string-p input) input)))

;;;###autoload
(defun +webjump ()
  "Like `webjump', with initial query filled from `+region-or-thing-at-point'."
  (interactive)
  (require 'webjump)
  (let ((+webjump-read-string-initial-query (+region-or-thing-at-point)))
    (cl-letf (((symbol-function 'webjump-read-string) #'+webjump-read-string-with-initial-query))
      (webjump))))

(use-package webjump
  :bind (("M-g /" . +webjump))
  :custom
  (webjump-sites
   '(("Emacs Wiki"    . [simple-query "www.emacswiki.org" "www.emacswiki.org/cgi-bin/wiki/" ""])
     ("DuckDuckGo"    . [simple-query "duckduckgo.com" "duckduckgo.com/?q=" ""])
     ("Qwant"         . [simple-query "www.qwant.com" "www.qwant.com/?q=" ""])
     ("Ecosia"        . [simple-query "www.ecosia.org" "www.ecosia.org/search?q=" ""])
     ("Brave"         . [simple-query "search.brave.com" "search.brave.com/search?q=" ""])
     ("Bing"          . [simple-query "www.bing.com" "www.bing.com/search?q=" ""])
     ("Yahoo"         . [simple-query "www.yahoo.com" "search.yahoo.com/search?p=" ""])
     ("Google"        . [simple-query "www.google.com" "www.google.com/search?q=" ""])
     ("Google Maps"   . [simple-query "www.google.com" "www.google.com/maps?q=" ""])
     ("Google Images" . [simple-query "www.google.com" "www.google.com/images?q=" ""])
     ("Google Groups" . [simple-query "groups.google.com" "groups.google.com/groups?q=" ""])
     ("StackOverflow" . [simple-query "stackoverflow.com" "stackoverflow.com/search?q=" ""])
     ("GitHub Repo"   . [simple-query "github.com" "github.com/search?type=repositories&q=" ""])
     ("GitHub Code"   . [simple-query "github.com" "github.com/search?type=code&q=" ""])
     ("WolframAlpha"  . [simple-query "wolframalpha.com" "wolframalpha.com/input/?i=" ""])
     ("MDN"           . [simple-query "developer.mozilla.org" "developer.mozilla.org/search?q=" ""])
     ("Youtube"       . [simple-query "www.youtube.com" "www.youtube.com/results?search_query=" ""])
     ("Reddit"        . [simple-query "www.reddit.com" "www.reddit.com/search/?q=" ""])
     ("Wikipedia"     . [simple-query "wikipedia.org" "wikipedia.org/wiki/" ""]))))
#+end_src

** wordreference
#+begin_src emacs-lisp
  (use-package wordreference
    :straight t
    :defer t
    :bind (:map wordreference-mode-map
                ("S" . wordreference-switch-source-target-and-search))
    :config
    (setq
     wordreference-source-lang "en"
     wordreference-target-lang "de")
    :bind (("M-g .w" . wordreference-search)))

  (add-hook 'wordreference-mode-hook #'turn-off-evil-mode)
#+end_src
** password-store
#+begin_src emacs-lisp
  (use-package auth-source
    :straight t)
  (use-package password-store
    :straight t)
  (use-package pass
    :straight t)
#+end_src
** focus-mode
#+begin_src emacs-lisp
  (use-package focus
    :straight t)
#+end_src
** COMMENT Screenshots
*** emacsshot
From https://gitlab.com/marcowahl/emacsshot
#+begin_src emacs-lisp
  (use-package emacsshot
    :straight t
    :bind(("C-x a s f" . my/emacsshot-snap-frame)
          ("C-x a s w" . my/emacsshot-snap-window))
    :config
    (defun copy-file-content-to-clipboard (file-path)
      (shell-command (format "xclip -selection clipboard -t image/png -i %s" file-path)))
    (defun my/emacsshot-snap-window ()
      (interactive)
      (emacsshot-snap-window)
      (copy-file-content-to-clipboard "~/emacsshot.png")
      )
    (defun my/emacsshot-snap-frame ()
      (interactive)
      (emacsshot-snap-frame)
      (copy-file-content-to-clipboard "~/emacsshot.png")
      ))
#+end_src

** Misc
*** Keycast
In case I am sharing my screen with people and I want to show which
functions are called on my keystrokes since I don’t exactly use
standard keybindings.

#+begin_src emacs-lisp
  (use-package keycast
    :defer t
    :straight t
    :config
    (define-minor-mode keycast-mode
      "Show current command and its key binding in the mode line."
      :global t
      (if keycast-mode
          (add-hook 'pre-command-hook 'keycast--update t)
        (remove-hook 'pre-command-hook 'keycast--update)))
    (add-to-list 'global-mode-string '("" mode-line-keycast " ")))
#+end_src
*** wakatime
#+begin_src emacs-lisp
  (use-package wakatime-mode
    :straight t
    :config
    (setq
     wakatime-python-bin "~/.pyenv/versions/emacs/bin/python"
     wakatime-cli-path "~/.pyenv/versions/emacs/bin/wakatime")
    (global-wakatime-mode))
#+end_src
** Hydra
Some inspirations from https://github.com/rememberYou/.emacs.d/blob/master/config.org
#+begin_src emacs-lisp
  (use-package hydra
    :straight t)

    
  (use-package major-mode-hydra
    :straight t
    :after hydra
    :preface
    (defun with-alltheicon (icon str &optional height v-adjust face)
      "Display an icon from all-the-icon."
      (s-concat (all-the-icons-alltheicon icon :v-adjust (or v-adjust 0) :height (or height 1) :face face) " " str))

    (defun with-faicon (icon str &optional height v-adjust face)
      "Display an icon from Font Awesome icon."
      (s-concat (all-the-icons-faicon icon ':v-adjust (or v-adjust 0) :height (or height 1) :face face) " " str))

    (defun with-fileicon (icon str &optional height v-adjust face)
      "Display an icon from the Atom File Icons package."
      (s-concat (all-the-icons-fileicon icon :v-adjust (or v-adjust 0) :height (or height 1) :face face) " " str))

    (defun with-octicon (icon str &optional height v-adjust face)
      "Display an icon from the GitHub Octicons."
      (s-concat (all-the-icons-octicon icon :v-adjust (or v-adjust 0) :height (or height 1) :face face) " " str)))
#+end_src
*** Hydra / Windows

Group window-related commands.

#+begin_src emacs-lisp
  (pretty-hydra-define hydra-windows
                       (:hint nil :forein-keys warn :quit-key "q" :title (with-faicon "windows" "Windows" 1 -0.05))
                       ("Window"
                        (("b" balance-windows "balance")
                         ("c" centered-window-mode "center")
                         ("i" enlarge-window "heighten")
                         ("j" shrink-window-horizontally "narrow")
                         ("k" shrink-window "lower")
                         ("u" winner-undo "undo")
                         ("r" winner-redo "redo")
                         ("l" enlarge-window-horizontally "widen")
                         ("s" switch-window-then-swap-buffer "swap" :color teal))
                        "Zoom"
                        (("-" text-scale-decrease "out")
                         ("+" text-scale-increase "in")
                         ("=" (text-scale-increase 0) "reset"))))
#+end_src
*** Hydra / Window Nav
From https://github.com/doomemacs/doomemacs/blob/master/modules/ui/hydra/autoload/windows.el

#+begin_src emacs-lisp
  (defhydra +hydra/window-nav (:hint nil)
    "
            Split: _v_ert  _s_:horz
           Delete: _c_lose  _o_nly
    Switch Window: _h_:left  _j_:down  _k_:up  _l_:right  _u_:undo  _r_:redo
          Buffers: _p_revious  _n_ext  _b_:select  _f_ind-file
           Resize: _H_:splitter left  _J_:splitter down  _K_:splitter up  _L_:splitter right
             Move: _a_:up  _z_:down  _i_menu
  "
    ("z" scroll-up-line)
    ("a" scroll-down-line)
    ("i" idomenu)

    ("h" windmove-left)
    ("j" windmove-down)
    ("k" windmove-up)
    ("l" windmove-right)
    ("u" winner-undo)
    ("r" winner-redo)

    ("p" previous-buffer)
    ("n" next-buffer)
    ("b" switch-to-buffer)
    ("f" find-file)

    ("s" split-window-below)
    ("v" split-window-right)

    ("c" delete-window)
    ("o" delete-other-windows)

    ("H" hydra-move-splitter-left)
    ("J" hydra-move-splitter-down)
    ("K" hydra-move-splitter-up)
    ("L" hydra-move-splitter-right)

    ("+" text-scale-increase "in")
    ("-" text-scale-decrease "out")
    ("=" (text-scale-increase 0) "reset")

    ("q" nil))
#+end_src
*** Hydra / Flyspell
#+begin_src emacs-lisp
  (defhydra flyspell-hydra ()
    "
  Spell Commands^^           Add To Dictionary^^              Other
  --------------^^---------- -----------------^^------------- -----^^---------------------------
  [_b_] check whole buffer   [_B_] add word to dict (buffer)  [_t_] toggle spell check
  [_r_] check region         [_G_] add word to dict (global)  [_q_] exit
  [_d_] change dictionary    [_S_] add word to dict (session) [_Q_] exit and disable spell check
  [_n_] next error
  [_c_] correct before point
  [_s_] correct at point
  "
    ("B" nil)
    ("b" flyspell-buffer)
    ("r" flyspell-region)
    ("d" ispell-change-dictionary)
    ("G" nil)
    ("n" flyspell-goto-next-error)
    ("c" flyspell-correct-wrapper)
    ("Q" flyspell-mode :exit t)
    ("q" nil :exit t)
    ("S" nil)
    ("s" flyspell-correct-at-point)
    ("t" nil))
#+end_src
*** Hydra / ORG
**** hydra-org-jump
From [[https://sriramkswamy.github.io/dotemacs/]]

#+begin_src emacs-lisp
  (defun sk/before-hydra ()
    "Function to run before the Hydra gets executed."
    (focus-mode))

  (defun sk/org-jump-next-heading-and-scroll ()
    "Move to the next same-level heading and scroll line to top."
    (interactive)
    (org-forward-heading-same-level)
    (evil-scroll-line-to-top)
    (message "Next heading and scrolled to top"))

  (defhydra sk/hydra-org-jump (:color pink :hint nil :pre sk/before-hydra)
    ;; ("J" outline-next-visible-heading)
    ("J" (lambda ()
           (interactive)
           (outline-next-visible-heading 1)
           ;; (call-interactively 'evil-scroll-line-to-top)
           (org-cycle)))

    ;; ("K" outline-previous-visible-heading)
    ("K" (lambda ()
           (interactive)
           (outline-previous-visible-heading 1)
           ;; (call-interactively 'evil-scroll-line-to-top)
           (org-cycle)))
    ("L" org-down-element)
    ("H" org-up-element)
    ;; ("j" org-forward-heading-same-level)
    ("j" (lambda ()
           (interactive)
           (org-forward-heading-same-level 1)
           (call-interactively 'evil-scroll-line-to-top)
           (org-cycle)))
    ;; ("k" org-backward-heading-same-level)
    ("k" (lambda ()
           (interactive)
           (org-backward-heading-same-level 1)
           (call-interactively 'evil-scroll-line-to-top)
           (org-cycle)))
    ;; ("u" org-next-item)
    ;; ("d" org-previous-item)
    ;; ("f" org-table-next-field)
    ;; ("b" org-table-previous-field)
    ;; ("n" org-next-block)
    ("p" forward-paragraph)
    ;; ("N" org-next-link)
    ("P" backward-paragraph)
    ("q" nil :color blue))
#+end_src

#+results:
: sk/hydra-org-jump/body

**** hydra-org-babel-transient
#+begin_src emacs-lisp :tangle no
  (defhydra org-babel-transient ()
    "
  ^Navigate^                    ^Interact
  ^^^^^^^^^^^------------------------------------------
  [_t_/_s_] navigate src blocs  [_x_] execute src block
  [_g_]^^   goto named block    [_'_] edit src block
  [_z_]^^   recenter screen     [_q_] quit
  "
    ("q" nil :exit t)
    ("t" org-babel-next-src-block)
    ("s" org-babel-previous-src-block)
    ("g" org-babel-goto-named-src-block)
    ("z" recenter-top-bottom)
    ("x" org-babel-execute-maybe)
    ("'" org-edit-special :exit t))
#+end_src
*** Hydra / merge
Group Merge commands.

#+begin_src emacs-lisp
  (pretty-hydra-define hydra-merge
                       (:hint nil :color pink :quit-key "q" :title (with-octicon "mark-github" "Magit" 1 -0.05))
                       ("Move"
                        (("n" smerge-next "next")
                         ("p" smerge-prev "previous"))
                        "Keep"
                        (("RET" smerge-keep-current "current")
                         ("a" smerge-keep-all "all")
                         ("b" smerge-keep-base "base")
                         ("l" smerge-keep-lower "lower")
                         ("u" smerge-keep-upper "upper"))
                        "Diff"
                        (("<" smerge-diff-base-upper "upper/base")
                         ("=" smerge-diff-upper-lower "upper/lower")
                         (">" smerge-diff-base-lower "base/lower")
                         ("R" smerge-refine "redefine")
                         ("E" smerge-ediff "ediff"))
                        "Other"
                        (("C" smerge-combine-with-next "combine")
                         ("r" smerge-resolve "resolve")
                         ("k" smerge-kill-current "kill current"))))
#+end_src
*** Hydra / smerge
From https://github.com/dakra/dmacs/blob/nil/init.org

#+begin_src emacs-lisp
  (use-package smerge-mode
    :hook (magit-diff-visit-file . (lambda ()
                                     (when smerge-mode
                                       (hydra-smerge/body))))
    :config
    (require 'hydra)
    (defhydra hydra-smerge
      (:color pink :hint nil :post (smerge-auto-leave))
      "
  ^Move^       ^Keep^               ^Diff^                 ^Other^
  ^^-----------^^-------------------^^---------------------^^-------
  _n_ext       _b_ase               _<_: upper/base        _C_ombine
  _p_rev       _u_pper              _=_: upper/lower       _r_esolve
  ^^           _l_ower              _>_: base/lower        _k_ill current
  ^^           _a_ll                _R_efine
  ^^           _RET_: current       _E_diff
  "
      ("n" smerge-next)
      ("p" smerge-prev)
      ("b" smerge-keep-base)
      ("u" smerge-keep-upper)
      ("l" smerge-keep-lower)
      ("a" smerge-keep-all)
      ("RET" smerge-keep-current)
      ("\C-m" smerge-keep-current)
      ("<" smerge-diff-base-upper)
      ("=" smerge-diff-upper-lower)
      (">" smerge-diff-base-lower)
      ("R" smerge-refine)
      ("E" smerge-ediff)
      ("C" smerge-combine-with-next)
      ("r" smerge-resolve)
      ("k" smerge-kill-current)
      ("q" nil "cancel" :color blue)))
#+end_src
*** Hydra / modeline                                                   :todo:
#+begin_src emacs-lisp
  (pretty-hydra-define hydra-modeline
                       (:title "Modeline" :color amaranth :quit-key ("q" "C-g"))
                       ("Icon"
                        (("i" (setq doom-modeline-icon (not doom-modeline-icon))
                          "display icons" :toggle doom-modeline-icon)
                         ("u" (setq doom-modeline-unicode-fallback (not doom-modeline-unicode-fallback))
                          "unicode fallback" :toggle doom-modeline-unicode-fallback)
                         ("m" (setq doom-modeline-major-mode-icon (not doom-modeline-major-mode-icon))
                          "major mode" :toggle doom-modeline-major-mode-icon)
                         ("c" (setq doom-modeline-major-mode-color-icon (not doom-modeline-major-mode-color-icon))
                          "colorful major mode" :toggle doom-modeline-major-mode-color-icon)
                         ("s" (setq doom-modeline-buffer-state-icon (not doom-modeline-buffer-state-icon))
                          "buffer state" :toggle doom-modeline-buffer-state-icon)
                         ("o" (setq doom-modeline-buffer-modification-icon (not doom-modeline-buffer-modification-icon))
                          "modification" :toggle doom-modeline-buffer-modification-icon)
                         ("x" (setq doom-modeline-time-icon (not doom-modeline-time-icon))
                          "time" :toggle doom-modeline-time-icon)
                         ("v" (setq doom-modeline-modal-icon (not doom-modeline-modal-icon))
                          "modal" :toggle doom-modeline-modal-icon))
                        "Segment"
                        (("g h" (setq doom-modeline-hud (not doom-modeline-hud))
                          "hud" :toggle doom-modeline-hud)
                         ("g m" (setq doom-modeline-minor-modes (not doom-modeline-minor-modes))
                          "minor modes" :toggle doom-modeline-minor-modes)
                         ("g w" (setq doom-modeline-enable-word-count (not doom-modeline-enable-word-count))
                          "word count" :toggle doom-modeline-enable-word-count)
                         ("g e" (setq doom-modeline-buffer-encoding (not doom-modeline-buffer-encoding))
                          "encoding" :toggle doom-modeline-buffer-encoding)
                         ("g i" (setq doom-modeline-indent-info (not doom-modeline-indent-info))
                          "indent" :toggle doom-modeline-indent-info)
                         ("g c" (setq doom-modeline-display-misc-in-all-mode-lines (not doom-modeline-display-misc-in-all-mode-lines))
                          "misc info" :toggle doom-modeline-display-misc-in-all-mode-lines)
                         ("g l" (setq doom-modeline-lsp (not doom-modeline-lsp))
                          "lsp" :toggle doom-modeline-lsp)
                         ("g k" (setq doom-modeline-workspace-name (not doom-modeline-workspace-name))
                          "workspace" :toggle doom-modeline-workspace-name)
                         ("g g" (setq doom-modeline-github (not doom-modeline-github))
                          "github" :toggle doom-modeline-github)
                         ("g n" (setq doom-modeline-gnus (not doom-modeline-gnus))
                          "gnus" :toggle doom-modeline-gnus)
                         ("g u" (setq doom-modeline-mu4e (not doom-modeline-mu4e))
                          "mu4e" :toggle doom-modeline-mu4e)
                         ("g r" (setq doom-modeline-irc (not doom-modeline-irc))
                          "irc" :toggle doom-modeline-irc)
                         ("g f" (setq doom-modeline-irc-buffers (not doom-modeline-irc-buffers))
                          "irc buffers" :toggle doom-modeline-irc-buffers)
                         ("g s" (progn
                                  (setq doom-modeline-checker-simple-format (not doom-modeline-checker-simple-format))
                                  (and (bound-and-true-p flycheck-mode) (flycheck-buffer)))
                          "simple checker" :toggle doom-modeline-checker-simple-format)
                         ("g t" (setq doom-modeline-time (not doom-modeline-time))
                          "time" :toggle doom-modeline-time)
                         ("g v" (setq doom-modeline-env-version (not doom-modeline-env-version))
                          "version" :toggle doom-modeline-env-version))
                        "Style"
                        (("a" (setq doom-modeline-buffer-file-name-style 'auto)
                          "auto"
                          :toggle (eq doom-modeline-buffer-file-name-style 'auto))
                         ("b" (setq doom-modeline-buffer-file-name-style 'buffer-name)
                          "buffer name"
                          :toggle (eq doom-modeline-buffer-file-name-style 'buffer-name))
                         ("f" (setq doom-modeline-buffer-file-name-style 'file-name)
                          "file name"
                          :toggle (eq doom-modeline-buffer-file-name-style 'file-name))
                         ("t u" (setq doom-modeline-buffer-file-name-style 'truncate-upto-project)
                          "truncate upto project"
                          :toggle (eq doom-modeline-buffer-file-name-style 'truncate-upto-project))
                         ("t f" (setq doom-modeline-buffer-file-name-style 'truncate-from-project)
                          "truncate from project"
                          :toggle (eq doom-modeline-buffer-file-name-style 'truncate-from-project))
                         ("t w" (setq doom-modeline-buffer-file-name-style 'truncate-with-project)
                          "truncate with project"
                          :toggle (eq doom-modeline-buffer-file-name-style 'truncate-with-project))
                         ("t e" (setq doom-modeline-buffer-file-name-style 'truncate-except-project)
                          "truncate except project"
                          :toggle (eq doom-modeline-buffer-file-name-style 'truncate-except-project))
                         ("t r" (setq doom-modeline-buffer-file-name-style 'truncate-upto-root)
                          "truncate upto root"
                          :toggle (eq doom-modeline-buffer-file-name-style 'truncate-upto-root))
                         ("t a" (setq doom-modeline-buffer-file-name-style 'truncate-all)
                          "truncate all"
                          :toggle (eq doom-modeline-buffer-file-name-style 'truncate-all))
                         ("t n" (setq doom-modeline-buffer-file-name-style 'truncate-nil)
                          "truncate none"
                          :toggle (eq doom-modeline-buffer-file-name-style 'truncate-nil))
                         ("r f" (setq doom-modeline-buffer-file-name-style 'relative-from-project)
                          "relative from project"
                          :toggle (eq doom-modeline-buffer-file-name-style 'relative-from-project))
                         ("r t" (setq doom-modeline-buffer-file-name-style 'relative-to-project)
                          "relative to project"
                          :toggle (eq doom-modeline-buffer-file-name-style 'relative-to-project)))
                        "Project Detection"
                        (("p a" (setq doom-modeline-project-detection 'auto)
                          "auto"
                          :toggle (eq doom-modeline-project-detection 'auto))
                         ("p f" (setq doom-modeline-project-detection 'ffip)
                          "ffip"
                          :toggle (eq doom-modeline-project-detection 'ffip))
                         ("p i" (setq doom-modeline-project-detection 'projectile)
                          "projectile"
                          :toggle (eq doom-modeline-project-detection 'projectile))
                         ("p p" (setq doom-modeline-project-detection 'project)
                          "project"
                          :toggle (eq doom-modeline-project-detection 'project))
                         ("p n" (setq doom-modeline-project-detection nil)
                          "disable"
                          :toggle (eq doom-modeline-project-detection nil)))
                        "Misc"
                        (("n" (progn
                                (message "Fetching GitHub notifications...")
                                (run-with-timer 300 nil #'doom-modeline--github-fetch-notifications)
                                (browse-url "https://github.com/notifications"))
                          "github notifications" :exit t)
                         ("e" (cond ((bound-and-true-p flycheck-mode)
                                     (flycheck-list-errors))
                                    ((bound-and-true-p flymake-mode)
                                     (flymake-show-diagnostics-buffer)))
                          "list errors" :exit t)
                         ("w" (if (bound-and-true-p grip-mode)
                                  (grip-browse-preview)
                                (message "Not in preview"))
                          "browse preview" :exit t)
                         ("z h" (read-from-minibuffer
                                 "Eval: "
                                 (format "(setq %s %s)"
                                         'doom-modeline-height
                                         (symbol-value 'doom-modeline-height)))
                          "set height" :exit t)
                         ("z w" (read-from-minibuffer
                                 "Eval: "
                                 (format "(setq %s %s)"
                                         'doom-modeline-bar-width
                                         (symbol-value 'doom-modeline-bar-width)))
                          "set bar width" :exit t)
                         ("z g" (read-from-minibuffer
                                 "Eval: "
                                 (format "(setq %s %s)"
                                         'doom-modeline-github-interval
                                         (symbol-value 'doom-modeline-github-interval)))
                          "set github interval" :exit t)
                         ("z n" (read-from-minibuffer
                                 "Eval: "
                                 (format "(setq %s %s)"
                                         'doom-modeline-gnus-timer
                                         (symbol-value 'doom-modeline-gnus-timer)))
                          "set gnus interval" :exit t))))

#+end_src
*** Hydra / unicode
From https://github.com/dakra/dmacs/blob/nil/init.org
Add here circled digits like: ②
#+begin_src emacs-lisp
  (defun dakra/insert-unicode (unicode-name)
    "Same as C-x 8 enter UNICODE-NAME."
    (insert-char (gethash unicode-name (ucs-names))))

  (defhydra dakra/hydra-unicode (:color blue :hint nil)
    "
       Unicode  _c_ €   _a_ ä   _A_ Ä
                _d_ °   _o_ ö   _O_ Ö
                _e_ €   _u_ Ü   _U_ Ü
                _p_ £   _s_ ß
                _m_ µ
                _r_ →
       "
    ("a" (dakra/insert-unicode "LATIN SMALL LETTER A WITH DIAERESIS"))
    ("A" (dakra/insert-unicode "LATIN CAPITAL LETTER A WITH DIAERESIS"))
    ("o" (dakra/insert-unicode "LATIN SMALL LETTER O WITH DIAERESIS")) ;;
    ("O" (dakra/insert-unicode "LATIN CAPITAL LETTER O WITH DIAERESIS"))
    ("u" (dakra/insert-unicode "LATIN SMALL LETTER U WITH DIAERESIS")) ;;
    ("U" (dakra/insert-unicode "LATIN CAPITAL LETTER U WITH DIAERESIS"))
    ("s" (dakra/insert-unicode "LATIN SMALL LETTER SHARP S"))
    ("c" (dakra/insert-unicode "COPYRIGHT SIGN"))
    ("d" (dakra/insert-unicode "DEGREE SIGN"))
    ("e" (dakra/insert-unicode "EURO SIGN"))
    ("p" (dakra/insert-unicode "POUND SIGN"))
    ("r" (dakra/insert-unicode "RIGHTWARDS ARROW"))
    ("m" (dakra/insert-unicode "MICRO SIGN")))
#+end_src
*** Hydra / multiple-cursors
#+begin_src emacs-lisp
(defhydra multiple-cursors-hydra (:columns 3 :idle 1.0)
  "Multiple cursors"
  ("l" mc/edit-lines "Edit lines in region" :exit t)
  ("b" mc/edit-beginnings-of-lines "Edit beginnings of lines in region" :exit t)
  ("e" mc/edit-ends-of-lines "Edit ends of lines in region" :exit t)
  ("a" mc/mark-all-dwim "Mark all dwim" :exit t)
  ("S" mc/mark-all-symbols-like-this "Mark all symbols likes this" :exit t)
  ("w" mc/mark-all-words-like-this "Mark all words like this" :exit t)
  ("r" mc/mark-all-in-region "Mark all in region" :exit t)
  ("R" mc/mark-all-in-region-regexp "Mark all in region (regexp)" :exit t)
  ("d" mc/mark-all-like-this-in-defun "Mark all like this in defun" :exit t)
  ("s" mc/mark-all-symbols-like-this-in-defun "Mark all symbols like this in defun" :exit t)
  ("W" mc/mark-all-words-like-this-in-defun "Mark all words like this in defun" :exit t)
  ("i" mc/insert-numbers "Insert numbers" :exit t)
  ("n" mc/mark-next-like-this "Mark next like this")
  ("N" mc/skip-to-next-like-this "Skip to next like this")
  ("M-n" mc/unmark-next-like-this "Unmark next like this")
  ("p" mc/mark-previous-like-this "Mark previous like this")
  ("P" mc/skip-to-previous-like-this "Skip to previous like this")
  ("M-p" mc/unmark-previous-like-this "Unmark previous like this")
  ("q" nil "Quit" :exit t))
#+end_src

** explain-pause-mode
#+begin_src emacs-lisp
  (use-package explain-pause-mode
    :straight (explain-pause-mode :type git :host github :repo "lastquestion/explain-pause-mode"))
#+end_src
** exec-path-from-shell
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :straight t
    :if (memq window-system '(mac ns x))
    :config
    (exec-path-from-shell-initialize))
#+end_src

** Custom Elisp
*** reload config
#+begin_src emacs-lisp
  (defun dorneanu/reload-dotemacs ()
    (interactive)
    (load-file (concat minemacs-root-dir "init.el" )))
#+end_src
*** change font size
Change default font size
#+begin_src emacs-lisp
  (defun dorneanu/set-font-size (size)
    "Set the font size to SIZE, specified in tenths of a point."
    (interactive "nEnter the font size: ")
    (set-face-attribute 'default nil :height size))
#+end_src
*** reload directory variables
#+begin_src emacs-lisp
(defun dorneanu/reload-dir-locals ()
  "Reload directory local variables for the current buffer."
  (interactive)
  (let ((enable-local-variables :all))
    (hack-dir-local-variables-non-file-buffer)
    (hack-local-variables)
    (message "Directory local variables reloaded for %s" 
             (buffer-name))))
#+end_src
* Media
:properties:
:header-args:emacs-lisp: :tangle ~/.config/minimal-emacs/post-init.el
:end:
** empv
Watch YouTube videos from Emacs using ~mpv~. I also learned you can save the
position and resume whenever the same video is played again (read [[https://unix.stackexchange.com/questions/414639/is-it-possible-to-continue-movies-from-where-one-leaves-in-mpv-as-can-be-done-in][here]]).

#+begin_src emacs-lisp
(use-package empv
  :straight t
  :after (embark browse-url)
  :config

  (setq empv-invidious-instance "https://yewtu.be/")
  (add-to-list 'empv-mpv-args "--ytdl-format=best")

  (defun dorneanu/empv-play-url (url &optional _)
    (interactive)
    (empv-toggle-video)
    (empv-play url)))

;; Handle youtube links using mpv
(with-eval-after-load 'browse-url
  (add-to-list 'browse-url-handlers (cons "^https://\\(www.\\)?youtube.com\\|https://youtu.be" #'dorneanu/empv-play-url)))
#+end_src
** Feeds
*** elfeed
#+begin_src emacs-lisp
(use-package elfeed
  :defer t
  :straight t
  :bind (;; Global bindings
        ("C-c e e" . elfeed)
        ("C-c e u" . elfeed-update)
        ("C-c e s" . elfeed-search)
        ("C-c e b" . elfeed-search-browse-bookmark)
        ("C-c e l" . elfeed-search-live-filter)
   
        ;; Search mode bindings
        :map elfeed-search-mode-map
        ("g" . elfeed-search-update--force)
        ("f j" . dorneanu/elfeed-cycle-filters-forward)
        ("f J" . dorneanu/elfeed-cycle-filters-backward)
        ("f k" . dorneanu/elfeed-increase-time-filter)
        ("f K" . dorneanu/elfeed-decrease-time-filter)
        ("f u" . elfeed-update)
        ("f U" . elfeed-search-update--force)
        ("y" . elfeed-show-yank)
        ("s" . elfeed-search-live-filter)
        ("b" . elfeed-search-browse-bookmark)
        ("c" . org-capture)
        ("F" . elfeed-search-fetch-visible)
        ("t t" . elfeed-search-toggle-all)
        ("v" . elfeed-search-view-animation)
        ("C-c C-e" . elfeed-search-export-entries)
        ("f d" . elfeed-search-tag-all-default)
        ("m g r" . my/elfeed-reddit-show-comments)
        ("m g h" . my/elfeed-hn-show-comments)
        ("o x" . dorneanu/elfeed-search-browse-url-xwidget)
        ("o b" . elfeed-search-browse-url)
        ("o r" . sqrtminusone/rdrview-elfeed-show)
   
        ;; Show mode bindings
        :map elfeed-show-mode-map
        ("q" . elfeed-kill-buffer)
        ("u" . elfeed-show-tag--unread)
        ("y" . elfeed-show-yank)
        ("n" . elfeed-show-next)
        ("p" . elfeed-show-prev)
        ("+" . elfeed-show-tag)
        ("-" . elfeed-show-untag)
        ("s" . elfeed-show-save)
        ("b" . elfeed-show-bookmark)
        ("r" . elfeed-show-refresh)
        ("h" . elfeed-show-visit-html-file))
   :custom
   ((elfeed-search-title-min-width 70)
   (elfeed-search-title-max-width 100)
   (elfeed-search-trailing-width 30)
   (elfeed-search-date-format '("%Y-%m-%d %H:%M" 16 :left))
   ;; Cache content for offline reading
   (elfeed-use-curl t)
   (elfeed-curl-max-connections 10)
   (elfeed-search-filter "@1-week-ago +unread +daily -devto -youtube -hn")
   (elfeed-db-directory "~/.elfeed")
   (elfeed-goodies/wide-threshold 0.2)
   (elfeed-set-timeout 36000))
   :config
   (custom-set-faces
    ;; Title styling
    '(elfeed-show-title-face ((t :height 1.5 
                                 :weight bold 
                                 :family "Variable Serif" 
                                 :foreground "#A6E3A1")))  ; Catppuccin green
    ;; Author and feed info
    '(elfeed-show-author-face ((t :height 1.2 
                                  :family "Variable Sans" 
                                  :foreground "#F9E2AF")))  ; Catppuccin yellow
    '(elfeed-show-feed-face ((t :height 1.1 
                                :family "Variable Sans" 
                                :foreground "#89B4FA")))    ; Catppuccin blue
    ;; Tags and metadata
    '(elfeed-show-tag-face ((t :box (:line-width 1)       ; Boxed tags
                               :foreground "#F5C2E7")))     ; Catppuccin pink
    ;; Link styling
    '(elfeed-show-link-face ((t :height 1.1 
                                :underline (:style line)
                                :foreground "#89DCEB"))))   ; Catppuccin sky

                                ;; Function to enhance show buffer readability
  (defun my/elfeed-show-buffer-setup ()
    "Enhance the readability of elfeed show buffer."
    ;; Basic buffer settings
    (setq-local line-spacing 0.2)            ; Increase line spacing
    (setq-local left-margin-width 2)         ; Add left margin
    (setq-local right-margin-width 2)        ; Add right margin
    (setq-local header-line-format nil)      ; Clean header line
    (setq-local cursor-type 'bar)            ; Thin cursor
    
    ;; Enable useful minor modes
    (variable-pitch-mode t)                  ; Use variable-pitch fonts
    (visual-line-mode t)                     ; Wrap lines at window edge
    (visual-fill-column-mode t)              ; Center content
    (display-line-numbers-mode -1)           ; Disable line numbers
    (olivetti-mode t)                        ; Center content with margins
    
    ;; Apply text scaling
    (text-scale-set 1)
    
    ;; Set max content width
    (setq-local visual-fill-column-width 100)
    (setq-local visual-fill-column-center-text t)
    
    ;; Custom font locks for better content structure
    (font-lock-add-keywords
     nil
     '(("^\\*+ .*$" . '(:height 1.2 :weight bold))   ; Headlines
       ("^[-*] .*$" . '(:height 1.1))                ; List items
       ("`\\(.*?\\)`" . '(:family "Monospace"))      ; Inline code
       ("^> .*$" . '(:slant italic :foreground "#C6A0F6")))))  ; Blockquotes

   ;; Hooks
   (add-hook 'elfeed-show-mode-hook #'my/elfeed-show-buffer-setup)
   (add-hook 'elfeed-search-mode-hook
            (lambda ()
              (setq-local tooltip-function #'elfeed-search-show-entry-tooltip))))
#+end_src

#+results:

**** Custom functions

#+begin_src emacs-lisp
(defun hp/elfeed-entry-line-draw (entry)
  "Enhanced print function for ENTRY in the elfeed-search buffer."
  (let* (;; Basic entry information
         (date (elfeed-search-format-date (elfeed-entry-date entry)))
         (title (or (elfeed-meta entry :title) 
                    (elfeed-entry-title entry) 
                    ""))
         (title-faces (elfeed-search--faces (elfeed-entry-tags entry)))
         
         ;; Feed information
         (feed (elfeed-entry-feed entry))
         (feed-title (when feed
                       (or (elfeed-meta feed :title) 
                           (elfeed-feed-title feed))))
         
         ;; Tags formatting
         (tags (mapcar #'symbol-name (elfeed-entry-tags entry)))
         (tags-str (concat "[" (mapconcat 'identity tags ",") "]"))
         
         ;; Width calculations
         (title-width (- (window-width) 
                         elfeed-goodies/feed-source-column-width
                         elfeed-goodies/tag-column-width 
                         10  ; date width
                         4)) ; spacing
         
         ;; Column formatting
         (title-column (elfeed-format-column
                        title 
                        (elfeed-clamp elfeed-search-title-min-width
                                      title-width
                                      title-width)
                        :left))
         (tag-column (elfeed-format-column
                      tags-str 
                      (elfeed-clamp (length tags-str)
                                    elfeed-goodies/tag-column-width
                                    elfeed-goodies/tag-column-width)
                      :left))
         (feed-column (elfeed-format-column
                       feed-title 
                       (elfeed-clamp elfeed-goodies/feed-source-column-width
                                     elfeed-goodies/feed-source-column-width
                                     elfeed-goodies/feed-source-column-width)
                       :left))
         
         ;; Reading time calculation
         (content (elfeed-deref (elfeed-entry-content entry)))
         (word-count (when content 
                       (with-temp-buffer
                         (insert content)
                         (count-words (point-min) (point-max)))))
         (reading-time (when word-count 
                         (format "%dm" (/ word-count 200))))
         
         ;; Age calculations
         (age-in-days (/ (- (float-time) 
                            (float-time (elfeed-entry-date entry))) 
                         86400))
         (age-face (cond ((> age-in-days 365) 'font-lock-comment-face)
                         ((> age-in-days 30) 'font-lock-keyword-face)
                         (t 'font-lock-string-face))))
    
    ;; Display logic based on window width
    (if (>= (window-width) (* (frame-width) elfeed-goodies/wide-threshold))
        ;; Wide format
        (progn
          ;; Date and reading time
          (insert (propertize date 'face 'elfeed-search-date-face) " ")
          (when reading-time
            (insert (propertize (format "[%s] " reading-time) 
                                'face 'font-lock-comment-face)))
          
          ;; Feed and tags
          (insert (propertize feed-column 'face 'elfeed-search-feed-face) " ")
          (insert (propertize tag-column 'face 'elfeed-search-tag-face) " ")
          
          ;; Title and age
          (insert (propertize title 'face title-faces 'kbd-help title))
          (when (> age-in-days 7)
            (insert " " (propertize (format "(%d days old)" (round age-in-days)) 
                                    'face age-face))))
      
      ;; Narrow format
      (insert (propertize title 'face title-faces 'kbd-help title)))))

;; Add mouseover tooltips
(defun elfeed-search-show-entry-tooltip ()
  (when-let* ((entry (elfeed-search-selected :single))
              (content (elfeed-deref (elfeed-entry-content entry))))
    (let ((summary (with-temp-buffer
                     (insert content)
                     (goto-char (point-min))
                     (forward-paragraph)
                     (buffer-substring (point-min) (point)))))
      (format "Title: %s\nFeed: %s\nSummary: %s" 
              (elfeed-entry-title entry)
              (elfeed-feed-title (elfeed-entry-feed entry))
              (truncate-string-to-width summary 200)))))
(defun hp/elfeed-entry-line-draw (entry)
  "Print ENTRY to the buffer."
  (let* ((date (elfeed-search-format-date (elfeed-entry-date entry)))
         (title (or (elfeed-meta entry :title) (elfeed-entry-title entry) ""))
         (title-faces (elfeed-search--faces (elfeed-entry-tags entry)))
         (feed (elfeed-entry-feed entry))
         (feed-title
          (when feed
            (or (elfeed-meta feed :title) (elfeed-feed-title feed))))
         (tags (mapcar #'symbol-name (elfeed-entry-tags entry)))
         (tags-str (concat "[" (mapconcat 'identity tags ",") "]"))
         (title-width (- (window-width) elfeed-goodies/feed-source-column-width
                         elfeed-goodies/tag-column-width 4))
         (title-column (elfeed-format-column
                        title (elfeed-clamp
                               elfeed-search-title-min-width
                               title-width
                               title-width)
                        :left))
         (tag-column (elfeed-format-column
                      tags-str (elfeed-clamp (length tags-str)
                                             elfeed-goodies/tag-column-width
                                             elfeed-goodies/tag-column-width)
                      :left))
         (feed-column (elfeed-format-column
                       feed-title (elfeed-clamp elfeed-goodies/feed-source-column-width
                                                elfeed-goodies/feed-source-column-width
                                                elfeed-goodies/feed-source-column-width)
                       :left))
         ;; (entry-score (elfeed-format-column (number-to-string (elfeed-score-scoring-get-score-from-entry entry)) 6 :left))
         ;; (entry-authors (concatenate-authors
         ;;                 (elfeed-meta entry :authors)))
         ;; (authors-column (elfeed-format-column entry-authors elfeed-goodies/tag-column-width :left))
         )
    (if (>= (window-width) (* (frame-width) elfeed-goodies/wide-threshold))
        (progn
          ;; (insert (propertize entry-score 'face 'elfeed-search-feed-face) " ")
          (insert (propertize date 'face 'elfeed-search-date-face) " ")
          (insert (propertize feed-column 'face 'elfeed-search-feed-face) " ")
          (insert (propertize tag-column 'face 'elfeed-search-tag-face) " ")
          ;; (insert (propertize authors-column 'face 'elfeed-search-tag-face) " ")
          (insert (propertize title 'face title-faces 'kbd-help title))
          )
      (insert (propertize title 'face title-faces 'kbd-help title))))
  )

#+end_src

xwidget related:

#+begin_src emacs-lisp
  (defun dorneanu/elfeed-search-browse-url-xwidget (&optional use-generic-p)
    "open with xwidget"
    (interactive "P")
    ;; Split window and focus there
    (split-window-right)
    (balance-windows)
    (other-window 1)
    (let ((browse-url-browser-function #'xwidget-webkit-browse-url))
      (elfeed-search-browse-url use-generic-p)))
#+end_src

**** Filter cycling
Cycle through different filters:

#+begin_src emacs-lisp
  (defvar dorneanu/elfeed-custom-filters
    '("@1-week-ago +unread +daily -devto -youtube -hn"
      "@1-week-ago +unread +daily -devto -youtube -hn +blogs"
      "@1-week-ago +unread +daily -devto -youtube -hn +security"
      "@1-week-ago +unread +reddit +top"
      "@1-week-ago +unread -hn +news +lage"
      "@1-week-ago +unread -hn +news +correctiv"
      "@1-week-ago +unread +finance"
      "@1-week-ago +unread +daily -devto +youtube +y1"
      "@1-week-ago +unread +daily -devto +hn +points")
    "List of elfeed filters to cycle through.")

  (defvar dorneanu/elfeed-current-filter-index 0
    "Current index of `my-elfeed-filters` list.")

  ;; Regular expression to match the time filter
  (defvar dorneanu/time-filter-regex "@\\([0-9]+\\)-week-ago"
    "Regex to match the time filter in elfeed.")

  (defun dorneanu/elfeed-cycle-filters-forward ()
    "Cycle forward through `dorneanu/elfeed-custom-filters` and apply the current filter."
    (interactive)
    (setq dorneanu/elfeed-current-filter-index
          (mod (1+ dorneanu/elfeed-current-filter-index)
               (length dorneanu/elfeed-custom-filters)))
    (let ((current-filter (nth dorneanu/elfeed-current-filter-index dorneanu/elfeed-custom-filters)))
      (elfeed-search-set-filter current-filter)
      (message "Elfeed filter set to: %s" current-filter)))

  (defun dorneanu/elfeed-cycle-filters-backward ()
    "Cycle backward through `dorneanu/elfeed-custom-filters` and apply the current filter."
    (interactive)
    (setq dorneanu/elfeed-current-filter-index
          (mod (1- dorneanu/elfeed-current-filter-index)
               (length dorneanu/elfeed-custom-filters)))
    (let ((current-filter (nth dorneanu/elfeed-current-filter-index dorneanu/elfeed-custom-filters)))
      (elfeed-search-set-filter current-filter)
      (message "Elfeed filter set to: %s" current-filter)))

  (defun dorneanu/elfeed-adjust-time-filter (increment)
    "Adjust the time filter in the current elfeed filter.
  INCREMENT can be positive or negative to increase or decrease the time filter."
    (let* ((current-filter (nth dorneanu/elfeed-current-filter-index dorneanu/elfeed-custom-filters))
           (new-filter (replace-regexp-in-string
                        "@\\([0-9]+\\)-week-ago"
                        (lambda (match)
                          (let ((current-weeks (string-to-number (match-string 1 match))))
                            (concat "@" (number-to-string (max 1 (+ current-weeks increment))) "-week-ago")))
                        current-filter)))
      ;; Update the filter list with the new filter
      (setf (nth dorneanu/elfeed-current-filter-index dorneanu/elfeed-custom-filters) new-filter)
      ;; Apply the new filter
      (elfeed-search-set-filter new-filter)
      (message "Elfeed filter set to: %s" new-filter)))

  (defun dorneanu/elfeed-increase-time-filter ()
    "Increase the time filter (e.g., from @1-week-ago to @2-week-ago)."
    (interactive)
    (dorneanu/elfeed-adjust-time-filter 1))

  (defun dorneanu/elfeed-decrease-time-filter ()
    "Decrease the time filter (e.g., from @2-week-ago to @1-week-ago)."
    (interactive)
    (dorneanu/elfeed-adjust-time-filter -1))

  (defun dorneanu/elfeed-cycle-filters ()
    "Cycle through `dorneanu/elfeed-custom-filters` and apply the current filter."
    (interactive)
    (setq dorneanu/elfeed-current-filter-index
          (mod (1+ dorneanu/elfeed-current-filter-index)
               (length dorneanu/elfeed-custom-filters)))
    (let ((current-filter (nth dorneanu/elfeed-current-filter-index dorneanu/elfeed-custom-filters)))
      (elfeed-search-set-filter current-filter)
      (message "Elfeed filter set to: %s" current-filter)))
#+end_src

**** elfeed-goodies
Elfeed-goodies is a package which enhances the Elfeed experience.
Aside from running its setup command as soon as possible, I also set
in this code block all my keybinds for Elfeed here.
#+begin_src emacs-lisp
  (use-package elfeed-goodies
    :defer t
    :after elfeed
    :commands elfeed-goodies/setup
    :straight (:build t)
    :init
    (elfeed-goodies/setup)
    :custom
    (elfeed-goodies/feed-source-column-width 28)
    (elfeed-goodies/tag-column-width 28)
    :config
    (setq elfeed-search-print-entry-function 'hp/elfeed-entry-line-draw))
#+end_src

**** Youtube
I don’t want YouTube videos to be open with my web browser when I
invoke ~elfeed-show-visit~, so I’ll advise this function to make it
possible to modify the behaviour of said function. Oh, and I already
made [[file:../../scripts.md#ytplay][a neat package]] for playing YouTube videos and friends through
[[https://ytdl-org.github.io/youtube-dl/][youtube-dl]] or its superior fork [[https://github.com/yt-dlp/yt-dlp][yt-dlp]] in mpv.

#+name: elfeed-open-youtube-with-mpv
#+begin_src emacs-lisp
  (defun my/elfeed-filter-youtube-videos (orig-fun &rest args)
    "Open with mpv the video leading to PATH"
    (let ((link (elfeed-entry-link elfeed-show-entry)))
      (when link
        (if (string-match-p ".*youtube\.com.*watch.*" link)
            ;; This is a YouTube video, open it with mpv
            (progn
              (require 'ytplay)
              (ytplay link))
          (apply orig-fun args)))))

  (advice-add 'elfeed-show-visit :around #'my/elfeed-filter-youtube-videos)
#+end_src

A future improvement to be made is to let the user chose the
resolution of the video before it is launched. I may not always have
the best internet connection, and viewing 4K videos on a 1080p display
is not something very useful.
**** elfeed-org
Last but not least, my Elfeed configuration is stored in an org file
thanks to ~elfeed-org~.
#+begin_src emacs-lisp
  (use-package elfeed-org
    :after elfeed
    :straight t
    :init
    (elfeed-org)
    :config
    (setq rmh-elfeed-org-files (list (concat org-directory "elfeed.org.gpg"))))
#+end_src
**** elfeed-tube
#+begin_src emacs-lisp
(use-package elfeed-tube
  :straight t
  :after elfeed
  :config
  (elfeed-tube-setup)
  :bind (:map elfeed-show-mode-map
              ("C-c C-x m" . #'dorneanu/elfeed-play-with-mpv)
              ("C-c C-x f" . elfeed-tube-fetch)
              ([remap save-buffer] . elfeed-tube-save)
              :map elfeed-search-mode-map
              ("C-c C-x m" . #'dorneanu/elfeed-play-with-mpv)
              ("C-c C-x f" . elfeed-tube-fetch)
              ([remap save-buffer] . elfeed-tube-save)))

;; https://github.com/skeeto/elfeed/issues/267
(defun dorneanu/elfeed-play-with-mpv ()
  "Play entry link with mpv."
  (interactive)
  (let ((entry (if (eq major-mode 'elfeed-show-mode) elfeed-show-entry (elfeed-search-selected :single)))
        (quality-arg "")
        (quality-val (completing-read "Max height resolution (0 for unlimited): " '("0" "480" "720" "1080") nil nil)))
    (setq quality-val (string-to-number quality-val))
    (message "Opening %s with height≤%s with mpv..." (elfeed-entry-link entry) quality-val)
    (when (< 0 quality-val)
      (setq quality-arg (format "--ytdl-format=[height<=?%s]" quality-val)))
    (start-process "elfeed-mpv" nil "mpv" quality-arg (elfeed-entry-link entry))))

;; A more genric function
(defun dorneanu/play-video-with-mpv (url)
  "Play a video URL with mpv."
  (interactive "sEnter video URL: ")
  (let ((quality-arg "")
        (quality-val (completing-read "Max height resolution (0 for unlimited): " '("0" "480" "720" "1080") nil nil)))
    (setq quality-val (string-to-number quality-val))
    (message "Opening %s with height≤%s with mpv..." url quality-val)
    (when (< 0 quality-val)
      (setq quality-arg (format "--ytdl-format=[height<=?%s]" quality-val)))
    (start-process "elfeed-mpv" nil "mpv" quality-arg url)))
#+end_src

**** functions
#+begin_src emacs-lisp
  (defun dorneanu/elfeed-search-browse-url-xwidget (&optional use-generic-p)
    "open with xwidget"
    (interactive "P")
    ;; Split window and focus there
    (split-window-right)
    (balance-windows)
    (other-window 1)
    (let ((browse-url-browser-function #'xwidget-webkit-browse-url))
      (elfeed-search-browse-url use-generic-p)))
#+end_src
**** reddigg
Use reddigg to show reddit threads.

#+begin_src emacs-lisp
  (use-package reddigg
    :straight t
    :after (elfeed))

  (defun my/elfeed-reddit-show-comments (&optional link)
    (interactive)
    (require 'reddigg)
    (let* ((entry (if (eq major-mode 'elfeed-show-mode)
                      elfeed-show-entry
                    (elfeed-search-selected :ignore-region)))
           (link (if link link (elfeed-entry-link entry))))
      (reddigg-view-comments link)))
#+end_src

**** hnreader
#+begin_src emacs-lisp
  (use-package hnreader
    :straight t
    :after (elfeed))
#+end_src

Open in same window

#+begin_src emacs-lisp
  (setq hnreader-view-comments-in-same-window nil)
#+end_src

Use hnreader to show HN threads

#+begin_src emacs-lisp
  (defun my/elfeed-hn-show-comments (&optional link)
    (interactive)
    (let* ((entry (if (eq major-mode 'elfeed-show-mode)
                      elfeed-show-entry
                    (elfeed-search-selected :ignore-region)))
           (link (if link link (elfeed-entry-link entry)))
           (content (elfeed-deref (elfeed-entry-content entry)))
           ;; Regex to match the Comments URL
           (comments-url (and content
                              (string-match "Comments URL: <a href=\"\\(https://news.ycombinator.com/item\\?id=[0-9]+\\)\">" content)
                              (match-string 1 content))))
      (message comments-url)
      (setq-local hnreader-view-comments-in-same-window nil)
      (hnreader-promise-comment (format "%s" comments-url))))
#+end_src

Use hnread to show HN threads for a URL at point

#+begin_src emacs-lisp
  (defun my/elfeed-hn-show-comments-at-point ()
    "Kill the url at point."
    (interactive)
    (setq-local hnreader-view-comments-in-same-window t)
    (hnreader-comment (format "%s" (url-get-url-at-point))))
#+end_src
**** COMMENT rdrview
#+begin_src emacs-lisp
  ;; From https://github.com/SqrtMinusOne/dotfiles
  (defun sqrtminusone/rdrview-get (url callback)
    "Get the rdrview representation of URL.

  Call CALLBACK with the output."
    (let* ((buffer (generate-new-buffer "rdrview"))
           (proc (start-process "rdrview" buffer "rdrview"
                                url "-T" "title,sitename,body"
                                "-H")))
      (set-process-sentinel
       proc
       (lambda (process _msg)
         (let ((status (process-status process))
               (code (process-exit-status process)))
           (cond ((and (eq status 'exit) (= code 0))
                  (progn
                    (funcall callback
                             (with-current-buffer (process-buffer process)
                               (buffer-string)))
                    (kill-buffer (process-buffer process))) )
                 ((or (and (eq status 'exit) (> code 0))
                      (eq status 'signal))
                  (let ((err (with-current-buffer (process-buffer process)
                               (buffer-string))))
                    (kill-buffer (process-buffer process))
                    (user-error "Error in rdrview: %s" err)))))))
      proc))

  (defun sqrtminusone/rdrview-parse (dom-string)
    (let ((dom (with-temp-buffer
                 (insert dom-string)
                 (libxml-parse-html-region (point-min) (point-max)))))
      (let (title sitename content (i 0))
        (dolist (child (dom-children (car (dom-by-id dom "readability-page-1"))))
          (when (listp child)
            (cond
             ((eq (car child) 'h1)
              (setq title (dom-text child)))
             ((eq (car child) 'h2)
              (setq sitename (dom-text child)))
             ((eq (car child) 'div)
              (setq content child)))))
        (while (and
                (not (dom-by-tag content 'h1))
                (dom-search
                 content
                 (lambda (el)
                   (when (listp el)
                     (pcase (car el)
                       ('h2 (setf (car el) 'h1))
                       ('h3 (setf (car el) 'h2))
                       ('h4 (setf (car el) 'h3))
                       ('h5 (setf (car el) 'h4))
                       ('h6 (setf (car el) 'h5))))))))
        `((title . ,title)
          (sitename . ,sitename)
          (content . ,(with-temp-buffer
                        (dom-print content)
                        (buffer-string)))))))

  (defvar-local my/elfeed-show-rdrview-html nil)

  (defun sqrtminusone/rdrview-elfeed-show ()
    (interactive)
    (unless elfeed-show-entry
      (user-error "No elfeed entry in this buffer!"))
    (sqrtminusone/rdrview-elfeed-show/rdrview-get
     (elfeed-entry-link elfeed-show-entry)
     (lambda (result)
       (let* ((data (sqrtminusone/rdrview-parse result))
              (inhibit-read-only t)
              (title (elfeed-entry-title elfeed-show-entry))
              (date (seconds-to-time (elfeed-entry-date elfeed-show-entry)))
              (authors (elfeed-meta elfeed-show-entry :authors))
              (link (elfeed-entry-link elfeed-show-entry))
              (tags (elfeed-entry-tags elfeed-show-entry))
              (tagsstr (mapconcat #'symbol-name tags ", "))
              (nicedate (format-time-string "%a, %e %b %Y %T %Z" date))
              (content (alist-get 'content data))
              (feed (elfeed-entry-feed elfeed-show-entry))
              (feed-title (elfeed-feed-title feed))
              (base (and feed (elfeed-compute-base (elfeed-feed-url feed)))))
         (erase-buffer)
         (insert (format (propertize "Title: %s\n" 'face 'message-header-name)
                         (propertize title 'face 'message-header-subject)))
         (when elfeed-show-entry-author
           (dolist (author authors)
             (let ((formatted (elfeed--show-format-author author)))
               (insert
                (format (propertize "Author: %s\n" 'face 'message-header-name)
                        (propertize formatted 'face 'message-header-to))))))
         (insert (format (propertize "Date: %s\n" 'face 'message-header-name)
                         (propertize nicedate 'face 'message-header-other)))
         (insert (format (propertize "Feed: %s\n" 'face 'message-header-name)
                         (propertize feed-title 'face 'message-header-other)))
         (when tags
           (insert (format (propertize "Tags: %s\n" 'face 'message-header-name)
                           (propertize tagsstr 'face 'message-header-other))))
         (insert (propertize "Link: " 'face 'message-header-name))
         (elfeed-insert-link link link)
         (insert "\n")
         (cl-loop for enclosure in (elfeed-entry-enclosures elfeed-show-entry)
                  do (insert (propertize "Enclosure: " 'face 'message-header-name))
                  do (elfeed-insert-link (car enclosure))
                  do (insert "\n"))
         (insert "\n")
         (if content
             (elfeed-insert-html content base)
           (insert (propertize "(empty)\n" 'face 'italic)))
         (setq-local my/elfeed-show-rdrview-html content)
         (goto-char (point-min))))))

#+end_src

* Email
:properties:
:header-args:emacs-lisp: :tangle ~/.config/minimal-emacs/post-init.el
:end:
** mu4e
**** General config
#+begin_src emacs-lisp
  ;; Make sure we find the mu4e package
  (add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")

  (use-package mu4e
    :straight (:type built-in)
    :defer t
    :commands (mu4e)
    :bind (("C-c a m" . mu4e)
           :map mu4e-main-mode-map
           ("U" . mu4e-update-mail-and-index-background)
           :map mu4e-headers-mode-map
           ("TAB" . mu4e-headers-next-unread)
           ("j" . mu4e-view-headers-next)
           ("k" . mu4e-view-headers-prev)
           ("J" . mu4e-search-maildir)
           ;; ("j" . mu4e-move-to-junk)
           ;; ("M" . mu4e-headers-mark-all-unread-read) ; Mark all as read
           :map mu4e-view-mode-map
           ("A" . mu4e-view-attachment-action)
           ("M-o" . ace-link-mu4e)
           ("o" . ace-link-mu4e)
           ("n" . mu4e-scroll-up)
           ("p" . mu4e-scroll-down)
           ("J" . mu4e-view-headers-next)
           ("K" . mu4e-view-headers-prev)
           ;; ("j" . mu4e-move-to-junk)
           )
    :init
    ;; From https://github.com/Phundrak/dotfiles/blob/master/org/config/emacs.org
    ;; (defun mu4e--main-action-str (name func)
    ;;   "This seems to be needed until evil-collection supports the latest version of mu4e."
    ;;   "mu4e-main-action")
    ;; (remove-hook 'mu4e-main-mode-hook 'evil-collection-mu4e-update-main-view)

    ;; Prefer text over html/ritchtext
    (setq mm-discouraged-alternatives '("text/html" "text/richtext"))

    ;; Use completing-read (which is ivy) instead of ido
    (setq mu4e-completing-read-function 'completing-read)

    ;; set mu4e as default mail client
    (setq mail-user-agent 'mu4e-user-agent)

    ;; SMTP related
    (setq message-send-mail-function        'smtpmail-send-it
          smtpmail-stream-type              'tls)

    :config
    ;; Set mu binary
    (setq mu4e-mu-binary "/usr/bin/mu")

    ;; Use passwords from password-store
    (setq auth-sources '(password-store))
    (setq auth-source-debug t)

    ;; Choose which fields to show
    (setq mu4e-headers-fields
          '(
            (:maildir    . 13)
            (:human-date . 12)
            (:flags      . 6)
            (:from       . 22)
            (:subject    . nil)))

    ;; Refresh mail using isync every 10 minutes
    (setq mu4e-update-interval (* 10 60))

    ;; Command used to retrieve new mails
    (setq mu4e-get-mail-command "mbsync -a")

    ;; Defaults
    (setq mu4e-maildir (getenv "MU4E_MAILDIR"))
    (setq-default mu4e-drafts-folder "/private/Drafts")
    (setq-default mu4e-sent-folder   "/private/Sent")
    (setq-default mu4e-trash-folder  "/private/Trash")

    ;; Set citation settings
    (setq message-citation-line-format "\nOn %a, %b %d, %Y at %r %z, %N wrote:\n")
    (setq message-citation-line-function 'message-insert-formatted-citation-line)

    ;; Fancy stuff
    (setq mu4e-use-fancy-chars t)
    ;; <<mu4e-fancy-marks>>

    ;; And change default threading characters to some "nicer" looking chars
    (setq mu4e-headers-thread-child-prefix '("├>" . "├→ "))
    (setq mu4e-headers-thread-last-child-prefix '("└>" . "└→ "))
    (setq mu4e-headers-thread-connection-prefix '("│" . "│ "))
    (setq mu4e-headers-thread-orphan-prefix '("┬>" . "┬→ "))
    (setq mu4e-headers-thread-single-orphan-prefix '("─>" . "─→ "))

    ;; Also change to some nicer characters for marks
    ;; (setq mu4e-headers-new-mark    '("N" . "📨"))
    (setq mu4e-headers-passed-mark  '("P" . "›"))
    (setq mu4e-headers-replied-mark '("R" . "‹"))
    (setq mu4e-headers-seen-mark   '("S" . ""))
    ;; (setq mu4e-headers-attach-mark '("a" . "📎"))
    (setq mu4e-headers-personal-mark '("p" . ""))
    ;; (setq mu4e-headers-unread-mark '("u" . "📫"))

    ;; Set date format (header view)
    (setq mu4e-headers-date-format "%F")

    ;; How should html context be converted
    ;; (setq mu4e-html2text-command "/usr/bin/w3m -T text/html")
    (setq mu4e-html2text-command "iconv -c -t utf-8 | pandoc -f html -t plain")

    ;; Improve rendering of rich-text messages (html)
    (setq shr-color-visible-luminance-min 80)

    ;; Show email address as well and not only the name
    (setq-default mu4e-view-show-addresses t)

    ;; Don't reply to self
    (setq mu4e-compose-dont-reply-to-self t)

    ;; Setup some handy shortcuts
    ;; you can quickly switch to your Inbox -- press ``ji''
    ;; then, when you want archive some messages, move them to
    ;; the 'All Mail' folder by pressing ``ma''.

    ;; View mail in browser with "a V"
    (add-to-list 'mu4e-view-actions
                 '("ViewInBrowser" . mu4e-action-view-in-browser) t)
    (add-to-list 'mu4e-view-actions
                 '("fViewInChrome" . mu4e-action-view-in-chrome) t)
    (add-to-list 'mu4e-view-actions
                 '("xViewXWidget" . mu4e-action-view-with-xwidget) t)

    (setq mu4e-maildir-shortcuts
          '(
            ("/variomedia/inbox"   . ?v)
            ("/gmail/inbox"    . ?g)
            ("/cashlink/inbox"   . ?c)
            ("/private/Trash"   . ?t)
            ("/private/Drafts"  . ?d)
            ("/private/Junk"    . ?j)
            ("/private/Archive" . ?a)))

    ;; Set contexts
    (dorneanu/set-mu4e-contexts)
    )

  ;; (add-hook 'mu4e-view-mode-hook (lambda () (visual-fill-column-mode)))
#+end_src

**** Bookmarks
#+begin_src emacs-lisp
  (setq mu4e-bookmarks
        `(
          ("maildir:/Sent" "Sent messages" ?s)
          ("flag:unread AND NOT flag:trashed" "Unread messages" ?U)
          ("date:today..now AND NOT flag:trashed" "Today's messages" ?t)
          ("date:7d..now AND NOT flag:trashed" "Last 7 days" ?w)
          ("date:1m..now AND NOT flag:trashed" "Last month" ?m)
          ("date:1y..now AND NOT flag:trashed" "Last year" ?y)
          ("flag:trashed AND NOT flag:trashed" "Trash" ?T)
          ("from:yo@dev.to AND NOT flag:trashed" "dev.to" ?d)
          ("from:jira@*" "Jira" ?j)
          ("from:notifications@github.com" "Github" ?g)
          ;; (,(s-join " "
          ;;           '("OR noreply@tagesspiegel.de"
          ;;             "OR support@lagedernation.org"
          ;;             "OR hello@blinkist.com"
          ;;             "OR info@smarticular.net"
          ;;             "OR newsletter@*"
          ;;             "OR support@xeroshoes.com"))
          ;;  "Newletter" ?n)
          ("mime:image/* AND NOT flag:trashed" "Messages with images" ?p)))
#+end_src

**** Fancy stuff
From https://github.com/Phundrak/dotfiles

#+name: mu4e-fancy-marks-tbl
| Mark      | Flag | Icon        |
|-----------+------+-------------|
| draft     | D    | pencil      |
| flagged   | F    | flag        |
| new       | N    | rss         |
| passed    | P    | check       |
| replied   | R    | reply       |
| seen      | S    | eye         |
| unread    | u    | eye-slash   |
| trashed   | T    | trash       |
| attach    | a    | paperclip   |
| encrypted | x    | lock        |
| signed    | s    | certificate |

#+name: mu4e-fancy-marks-gen
#+header: :tangle no :exports none :results value :cache yes
#+begin_src emacs-lisp :var table=mu4e-fancy-marks-tbl
  (mapconcat (lambda (line)
               (let ((mark (car line))
                     (flag (cadr line))
                     (icon (caddr line)))
                 (format "mu4e-headers-%s-mark `(\"%s\" . ,(all-the-icons-faicon \"%s\" :height 0.8))"
                         mark
                         flag
                         icon)))
             table
             "\n")
#+end_src

#+RESULTS[c6ed5d4bec4c10339a7de52a70822af74d782e62]: mu4e-fancy-marks-gen
#+begin_example
mu4e-headers-draft-mark `("D" . ,(all-the-icons-faicon "pencil" :height 0.8))
mu4e-headers-flagged-mark `("F" . ,(all-the-icons-faicon "flag" :height 0.8))
mu4e-headers-new-mark `("N" . ,(all-the-icons-faicon "rss" :height 0.8))
mu4e-headers-passed-mark `("P" . ,(all-the-icons-faicon "check" :height 0.8))
mu4e-headers-replied-mark `("R" . ,(all-the-icons-faicon "reply" :height 0.8))
mu4e-headers-seen-mark `("S" . ,(all-the-icons-faicon "eye" :height 0.8))
mu4e-headers-unread-mark `("u" . ,(all-the-icons-faicon "eye-slash" :height 0.8))
mu4e-headers-trashed-mark `("T" . ,(all-the-icons-faicon "trash" :height 0.8))
mu4e-headers-attach-mark `("a" . ,(all-the-icons-faicon "paperclip" :height 0.8))
mu4e-headers-encrypted-mark `("x" . ,(all-the-icons-faicon "lock" :height 0.8))
mu4e-headers-signed-mark `("s" . ,(all-the-icons-faicon "certificate" :height 0.8))
#+end_example

Let’s enable them and set them:
#+name: mu4e-fancy-marks
#+begin_src emacs-lisp :tangle no
  (setq mu4e-use-fancy-chars t
        <<mu4e-fancy-marks-gen()>>)
#+end_src

**** View mode
#+name: mu4e-view-mode
#+begin_src emacs-lisp :tangle no
  (add-hook 'mu4e-view-mode-hook (lambda () (visual-fill-column-mode)))
#+end_src

**** Contexts
Set contexts
#+begin_src emacs-lisp
  (defun dorneanu/set-mu4e-contexts ()
    "Set mail contexts for mu4e"
    (interactive)
    (setq mu4e-contexts
          `( ,(make-mu4e-context
               :name "gmail"
               :enter-func (lambda () (mu4e-message "Entering gmail context"))
               :leave-func (lambda () (mu4e-message "Leaving gmail context"))
               ;; we match based on the contact-fields of the message
               :match-func
               (lambda (msg)
                 (when msg
                   (string-prefix-p "/gmail" (mu4e-message-field msg :maildir))))
               :vars `((user-mail-address . ,(password-store-get "mail/gmail/personal/username"))
                       (user-full-name    . "Cyneox")
                       (smtpmail-smtp-user . ,(password-store-get "mail/gmail/personal/username"))
                       (smtpmail-smtp-server  . "smtp.gmail.com")
                       (smtpmail-default-smtp-server  . "smtp.gmail.com")
                       (smtpmail-smtp-service . 465)
                       (smtpmail-stream-type  . ssl)
                       (mu4e-compose-signature . "Cyneox via Gmail")
                       (mu4e-drafts-folder  . "/[Gmail]/drafts")
                       (mu4e-sent-folder  . "/[Gmail]/sent")
                       (mu4e-refile-folder  . "/[Gmail]/All Mail")
                       (mu4e-trash-folder  . "/[Gmail]/bin")))
             ,(make-mu4e-context
               :name "variomedia"
               :enter-func (lambda () (mu4e-message "Switch to the variomedia context"))
               :match-func
               (lambda (msg)
                 (when msg
                   (string-prefix-p "/variomedia" (mu4e-message-field msg :maildir))))
               :vars `((user-mail-address . ,(password-store-get "mail/personal/username"))
                       (user-full-name    . "Victor Dorneanu")
                       (smtpmail-smtp-user . ,(password-store-get "mail/personal/username")) (smtpmail-smtp-server  . "smtp.variomedia.de")
                       (smtpmail-default-smtp-server  . "smtp.variomedia.de")
                       (smtpmail-smtp-service . 465)
                       (smtpmail-stream-type  . ssl)
                       (mu4e-compose-signature . "Victor via Emacs")
                       (mu4e-drafts-folder  . "/variomedia/drafts")
                       (mu4e-sent-folder  . "/variomedia/sent")
                       (mu4e-trash-folder  . "/variomedia/bin")))
             ,(make-mu4e-context
               :name "cashlink"
               :enter-func (lambda () (mu4e-message "Switch to the cashlink context"))
               :match-func
               (lambda (msg)
                 (when msg
                   (string-prefix-p "/cashlink" (mu4e-message-field msg :maildir))))
               :vars `((user-mail-address . ,(password-store-get "mail/gmail/work/username"))
                       (user-full-name    . "Victor Dorneanu")
                       (smtpmail-smtp-user . ,(password-store-get "mail/gmail/work/username"))
                       (smtpmail-smtp-server  . "smtp.gmail.com")
                       (smtpmail-smtp-service . 465)
                       (smtpmail-stream-type  . ssl)
                       (mu4e-drafts-folder  . "/cashlink/drafts")
                       (mu4e-sent-folder  . "/cashlink/sent")
                       (mu4e-trash-folder  . "/cashlink/bin")
                       (mu4e-compose-signature . ,(concat "Victor Dorneanu\n" "Security Architect @ Cashlink\n"))
                       ))))
    )

#+end_src

#+results:
: dorneanu/set-mu4e-contexts
**** Reply
I often want to reply without the original message:
#+begin_src emacs-lisp
  ;; From https://github.com/djcb/mu/issues/2345
  ;; (after! mu4e
  ;;   (defun dorneanu/mu4e-delete-citation ()
  ;;     (delete-region (point) (point-max)))

  ;;   (defun dorneanu/mu4e-reply (prefix)
  ;;     (interactive "P")
  ;;     (setq mu4e-compose-cite-function (if prefix
  ;;                                          #'dorneanu/mu4e-delete-citation
  ;;                                        #'message-cite-original-without-signature))
  ;;     (mu4e-compose-reply))

  ;;   (define-key mu4e-view-mode-map "R" #'dorneanu/mu4e-reply)
  ;;   (define-key mu4e-headers-mode-map "R" #'dorneanu/mu4e-reply)
  ;;   )
#+end_src
* Applications
:properties:
:header-args:emacs-lisp: :tangle ~/.config/minimal-emacs/post-init.el
:end:
** AI
*** copilot
#+begin_src emacs-lisp
(use-package copilot
  :straight (:host github :repo "copilot-emacs/copilot.el" :files ("*.el"))
  :after corfu
  :hook (prog-mode . copilot-mode)
  :bind ((:map prog-mode-map
               ("M-k" . copilot-complete))
         (:map copilot-completion-map
               ("M-l" . copilot-accept-completion)
               ("M-1" . copilot-accept-completion-by-word)
               ("M-2" . copilot-accept-completion-by-line))))
#+end_src

