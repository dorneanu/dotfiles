#+property: header-args:emacs-lisp  :mkdirp yes :lexical t :exports code
#+property: header-args:emacs-lisp+ :mkdirp yes :noweb no-export
#+property: header-args:emacs-lisp+ :results none
#+property: header-args:emacs-lisp+ :tangle ~/.config/minimal-emacs-dev/post-init.el
#+startup: indent overview

* Basics
** pre-early-init
:properties:
:header-args:emacs-lisp: :tangle ~/.config/minimal-emacs-dev/pre-early-init.el
:end:
#+begin_src emacs-lisp
  ;;; pre-earlly-init.el --- Pre Early Init -*- no-byte-compile: t; lexical-binding: t; -*-

;; Activate debugging
(setq minimal-emacs-debug t)
#+end_src

** pre-init
:properties:
:header-args:emacs-lisp: :tangle ~/.config/minimal-emacs-dev/pre-init.el
:end:
*** straight.el
#+begin_src emacs-lisp
;;; pre-init.el --- Pre Init -*- no-byte-compile: t; lexical-binding: t; -*-

;; straight.el options
(setq straight-repository-branch "develop"        ; Use develop branch of straight.el
      straight-use-package-by-default t          ; Make `straight-use-package' the default
      straight-check-for-modifications '(check-on-save find-when-checking) ; Check for modified files
      ;; straight-vc-git-default-clone-depth 1      ; Shallow clone to save space
      straight-enable-use-package-integration t   ; Enable use-package integration
      straight-cache-autoloads t                 ; Cache autoloads to improve startup time
      )

;; Bootstrapping straight.el
;; See: github.com/radian-software/straight.el#bootstrapping-straightel
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name
        "straight/repos/straight.el/bootstrap.el"
        (or (bound-and-true-p straight-base-dir)
            user-emacs-directory)))
      (bootstrap-version 7))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

;; Configure `use-package'
(straight-use-package 'use-package)
;; (straight-use-package 'org)

;; Enable verbose logging for debugging
(setq use-package-verbose t
      use-package-compute-statistics t  ; Generate loading statistics
      debug-on-error t)                 ; Show the debugger on errors

;; Fixes eglot problem ("Feature provided by other file: ...")
(straight-use-package '(project :type built-in))
(straight-use-package '(xref :type built-in))
#+end_src
*** COMMENT gcmh: Garbage collection
#+begin_src emacs-lisp
(use-package gcmh
  :straight t
  :diminish gcmh-mode
  :demand t
  :config
  (setq gcmh-idle-delay 5
        gcmh-high-cons-threshold (* 512 1024 1024)) ; 512MB
  ;; (setq gcmh-idle-delay 5
  ;;       gcmh-high-cons-threshold (* 16 1024 1024))  ; 16mb
  (gcmh-mode 1))
#+end_src

** post-init: start
:properties:
:header-args:emacs-lisp: :tangle ~/.config/minimal-emacs-dev/post-init.el
:end:

Header:
#+begin_src emacs-lisp
;;; post-init.el --- Post Init -*- no-byte-compile: t; lexical-binding: t; -*-
#+end_src

Measure time:
#+begin_src emacs-lisp
(defvar before-user-init-time (current-time)
  "Value of `current-time' when Emacs begins loading `user-init-file'.")
  (message "Loading Emacs...done (%.3fs)"
         (float-time (time-subtract before-user-init-time
                                    before-init-time)))
#+end_src
*** Defaults
#+begin_src emacs-lisp
;; Auto-revert in Emacs is a feature that automatically updates the
;; contents of a buffer to reflect changes made to the underlying file
;; on disk.
(add-hook 'after-init-hook #'global-auto-revert-mode)

;; recentf is an Emacs package that maintains a list of recently
;; accessed files, making it easier to reopen files you have worked on
;; recently.
(add-hook 'after-init-hook #'recentf-mode)

;; savehist is an Emacs feature that preserves the minibuffer history between
;; sessions. It saves the history of inputs in the minibuffer, such as commands,
;; search strings, and other prompts, to a file. This allows users to retain
;; their minibuffer history across Emacs restarts.
(add-hook 'after-init-hook #'savehist-mode)

;; save-place-mode enables Emacs to remember the last location within a file
;; upon reopening. This feature is particularly beneficial for resuming work at
;; the precise point where you previously left off.
;; (add-hook 'after-init-hook #'save-place-mode)
#+end_src
*** epa-file
Configure GPG assistant
#+begin_src emacs-lisp
(use-package epa-file
  :straight (:type built-in)
  :config
  (setq
   epa-file-encrypt-to '("B97574F0096F8AFAA099E1FB2FE40B159E04B416")
   password-cache nil
   password-cache-expiry nil
   epa-pinentry-mode 'ask)
  :custom
  (epa-file-select-keys 'silent))
#+end_src
*** custom.el
#+begin_src emacs-lisp
(load custom-file 'noerror 'no-message)
#+end_src
*** locals
:properties:
:header-args:emacs-lisp: :tangle ~/.config/minimal-emacs-dev/pre-init.el
:end:
Make sure we load host specific settings
#+begin_src emacs-lisp
(minimal-emacs-load-user-init "local.el")
#+end_src
* Keybindings
:properties:
:header-args:emacs-lisp: :tangle ~/.config/minimal-emacs-dev/post-init.el
:end:
** navigation
Now some keybindings for the ~Super_L~ key:

#+begin_src emacs-lisp
;; lower case “s” is for super Use windows key (super) for window navigation
(global-set-key (kbd "s-h") #'windmove-left)
(global-set-key (kbd "s-l") #'windmove-right)
(global-set-key (kbd "s-k") #'windmove-up)
(global-set-key (kbd "s-j") #'windmove-down)

;; Tab navigation
(global-set-key (kbd "s-.") #'tab-next)
(global-set-key (kbd "s-,") #'tab-previous)
;; (global-set-key (kbd "s-1") #'tab-line-switch-to-prev-tab)
;; (global-set-key (kbd "s-2") #'tab-line-switch-to-next-tab)
#+end_src

Some keybindings for *paragraphs*:

#+begin_src emacs-lisp
(global-set-key (kbd "s-i") #'forward-paragraph)
(global-set-key (kbd "s-u") #'backward-paragraph)
#+end_src

For buffers:
#+begin_src emacs-lisp
(keymap-global-set "C-c b h" #'previous-buffer)
(keymap-global-set "C-c b l" #'next-buffer)
#+end_src
** globals
Disable keyboard-escape-quit as it always closes windows in a nasty way:

#+begin_src emacs-lisp
;; Don't forget to handle minibuffer with "minibuffer-keyboard-quit".
(global-set-key (kbd "<escape>") 'keyboard-quit)

;; Avoid entering the ~repeat-complex-cammand~ when quiting everything with ~C-x~.
(global-unset-key (kbd "C-x <escape> <escape>")) ; repeat-complex-command

#+end_src

Something I use a lot:

#+begin_src emacs-lisp
;; (bind-key "C-c d" 'delete-pair)
#+end_src

*** Change from horizotanl split to vertical split
#+begin_src emacs-lisp
;; https://stackoverflow.com/questions/14881020/emacs-shortcut-to-switch-from-a-horizontal-split-to-a-vertical-split-in-one-move
(defun toggle-window-split ()
  (interactive)
  (if (= (count-windows) 2)
      (let* ((this-win-buffer (window-buffer))
             (next-win-buffer (window-buffer (next-window)))
             (this-win-edges (window-edges (selected-window)))
             (next-win-edges (window-edges (next-window)))
             (this-win-2nd (not (and (<= (car this-win-edges)
                                         (car next-win-edges))
                                     (<= (cadr this-win-edges)
                                         (cadr next-win-edges)))))
             (splitter
              (if (= (car this-win-edges)
                     (car (window-edges (next-window))))
                  'split-window-horizontally
                'split-window-vertically)))
        (delete-other-windows)
        (let ((first-win (selected-window)))
          (funcall splitter)
          (if this-win-2nd (other-window 1))
          (set-window-buffer (selected-window) this-win-buffer)
          (set-window-buffer (next-window) next-win-buffer)
          (select-window first-win)
          (if this-win-2nd (other-window 1))))))

(global-set-key (kbd "C-x |") 'toggle-window-split)
#+end_src

*** MacOS
#+begin_src emacs-lisp
(setq mac-command-modifier      'super
      ns-command-modifier       'meta
      mac-option-modifier       'super
      ns-option-modifier        'super
      mac-right-option-modifier 'none
      ns-right-option-modifier  'none)
#+end_src

*** toggles
#+begin_src emacs-lisp
(keymap-global-set "M-g t a" #'awesome-tab-mode)
(keymap-global-set "M-g t e" #'global-eldoc-mode)
(keymap-global-set "M-g t o" #'olivetti-mode)
(keymap-global-set "M-g t t b" #'tab-bar-mode)
(keymap-global-set "M-g t t n" #'global-tab-line-mode)
(keymap-global-set "M-g t f" #'focus-mode)
(keymap-global-set "M-g t h" #'highlight-indent-guides-mode)
(keymap-global-set "M-g t H" #'hl-line-mode)
(keymap-global-set "M-g t n" #'display-line-numbers-mode)
(keymap-global-set "M-g t F" #'fringe-mode)
(keymap-global-set "M-g t v" #'visual-line-fill-column-mode)
(keymap-global-set "M-g t V" #'vertico-posframe-mode)
(keymap-global-set "M-g t w" #'hydra-windows/body)
#+end_src

#+RESULTS:
: hydra-windows/body

*** COMMENT inserts
#+begin_src emacs-lisp
(+map!
 ;; ====== Inserts ======
 "ii"     #'org-download-clipboard
 "ioc"    #'dorneanu/org-insert-link-from-clipboard
 "iot"    #'counsel-org-tag)
#+end_src

*** hydras
#+begin_src emacs-lisp
(keymap-global-set "M-g t . w" #'+window-adjust-size-transient)
#+end_src
*** jumps
#+begin_src emacs-lisp
(keymap-global-set "C-x j c" #'avy-goto-char)
(keymap-global-set "C-x j w" #'avy-goto-word-1)
(keymap-global-set "C-x j t" #'centaur-tabs-ace-jump)
(keymap-global-set "C-x j j" #'consult-goto-line)
;; This doesn't fit here
(keymap-global-set "M-j" #'crux-top-join-line)
#+end_src

*** projects
#+begin_src emacs-lisp
(keymap-global-set "M-g 0" #'dirvish-side)
(keymap-global-set "C-M-0" #'indent-region)
#+end_src

*** COMMENT searches
#+begin_src emacs-lisp
(+map!
 ;; ====== Searches ======
 "srd"   #'my/rg-dotemacs
 "srh"   #'my/rg-org-roam-directory-huberman
 "sro"   #'my/rg-org-roam-directory)
#+end_src
*** COMMENT tabs
#+begin_src emacs-lisp
(+map!
 ;; ====== Tabs ======
 "TAB SPC"   #'tab-bar-switch-to-recent-tab)
#+end_src
*** COMMENT evil-org
#+begin_src emacs-lisp
(with-eval-after-load 'evil-org-agenda
  ;; Disable SPC key in org-agenda
  ;; (define-key org-agenda-mode-map (kbd "SPC") nil)
  (evil-define-key 'motion org-agenda-mode-map (kbd "SPC") nil))
#+end_src
*** COMMENT org-mode
#+begin_src emacs-lisp
(with-eval-after-load 'org
  (define-prefix-command 'dorneanu/my-org-mode-map)
  (define-key org-mode-map (kbd "C-c o") 'dorneanu/my-org-mode-map)

  (defun dorneanu/my-org-key (key)
    "Create a key sequence for org-mode custom bindings."
    (kbd (concat "C-c o " key)))

  ;; Basic structure
  (define-key org-mode-map (dorneanu/my-org-key "i h") #'org-insert-heading)
  (define-key org-mode-map (dorneanu/my-org-key "i s") #'org-insert-subheading)
  (define-key org-mode-map (dorneanu/my-org-key "i t") #'org-insert-todo-heading)
  (define-key org-mode-map (dorneanu/my-org-key "i c") #'dorneanu/org-insert-link-from-clipboard)

  ;; Clocking
  (define-key org-mode-map (dorneanu/my-org-key "c i") #'org-clock-in)
  (define-key org-mode-map (dorneanu/my-org-key "c o") #'org-clock-out)
  (define-key org-mode-map (dorneanu/my-org-key "c m") #'dorneanu/org-clock-enter-manually)

  ;; Navigation
  (define-key org-mode-map (dorneanu/my-org-key "n n") #'org-next-visible-heading)
  (define-key org-mode-map (dorneanu/my-org-key "n p") #'org-previous-visible-heading)

  ;; Todo state
  (define-key org-mode-map (dorneanu/my-org-key "t t") #'org-todo)
  (define-key org-mode-map (dorneanu/my-org-key "t d") #'org-deadline)
  (define-key org-mode-map (dorneanu/my-org-key "t s") #'org-schedule)

  ;; Tags and properties
  (define-key org-mode-map (dorneanu/my-org-key ":") #'org-set-tags-command)
  (define-key org-mode-map (dorneanu/my-org-key "p") #'org-set-property)

  ;; Formatting
  ;; (define-key org-mode-map (dorneanu/my-org-key "b") #'org-bold)
  ;; (define-key org-mode-map (dorneanu/my-org-key "i") #'org-italic)
  ;; (define-key org-mode-map (dorneanu/my-org-key "u") #'org-underline)
  (define-key org-mode-map (dorneanu/my-org-key "ff") #'org-emphasize)

  ;; Export
  (define-key org-mode-map (dorneanu/my-org-key "e e") #'org-export-dispatch)

  ;; Misc
  (define-key org-mode-map (dorneanu/my-org-key "a") #'org-archive-subtree)
  (define-key org-mode-map (dorneanu/my-org-key "r") #'org-refile)
  (define-key org-mode-map (dorneanu/my-org-key "l") #'org-insert-link))
#+end_src
* Completion
** vertico
#+begin_src emacs-lisp
(use-package vertico
  :straight t
  :defer t
  :commands vertico-mode
  :hook ((after-init . vertico-mode)
         (vertico-mode . vertico-multiform-mode))
  :hook (minibuffer-setup . vertico-repeat-save)
  :bind (("M-R" . vertico-repeat)
         :map vertico-map
         ("RET" . vertico-directory-enter)
         ("DEL" . vertico-directory-delete-char)
         ("M-DEL" . vertico-directory-delete-word))
  :custom
  (vertico-cycle t)
  (vertico-resize nil)
  (vertico-count 12))
#+end_src
** vertico-posframe
#+begin_src emacs-lisp
(use-package vertico-posframe
  :straight t
  :demand t
  ;; :hook (vertico-mode . vertico-posframe-mode)
  :config
  (vertico-posframe-mode 1)
  (setq vertico-posframe-border-width 2
        vertico-posframe-parameters '((internal-border-width . 2))))
;; (add-hook 'vertico-posframe-mode-hook (set-face-background 'vertico-posframe-border (face-background 'fringe))))
#+end_src

** vertico-multiform
#+begin_src emacs-lisp
(use-package vertico-multiform
  :straight (:type built-in)
  :demand t
  :config
  ;; (setq vertico-multiform-commands
  ;;       '((consult-line
  ;;          posframe
  ;;         (vertico-posframe-poshandler . posframe-poshandler-frame-top-center)
  ;;         (vertico-posframe-fallback-mode . vertico-buffer-mode))
  ;;         (consult-org-heading buffer)
  ;;         (consult-imenu buffer)
  ;;         (consult-ripgrep buffer)
  ;;         (consult-project-buffer buffer)
  ;;         (consult-project-extra-find buffer)))
  ;; (setq vertico-multiform-commands
  ;;       '((consult-line
  ;;          posframe
  ;;          (vertico-posframe-poshandler . posframe-poshandler-frame-top-center)
  ;;          (vertico-posframe-border-width . 10)
  ;;          ;; NOTE: This is useful when emacs is used in both in X and
  ;;          ;; terminal, for posframe do not work well in terminal, so
  ;;          ;; vertico-buffer-mode will be used as fallback at the
  ;;          ;; moment.
  ;;          (vertico-posframe-fallback-mode . vertico-buffer-mode)
  ;;          (consult-project-buffer buffer))
  ;;         (t posframe)))
  ;; (setq vertico-multiform-commands
  ;;       '((consult-line
  ;;          ;; posframe
  ;;          ;; (vertico-posframe-poshandler . posframe-poshandler-frame-top-center)
  ;;          ;; (vertico-posframe-border-width . 10)
  ;;          ;; NOTE: This is useful when emacs is used in both in X and
  ;;          ;; terminal, for posframe do not work well in terminal, so
  ;;          ;; vertico-buffer-mode will be used as fallback at the
  ;;          ;; moment.
  ;;          ;; (vertico-posframe-fallback-mode . vertico-buffer-mode))
  ;;         (t posframe)))
  ;; (add-to-list 'vertico-multiform-categories
  ;;              '(jinx grid (vertico-grid-annotate . 35)))

   (setq vertico-multiform-commands
         '((consult-line reverse buffer (:not posframe))
           (consult-project-buffer buffer (:not posframe))
           (consult-ripgrep buffer (:not posframe))
           (xref-find-references buffer (:not posframe))
           (consult-imenu reverse buffer (:not posframe))))
  (vertico-multiform-mode 1))
#+end_src

** orderless
#+begin_src emacs-lisp
(use-package orderless
  ;; Vertico leverages Orderless' flexible matching capabilities, allowing users
  ;; to input multiple patterns separated by spaces, which Orderless then
  ;; matches in any order against the candidates.
  :straight t
  :custom
  (completion-styles '(orderless basic))
  (completion-category-defaults nil)
  (completion-category-overrides '((file (styles partial-completion)))))
#+end_src
** marginalia
#+begin_src emacs-lisp
(use-package marginalia
  ;; Marginalia allows Embark to offer you preconfigured actions in more contexts.
  ;; In addition to that, Marginalia also enhances Vertico by adding rich
  ;; annotations to the completion candidates displayed in Vertico's interface.
  :straight t
  :defer t
  :bind (("M-A" . marginalia-cycle)
         :map minibuffer-local-map
         ("M-A" . marginalia-cycle))
  :commands (marginalia-mode marginalia-cycle)
  :hook (after-init . marginalia-mode))

#+end_src

** consult
#+begin_src emacs-lisp
;; From https://github.com/abougouffa/minemacs/blob/main/core/me-lib-extra.el
;;;###autoload
(defun +region-or-thing-at-point (&optional leave-region-marked)
  "Return the region or the thing at point.

  If LEAVE-REGION-MARKED is no-nil, don't call `desactivate-mark'
  when a region is selected."
  (when-let* ((thing (ignore-errors
                       (or (prog1 (thing-at-point 'region t)
                             (unless leave-region-marked (deactivate-mark)))
                           (cl-some (+apply-partially-right #'thing-at-point t)
                                    '(symbol email number string word))))))
    ;; If the matching thing has multi-lines, join them
    (string-join (string-lines thing))))

(use-package consult
  :straight t
  :hook (embark-collect-mode . consult-preview-at-point-mode)
  ;; Enable automatic preview at point in the *Completions* buffer. This is
  ;; relevant when you use the default completion UI.
  :hook (completion-list-mode . consult-preview-at-point-mode)
  :bind (;; C-c bindings in `mode-specific-map'
         ("C-c M-x" . consult-mode-command)
         ("C-c h" . consult-history)
         ("C-c k" . consult-kmacro)
         ;; ("C-c m" . consult-man)
         ("C-c i" . consult-info)
         ([remap Info-search] . consult-info)
         ([remap recentf-open-files] . consult-recent-file)
         ([remap recentf] . consult-recent-file)
         ;; C-x bindings in `ctl-x-map'
         ("C-x M-:" . consult-complex-command)
         ("C-x b" . consult-buffer)
         ("C-x 4 b" . consult-buffer-other-window)
         ("C-x 5 b" . consult-buffer-other-frame)
         ("C-x t b" . consult-buffer-other-tab)
         ("C-x r b" . consult-bookmark)
         ("C-x p b" . consult-project-buffer)
         ;; Custom M-# bindings for fast register access
         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store)
         ("C-M-#" . consult-register)
         ;; Other custom bindings
         ("M-y" . consult-yank-pop)
         ;; M-g bindings in `goto-map'
         ("M-g C" . consult-theme)
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flymake)
         ("M-g g" . consult-goto-line)
         ("M-g M-g" . consult-goto-line)
         ("M-g o" . consult-outline)
         ("M-g O" . consult-org-heading)
         ("M-g j a" . consult-org-agenda)
         ;; Pulsar commands
         ("M-g l t" . pulsar-recenter-top)
         ("M-g l m" . pulsar-recenter-middle)
         ("M-g l c" . pulsar-recenter-center)
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ;; M-s bindings in `search-map'
         ("M-s d" . consult-find)
         ("M-s c" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s l" . consult-line)
         ("M-s L" . consult-line-multi)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)
         ;; Isearch integration
         ("M-s e" . consult-isearch-history)
         :map isearch-mode-map
         ("M-e" . consult-isearch-history)
         ("M-s e" . consult-isearch-history)
         ("M-s l" . consult-line)
         ("M-s L" . consult-line-multi)
         ;; Minibuffer history
         :map minibuffer-local-map
         ("M-s" . consult-history)
         ("M-r" . consult-history))

  ;; Enable automatic preview at point in the *Completions* buffer.
  :hook (completion-list-mode . consult-preview-at-point-mode)

  :init
  ;; Optionally configure the register formatting. This improves the register
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  :config
  ;; Don't preview GPG encrypted files to avoid asking about the decryption password
  (push "\\.gpg$" consult-preview-excluded-files)
  (setq-default completion-in-region-function #'consult-completion-in-region)

  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep consult-find consult-grep consult-fd
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   ;; :preview-key "M-."
   :preview-key '(:debounce 0.4 any)
   :initial (+region-or-thing-at-point))
  (setq consult-narrow-key "<"))
#+end_src
** embark
#+begin_src emacs-lisp
;; Some usefull functions
(defun dorneanu/vsplit-file-open (f)
  (let ((evil-vsplit-window-right t))
    (split-window-vertically)
    (find-file f)))

(defun dorneanu/split-file-open (f)
  (let ((evil-split-window-below t))
    (split-window-horizontally)
    (find-file f)))

(use-package embark
  :straight t
  :demand t
  :after (vertico)
  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)  ;; alternative for describe-bindings
   :map embark-file-map
   ("V" . dorneanu/vsplit-file-open)
   ("X" . dorneanu/split-file-open))
  :init
  (setq prefix-help-command #'embark-prefix-help-command)

  :config
  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

;; Using embark and ace
;; (require 'ace-window)

(defun dorneanu/embark-ace-action (fn)
  "Create an embark action that uses ace-window to select target window."
  (lambda (target)
    (with-demoted-errors "%S"
      (let ((window (if (> (length (aw-window-list)) 1)
                        (aw-select "Select window: ")
                      (selected-window))))
        (when window
          (select-window window)
          (funcall fn target))))))

;; Define ace-window variants of common actions
(defun dorneanu/embark-find-file-ace (file)
  "Open file in ace-selected window."
  (let ((window (aw-select "Select window: ")))
    (when window
      (select-window window)
      (find-file file))))

(defun dorneanu/embark-switch-to-buffer-ace (buffer)
  "Switch to buffer in ace-selected window."
  (let ((window (aw-select "Select window: ")))
    (when window
      (select-window window)
      (switch-to-buffer buffer))))

;; Add to embark keymaps
(define-key embark-file-map "O" #'dorneanu/embark-find-file-ace)
(define-key embark-buffer-map "O" #'dorneanu/embark-switch-to-buffer-ace)

(use-package embark-consult
  :straight t
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

** counsel
I only need ~counsel-org-tag~
#+begin_src emacs-lisp
(use-package counsel
  :straight t
  :commands (counsel-org-tag))
#+end_src
* Org
:properties:
:header-args:emacs-lisp: :tangle ~/.config/minimal-emacs-dev/post-init.el
:end:
** org-babel
#+begin_src emacs-lisp
(with-eval-after-load 'org
  ;; (setq org-src-window-setup 'reorganize-frame)
  (setq org-src-fontify-natively t)  ; syntax highlighting for source code blocks

  ;; Tab should do indent in code blocks
  (setq org-src-tab-acts-natively nil)

  ;; Don't remove (or add) any extra whitespace
  (setq org-src-preserve-indentation nil)
  (setq org-edit-src-content-indentation 0))

;; Install ob-go
(use-package ob-go
  :straight t
  :defer t)

(use-package jq-mode
  :straight t
  :defer t)

(use-package ob-mermaid
  :straight t
  :defer t)

(use-package ob-graphql
  :straight t
  :defer t)

(org-babel-do-load-languages
 'org-babel-load-languages
 '((sql . t)
   (go . t)
   (plantuml . t)
   (emacs-lisp . t)
   (mermaid . t)
   (graphql . t)
   (shell . t)))

;; Automatically display inline images after babel execution
(add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)
#+end_src

#+RESULTS:

* Programming
:properties:
:header-args:emacs-lisp: :tangle ~/.config/minimal-emacs-dev/post-init.el
:end:
** Languages
*** golang
#+begin_src emacs-lisp
(use-package go-mode
  :straight t
  :mode "\\.go\\'"
  :hook ((go-mode go-ts-mode) . apheleia-mode)
  :bind (:map go-mode-map
              ("C-c g e h" . eldoc-box-hover-mode)
              ("C-c g l e" . my-switch-to-eglot)
              ("C-c g l l" . my-switch-to-lsp)
              ("M-?" . godoc-at-point)
              ("M-." . xref-find-definitions)
              ("M-_" . xref-find-references)
              ;; ("M-*" . pop-tag-mark) ;; Jump back after godef-jump
              ("C-c g m r" . go-run))
  :custom
  (gofmt-command "goimports")
  :config
  ;; Configure LSP profiles
  (defun my-switch-to-eglot ()
    "Switch to eglot for the current Go buffer."
    (interactive)
    ;; Configure and start eglot
    (add-to-list 'completion-styles 'flex)
    (setq-local eglot-debug-server-messages t)
    (setq-local eglot-events-buffer-size 0)
    (setq-local eglot-workspace-configuration
                '(:gopls
                  ((usePlaceholders . t))))

    ;; Start eglot
    (eglot-ensure))

  (defun my-switch-to-lsp ()
    "Switch to lsp-mode for the current Go buffer."
    (interactive)
    ;; Configure and start lsp-mode
    (add-to-list 'completion-styles 'flex)
    (setq-local lsp-log-io t)
    (setq-local lsp-idle-delay 0.1)
    (setq-local lsp-enable-snippet t)

    ;; Start LSP
    (lsp-deferred)))

(use-package gotest
  :straight t
  :after go-mode
  :bind (:map go-mode-map
              ("C-c t f" . go-test-current-file)
              ("C-c t t" . go-test-current-test)
              ("C-c t j" . go-test-current-project)
              ("C-c t b" . go-test-current-benchmark)
              ("C-c t c" . go-test-current-coverage)
              ("C-c t x" . go-run)))

(use-package go-guru
  :straight t
  :after go-mode
  :hook
  (go-mode . go-guru-hl-identifier-mode))

(use-package flycheck-golangci-lint
  :straight t
  :after go-mode
  :hook
  (go-mode . flycheck-golangci-lint-setup))

;; (use-package go-eldoc
;;   :straight t
;;   :after go-mode
;;   :hook
;;   (go-mode . go-eldoc-setup))

(use-package go-tag
  :straight t
  :after go-mode
  :bind (:map go-mode-map
              ("C-c t a" . go-tag-add)
              ("C-c t r" . go-tag-remove))
  :init (setq go-tag-args (list "-transform" "camelcase")))

;; Not needed anymore: Use eglot-clode-actions > Fill <struct>
;; (use-package go-fill-struct
;;   :straight t
;;   :defer t
;;   ;; :bind (:map go-mode-map
;;   ;;             ("C-c f" . go-fill-struct))
;;   )

;; (use-package go-imenu
;;   :straight t
;;   :config
;;   (add-hook 'go-mode-hook 'go-imenu-setup))

(use-package go-impl
  :straight t
  :after go-mode)

(use-package go-playground
  :straight t
  :after go-mode
  ;; :bind (:map go-mode-map
  ;;             ("C-c p" . go-playground))
  )
#+end_src

**** ginkgo
#+begin_src emacs-lisp
(use-package ginkgo-mode
  :straight (:type git :host github :repo "garslo/ginkgo-mode")
  :defer t)
#+end_src
*** python
#+begin_src emacs-lisp
(use-package python
  :defer t
  :straight t
  :after ob
  :mode (("SConstruct\\'" . python-mode)
         ("SConscript\\'" . python-mode)
         ("[./]flake8\\'" . conf-mode)
         ("/Pipfile\\'"   . conf-mode))
  :init
  (setq python-indent-guess-indent-offset-verbose nil)
  ;; (add-hook 'python-mode-local-vars-hook #'lsp)
  :config
  (setq python-indent-guess-indent-offset-verbose nil)
  (when (and (executable-find "python3")
             (string= python-shell-interpreter "python"))
    (setq python-shell-interpreter "python3")))

;; Activate eglot for python-mode
;; (add-hook 'python-mode-hook 'eglot-ensure)
#+end_src
**** pytest
#+begin_src emacs-lisp
(use-package pytest
  :straight t
  :after (python-mode)
  :commands (pytest-one
             pytest-pdb-one
             pytest-all
             pytest-pdb-all
             pytest-last-failed
             pytest-pdb-last-failed
             pytest-module
             pytest-pdb-module)
  :bind (:map python-mode-map
              ("C-c t ." . pytest-one)           ; test one (current test)
              ("C-c t T" . pytest-pdb-one)       ; test one with pdb
              ("C-c t a" . pytest-all)           ; test all
              ("C-c t A" . pytest-pdb-all)       ; test all with pdb
              ("C-c t l" . pytest-last-failed)   ; test last failed
              ("C-c t L" . pytest-pdb-last-failed) ; test last failed with pdb
              ("C-c t m" . pytest-module)        ; test module
              ("C-c t M" . pytest-pdb-module))   ; test module with pdb
  :config
  (add-to-list 'pytest-project-root-files "setup.cfg"))
#+end_src
**** poetry
#+begin_src emacs-lisp
(use-package poetry
  :defer t
  :straight t
  :commands (poetry-venv-toggle
             poetry-tracking-mode)
  :config
  (setq poetry-tracking-strategy 'switch-buffer)
  (add-hook 'python-mode-hook #'poetry-tracking-mode))
#+end_src

**** pip-requirements
This package will bring a new major mode for editing pip requirements.
#+begin_src emacs-lisp
(use-package pip-requirements
  :defer t
  :straight t)
#+end_src
**** pipenv
This is a [[https://github.com/pypa/pipenv][pipenv]] porcelain
#+begin_src emacs-lisp
(use-package pipenv
  :defer t
  :straight t
  :commands (pipenv-activate
             pipenv-deactivate
             pipenv-shell
             pipenv-open
             pipenv-install
             pipenv-uninstall)
  :hook (python-mode . pipenv-mode)
  :init (setq pipenv-with-projectile nil))
#+end_src
**** pyenv
This integrates ~pyenv~ into ~python-mode~.
#+begin_src emacs-lisp
(use-package pyenv
  :defer t
  :straight t
  :config
  (add-hook 'python-mode-hook #'pyenv-track-virtualenv)
  (add-to-list 'global-mode-string
               '(pyenv-virtual-env-name (" venv:" pyenv-virtual-env-name " "))
               'append))
#+end_src
**** Pippel
List, install, upgrade packages with pip
#+BEGIN_SRC emacs-lisp
;; package-list-packages like interface for python packages
(use-package pippel
  :straight t
  :defer t)
#+END_SRC
**** pyenv-mode
Let’s also add a mode for ~pyenv~:
#+begin_src emacs-lisp
(use-package pyenv-mode
  :defer t
  :after python
  :straight t
  :init
  (add-to-list 'exec-path "~/.pyenv/shims")
  (setenv "WORKON_HOME" "~/.pyenv/versions/")
  :if (executable-find "pyenv")
  :commands (pyenv-mode-versions))
#+end_src
**** pyimport
This package automatically imports packages we forgot to import.
#+begin_src emacs-lisp
(use-package pyimport
  :defer t
  :straight t)
#+end_src
**** py-isort
On the other hand, this one sorts our imports to make them more readable.
#+begin_src emacs-lisp
(use-package py-isort
  :defer t
  :straight t)
#+end_src
**** blacken
Blacken uses the ~black~ formatter backend to format Python buffers.
#+begin_src emacs-lisp
(use-package blacken
  :defer t
  :straight t
  :init
  (add-hook 'python-mode-hook #'blacken-mode))
#+end_src
**** COMMENT sphinx-doc
This generates Python documentation that is meant to be compatible
with Sphinx, a documentation generation for Python.
#+begin_src emacs-lisp
(use-package sphinx-doc
  :defer t
  :straight t
  :init
  (add-hook 'python-mode-hook #'sphinx-doc-mode))
#+end_src
**** COMMENT cython-mode
Cython is a Python to C compiler. It also introduces the extended
Cython programming language which makes writing C for Python easier.
This package is a major mode for the Cython programming language.
#+begin_src emacs-lisp
(use-package cython-mode
  :defer t
  :straight t
  :mode "\\.p\\(yx\\|x[di]\\)\\'"
  :config
  (setq cython-default-compile-format "cython -a %s"))
#+end_src
**** COMMENT flycheck-cython
Flycheck can also be enabled for Cython:
#+begin_src emacs-lisp
(use-package flycheck-cython
  :defer t
  :straight t
  :after cython-mode)
#+end_src
*** Makefiles
#+begin_src emacs-lisp
(defun my/local-tab-indent ()
  (setq-local indent-tabs-mode 1))
(add-hook 'makefile-mode-hook #'my/local-tab-indent)
#+end_src
*** Elisp
#+begin_src emacs-lisp
(use-package elisp-mode
  :straight (:type built-in)
  :bind (:map emacs-lisp-mode-map
              ("C-c C-c" . eval-defun)
              ("C-c C-b" . eval-buffer)
              ("C-c C-k" . eval-buffer)
              ("C-c ;"   . eval-print-as-comment)
              :map lisp-interaction-mode-map  ; Scratch buffer
              ("C-c C-c" . eval-defun)
              ("C-c C-b" . eval-buffer)
              ("C-c C-k" . eval-buffer)
              ("C-c ;"   . eval-print-as-comment))
  :config
  (defvar eval-print-as-comment-prefix ";;=> ")

  (defun eval-print-as-comment (&optional arg)
    (interactive "P")
    (let ((start (point)))
      (eval-print-last-sexp arg)
      (save-excursion
        (goto-char start)
        (save-match-data
          (re-search-forward "[[:space:]\n]*" nil t)
          (insert eval-print-as-comment-prefix))))))
#+end_src
*** PlantUML
#+begin_src emacs-lisp
(use-package plantuml-mode
  :straight t
  :defer t
  :mode ("\\.\\(pum\\|puml\\)\\'" . plantuml-mode)
  :after ob
  :init
  (add-to-list 'org-babel-load-languages '(plantuml . t))
  :config
  (setq plantuml-default-exec-mode 'jar
        plantuml-jar-path "~/.local/bin/plantuml.jar"
        org-plantuml-jar-path "~/.local/bin/plantuml.jar"
        plantuml-indent-level 4))
#+end_src
*** Mermaid
#+begin_src emacs-lisp
(use-package mermaid-mode
  :straight t)
#+end_src
*** nixOS
#+begin_src emacs-lisp
(use-package nix-mode
  :straight t
  :mode "\\.nix\\'")
#+end_src
*** docker
#+begin_src emacs-lisp
(use-package docker
  :straight t
  :diminish
  :bind (("C-x C-." . docker)))
#+end_src

**** docker-compose-mode
#+begin_src emacs-lisp
(use-package docker-compose-mode
  :straight t
  :bind (:map docker-compose-mode-map
              ("C-c d" . docker-compose))
  :mode "docker-compose.*\.yml\\'")
#+end_src

**** dockerfile-mode
#+begin_src emacs-lisp
(use-package dockerfile-mode
  :straight t
  :mode "Dockerfile[a-zA-Z.-]*\\'")
#+end_src
*** markdown
#+begin_src emacs-lisp
;; From https://github.com/dakra/dmacs/blob/nil/init.org
(use-package markdown-mode
  :mode (("/itsalltext/.*\\(gitlab\\|github\\).*\\.txt$" . gfm-mode)
         ("\\.markdown\\'" . gfm-mode)
         ("\\.md\\'" . gfm-mode))
  :bind (:map markdown-mode-map
         ("M-n" . markdown-next-visible-heading)
         ("M-p" . markdown-previous-visible-heading)
         ("M-N" . markdown-forward-same-level)
         ("M-P" . markdown-backward-same-level)
         ("M-O" . markdown-up-heading)
         ("M-ö" . markdown-forward-paragraph)
         ("M-ä" . markdown-backward-paragraph)
         ("C-c =" . markdown-insert-header-dwim))
  :hook (gfm-mode . apheleia-mode)
  :config
  ;; Display remote images
  (setq markdown-display-remote-images t)
  ;; Enable fontification for code blocks
  (setq markdown-fontify-code-blocks-natively t)
  ;; Add some more languages
  (dolist (x '(("ini" . conf-mode)
               ("clj" . clojure-mode)
               ("cljs" . clojure-mode)
               ("cljc" . clojure-mode)))
    (add-to-list 'markdown-code-lang-modes x))
  ;; use pandoc with source code syntax highlighting to preview markdown (C-c C-c p)
  (setq markdown-command "pandoc -s --highlight-style pygments -f markdown_github -t html5"))
#+end_src
*** Configs
**** Toml
#+begin_src emacs-lisp
(use-package toml-mode
  :straight t
  :defer t
  :mode "/\\(Cargo.lock\\|\\.cargo/config\\)\\'")
#+end_src
**** Yaml
#+begin_src emacs-lisp
(use-package yaml-mode
  :straight t
  :defer t
  :hook (kubed-display-resource-mode . yaml-mode)
  :hook (yaml-mode . apheleia-mode)
  :mode "\\.yml\\'"
  :mode "\\.yaml\\'")

;; (use-package yaml-pro
;;   :straight t
;;   :hook (yaml-mode . yaml-pro-mode)
;;   :hook (yaml-ts-mode . yaml-pro-ts-mode))
#+end_src

*** Web
**** web-mode
#+begin_src emacs-lisp
(use-package web-mode
  :straight t
  :defer t
  :mode (("\\.phtml\\'"      . web-mode)
         ("\\.tpl\\.php\\'"  . web-mode)
         ("\\.twig\\'"       . web-mode)
         ("\\.xml\\'"        . web-mode)
         ("\\.html\\'"       . web-mode)
         ("\\.htm\\'"        . web-mode)
         ("\\.[gj]sp\\'"     . web-mode)
         ("\\.as[cp]x?\\'"   . web-mode)
         ("\\.eex\\'"        . web-mode)
         ("\\.erb\\'"        . web-mode)
         ("\\.mustache\\'"   . web-mode)
         ("\\.handlebars\\'" . web-mode)
         ("\\.hbs\\'"        . web-mode)
         ("\\.eco\\'"        . web-mode)
         ("\\.ejs\\'"        . web-mode)
         ("\\.svelte\\'"     . web-mode)
         ("\\.ctp\\'"        . web-mode)
         ("\\.djhtml\\'"     . web-mode)
         ("\\.vue\\'"        . web-mode))
  :bind (:map web-mode-map
              ;; Quick actions with direct M-g prefix
              ("M-g /" . web-mode-element-close)
              ("M-g k" . web-mode-element-kill)
              ("M-g s" . web-mode-element-select)

              ;; Tag operations (M-g t prefix)
              ("M-g t n" . web-mode-tag-next)
              ("M-g t p" . web-mode-tag-previous)
              ("M-g t m" . web-mode-tag-match)
              ("M-g t s" . web-mode-tag-select)
              ("M-g t b" . web-mode-tag-beginning)
              ("M-g t e" . web-mode-tag-end)

              ;; Element operations (M-g e prefix)
              ("M-g e n" . web-mode-element-next)
              ("M-g e p" . web-mode-element-previous)
              ("M-g e u" . web-mode-element-parent)
              ("M-g e d" . web-mode-element-child)
              ("M-g e k" . web-mode-element-kill)
              ("M-g e w" . web-mode-element-wrap)
              ("M-g e s" . web-mode-element-select)
              ("M-g e c" . web-mode-element-clone)
              ("M-g e r" . web-mode-element-rename)

              ;; Attribute operations (M-g a prefix)
              ("M-g a n" . web-mode-attribute-next)
              ("M-g a p" . web-mode-attribute-previous)
              ("M-g a k" . web-mode-attribute-kill)
              ("M-g a i" . web-mode-attribute-insert)
              ("M-g a s" . web-mode-attribute-select))
  :config
  (setq web-mode-markup-indent-offset 2
        web-mode-code-indent-offset 2
        web-mode-css-indent-offset 2
        web-mode-enable-auto-pairing t
        web-mode-enable-css-colorization t))
#+end_src
**** emmet-mode
#+begin_src emacs-lisp
(use-package emmet-mode
  :straight t
  :defer t
  :hook ((css-mode  . emmet-mode)
         (html-mode . emmet-mode)
         (web-mode  . emmet-mode)
         (sass-mode . emmet-mode)
         (scss-mode . emmet-mode)
         (web-mode  . emmet-mode))
  :bind (:map emmet-mode-keymap
              ("M-RET" . 'emmet-expand-yas)))
#+end_src
** LSP
*** eglot
#+begin_src emacs-lisp
(use-package eglot
  :ensure nil
  :bind (("C-c l e " . eglot)
         ("C-c C-." . eglot-code-actions))
  ;; :disabled t
  :defer t
  :commands (eglot
             eglot-rename
             eglot-ensure
             eglot-rename
             eglot-format-buffer)
  :custom
  (eglot-report-progress t)  ; Prevent minibuffer spam
  (eglot-autoshutdown t) ; shutdown after closing the last managed buffer
  (eglot-sync-connect 0) ; async, do not block
  (eglot-extend-to-xref t) ; can be interesting!
  (eglot-report-progress nil) ; disable annoying messages in echo area!
  (eglot-events-buffer-size 0)
  :config
  ;; Optimizations
  (fset #'jsonrpc--log-event #'ignore)
  (setq jsonrpc-event-hook nil)
  ;; Not sure if this really helps
  ;; Enable completion capabilities
  ;; (setq completion-category-overrides '((eglot (styles orderless))))
  ;; Configure tab for completion
  (setq tab-always-indent 'complete)
  ;; Enable snippet/template support
  (setq eglot-insert-completion-annotations t)

  ;; Enable eglot for certain modes
  ;; (add-hook 'go-mode-hook 'eglot-ensure)
  ;; (add-to-list 'eglot-server-programs
  ;;              `(python-mode
  ;;                . ,(eglot-alternatives '(("pyright-langserver" "--stdio")
  ;;                                         "jedi-language-server"
  ;;                                         "pylsp"))))
  (add-to-list 'eglot-server-programs
               '(python-mode . ("ruff" "server")))
  (add-to-list 'eglot-server-programs '(markdown-mode . ("marksman"))))

;; Add config for markdown
(add-hook 'markdown-mode-hook #'eglot-ensure)
#+end_src
*** eldoc
Need to add some keybindings here:
#+begin_src emacs-lisp
(use-package eldoc
  :straight t
  :hook (prog-mode . eldoc-mode)
  :bind (:map prog-mode-map
              ("C-c e d" . eldoc)
              ("C-c e t" . eldoc-toggle))
  :init
  (global-eldoc-mode -1)
  :config
  (setq eldoc-documentation-strategy 'eldoc-documentation-compose-eagerly
        eldoc-echo-area-use-multiline-p t
        eldoc-echo-area-display-truncation-message nil
        eldoc-idle-delay 0.1))

(use-package eldoc-box
  :straight t
  :after eldoc
  :hook (eldoc-mode . eldoc-box-hover-mode)
  :bind (:map prog-mode-map
              ("C-c e h" . eldoc-box-hover-mode)
              ("C-c e c" . eldoc-box-clear-all))
  :config
  (setq eldoc-box-position-function #'eldoc-box--default-upper-corner-position-function
        eldoc-box-clear-with-C-g t
        eldoc-box-max-pixel-width 800
        eldoc-box-max-pixel-height 600))
#+end_src
*** lsp-mode
#+begin_src emacs-lisp
(use-package lsp-mode
  :ensure nil
  :defer t
  :bind (("C-c l s" . lsp))
  :hook (
         (go-ts-mode . lsp-deferred)
         (go-mode . lsp-deferred)
         ;; (web-mode . lsp-deferred)
         ;; (python-mode . lsp-deferred)
         ;; (lsp-mode . lsp-deferred)
         ;; (python-ts-mode . lsp-deferred)
         )
  :commands (lsp lsp-deferred)
  :custom
  ;; (lsp-print-io nil)
  ;; (lsp-trace nil)
  ;; (lsp-print-performance nil)
  ;; (lsp-prefer-flymake t)
  ;; (lsp-disabled-clients (emmet-ls))
  (lsp-use-plist t)
  (lsp-keymap-prefix "C-c l")
  (lsp-completion-provider :none)                    ; we use Corfu
  (lsp-diagnostics-provider :flycheck)
  ;; (lsp-session-file (locate-user-emacs-file ".lsp-session"))
  (lsp-log-io nil)                                  ; IMPORTANT! Use only for debugging! Drastically affects performance
  (lsp-keep-workspace-alive nil)                    ; Close LSP server if all project buffers are closed
  (lsp-idle-delay 0.5)                             ; Debounce timer for `after-change-function'

  ;; core
  (lsp-enable-xref t)                              ; Use xref to find references
  (lsp-auto-configure t)                           ; Used to decide between current active servers
  ;; (lsp-eldoc-enable-hover t)                       ; Display signature information in the echo area
  (lsp-enable-dap-auto-configure nil)              ; Debug support
  (lsp-enable-file-watchers nil)                   ; This basically means, if you change
                                                   ; the branch, should LSP reload
                                                   ; instantly - it's a big performance
                                                   ; overhead
  (lsp-enable-folding t)
  (lsp-enable-imenu t)
  (lsp-enable-indentation nil)                     ; I use prettier
  (lsp-enable-links nil)                           ; No need since we have `browse-url'
  (lsp-enable-on-type-formatting nil)              ; Prettier handles this
  (lsp-enable-suggest-server-download t)           ; Useful prompt to download LSP providers
  (lsp-enable-symbol-highlighting t)               ; Shows usages of symbol at point in the current buffer
  (lsp-enable-text-document-color nil)             ; This is Treesitter's job
  (lsp-ui-sideline-show-hover nil)                 ; Sideline used only for diagnostics
  (lsp-ui-sideline-diagnostic-max-lines 20)        ; 20 lines since typescript errors can be quite big

  ;; completion
  (lsp-completion-enable t)
  (lsp-completion-show-detail t)
  (lsp-completion-enable-additional-text-edit t)    ; Ex: auto-insert an import for a completion candidate
  (lsp-enable-snippet t)                           ; Important to provide full JSX completion
  (lsp-completion-show-kind t)                     ; Optional

  ;; headerline
  (lsp-headerline-breadcrumb-enable nil)               ; Optional, I like the breadcrumbs
  (lsp-headerline-breadcrumb-enable-diagnostics nil)   ; Don't make them red, too noisy
  (lsp-headerline-breadcrumb-enable-symbol-numbers nil)
  (lsp-headerline-breadcrumb-icons-enable nil)

  ;; modeline
  (lsp-modeline-code-actions-enable t)             ; Modeline should be relatively clean
  (lsp-modeline-diagnostics-enable nil)            ; Already supported through `flycheck'
  (lsp-modeline-workspace-status-enable t)         ; Modeline displays "LSP" when lsp-mode is enabled
  (lsp-signature-doc-lines 1)                      ; Don't raise the echo area. It's distracting
  (lsp-ui-doc-use-childframe t)                    ; Show docs for symbol at point
  ;; (lsp-eldoc-render-all nil)                       ; This would be very useful if it would respect `lsp-signature-doc-lines', currently it's distracting

  ;; lens
  (lsp-lens-enable nil)                            ; Optional, I don't need it

  ;; semantic
  (lsp-semantic-tokens-enable nil)                 ; Related to highlighting, and we defer to treesitter
  )
#+end_src
*** lsp-ui
#+begin_src emacs-lisp
(use-package lsp-ui
  :straight t
  :config
  (setq
   lsp-ui-sideline-show-hover nil
   ;; lsp-ui-sideline-delay 0.5
   ;; lsp-ui-sideline-ignore-duplicates t
   lsp-ui-doc-delay 0.5
   lsp-ui-doc-position 'bottom
   lsp-ui-doc-alignment 'frame
   lsp-ui-doc-header nil
   lsp-ui-doc-include-signature t
   lsp-ui-doc-use-childframe t)
   (setq lsp-ui-peek-always-show t)
   (setq lsp-ui-peek-list-width 40)
   (setq lsp-ui-peek-show-directory nil)
   ;; Expand all peek folds.
   (setq lsp-ui-peek-expand-function (lambda (xs) (mapcar #'car xs)))
  :commands lsp-ui-mode
  :custom
  ;; lsp-ui-doc
  (lsp-ui-doc-enable t)
  (lsp-ui-doc-header t)
  (lsp-ui-doc-include-signature t)
  (lsp-ui-doc-position 'top) ;; top, bottom, or at-point
  (lsp-ui-doc-max-width 120)
  (lsp-ui-doc-max-height 30)
  (lsp-ui-doc-use-childframe t)
  (lsp-ui-doc-use-webkit t)
  ;; signature
  (lsp-signature-auto-activate t)
  (lsp-signature-render-documentation t)
  ;; (lsp-eldoc-hook t)
  :bind
  (:map lsp-ui-mode-map
        ;; ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
        ;; ([remap xref-find-references] . lsp-ui-peek-find-references)
        ("C-c C-r" . lsp-ui-peek-find-references)
        ("C-c C-j" . lsp-ui-peek-find-definitions)
        ("C-c i"   . lsp-ui-peek-find-implementation)
        ("C-c u" . lsp-ui-imenu)
        ("C-c d" . lsp-ui-doc-glance)
        ("C-c e" . lsp-treemacs-errors-list)
        ("C-c D" . lsp-ui-doc-show)
        ("C-c o" . lsp-describe-thing-at-point)
        ("C-c s"   . lsp-ui-sideline-mode)))
#+end_src
**** TODO testing
#+begin_src emacs-lisp
;; Manual reload sequence
(defun my-reload-eglot ()
  (interactive)
  ;; Shutdown current server
  (eglot-shutdown-all)
  ;; Clear workspace configuration
  (setq eglot-workspace-configuration nil)
  ;; Restart eglot
  (eglot-ensure))

;; Bind to a key for quick testing
(global-set-key (kbd "C-c e r") 'my-reload-eglot)


;; (define-key go-mode-map (kbd "C-c e d")
;;             (lambda () (interactive)
;;               (my-test-eglot-config 'default)))
;; (define-key go-mode-map (kbd "C-c e a")
;;             (lambda () (interactive)
;;               (my-test-eglot-config 'go-aggressive)))
#+end_src

#+RESULTS:
: my-reload-eglot
*** lsp-treemacs
#+begin_src emacs-lisp
(use-package lsp-treemacs
  :straight t
  :defer t
  :bind (("M-g 8" . lsp-treemacs-symbols)))
#+end_src
*** lsp-pyright
#+begin_src emacs-lisp
(use-package lsp-pyright
  :straight t
  :custom (lsp-pyright-langserver-command "pyright") ;; or basedpyright
  )
#+end_src
*** lsp-tailwindcss
#+begin_src emacs-lisp
(use-package lsp-tailwindcss
  :straight (:type git :host github :repo "merrickluo/lsp-tailwindcss")
  :init (setq lsp-tailwindcss-add-on-mode t)
  :config
  (setq lsp-tailwindcss-add-on-mode t)
  ;; (setq lsp-tailwindcss-server-path "/opt/homebrew/bin/tailwindcss-language-server")
  (dolist (tw-major-mode
           '(web-mode
             web-ts-mode
             css-mode
             css-ts-mode
             typescript-mode
             typescript-ts-mode
             tsx-ts-mode
             html-mode
             js2-mode
             js-ts-mode))
    (add-to-list 'lsp-tailwindcss-major-modes tw-major-mode))
  )
#+end_src

*** lsp-eslint
#+begin_src emacs-lisp
(use-package lsp-eslint
  :straight (:type built-in)
  :after lsp-mode)
#+end_src
*** consult-lsp
#+begin_src emacs-lisp
(use-package consult-lsp
  :straight t
  :after consult lsp-mode
  :bind (:map lsp-mode-map
              ([remap xref-find-apropos] . consult-lsp-symbols)))
#+end_src

** Snippets
*** yasnippet
#+begin_src emacs-lisp
(use-package yasnippet
  :straight t
  :demand t
  ;; :diminish yas-minor-mode
  :commands yas-minor-mode-on
  :bind (("C-c y d" . yas-load-directory)
         ("C-c y i" . yas-insert-snippet)
         ("C-c y f" . yas-visit-snippet-file)
         ("C-c y n" . yas-new-snippet)
         ("C-c y t" . yas-tryout-snippet)
         ("C-c y l" . yas-describe-tables)
         ("C-c y g" . yas-global-mode)
         ("C-c y m" . yas-minor-mode)
         ("C-c y r" . yas-reload-all)
         ("C-c y x" . yas-expand)
         :map yas-keymap
         ("C-i" . yas-next-field-or-maybe-expand))
  :mode ("/\\.emacs\\.d/snippets/" . snippet-mode)
  :hook ((prog-mode org-mode) . yas-minor-mode-on)
  :custom
  (yas-prompt-functions '(yas-completing-prompt yas-no-prompt))
  (yas-triggers-in-field t)
  (yas-wrap-around-region t)
  :custom-face
  (yas-field-highlight-face ((t (:background "#e4edfc")))))

(use-package yasnippet-snippets
  :straight t
  :after yasnippet
  :demand t)

(use-package doom-snippets
  :straight (:host github :repo "hlissner/doom-snippets" :files ("*.el" "*"))
  :after yasnippet
  :demand t)

(use-package yasnippet-capf
  :straight t
  :after cape
  :hook ((prog-mode text-mode conf-mode) . +cape-yasnippet--setup-h)
  :config
  (defun +cape-yasnippet--setup-h ()
    (when (bound-and-true-p yas-minor-mode)
      (add-to-list 'completion-at-point-functions #'yasnippet-capf))))
#+end_src

*** yankpad
#+begin_src emacs-lisp
 (use-package yankpad
   :straight t
   :bind
   ("C-x C-y"  . yankpad-insert)
   :config
   (setq yankpad-file (concat org-directory "/yankpad.org"))
   (setq yas-wrap-around-region t)
   (yankpad-reload))
#+end_src

** Debugging
*** dape
#+begin_src emacs-lisp
(use-package dape
  :straight t
  :after (prog-mode)
  :config
  ;; Pulse source line (performance hit)
  (add-hook 'dape-display-source-hook 'pulse-momentary-highlight-one-line)
  (setq dape-buffer-window-arrangement 'left)
  ;; Showing inlay hints
  (setq dape-inlay-hints t)
  (setq dape-minibuffer-hint t))

;; Enable repeat mode for more ergonomic `dape' use
(use-package repeat
  :straight t
  :config
  (repeat-mode))
#+end_src
** Utilities
*** apheleia
#+begin_src emacs-lisp
(use-package apheleia
  :straight t
  :bind (("C-c f f" . apheleia-format-buffer))
  :config
  ;; For Python we want to format with isort and black
  ;; (setf (alist-get 'isort apheleia-formatters)
  ;;       '("isort" "--stdout" "-"))
  ;; (setf (alist-get 'python-mode apheleia-mode-alist)
  ;;       '(isort black))

  ;; Replace default (black) to use ruff for sorting import and formatting.
  (setf (alist-get 'python-mode apheleia-mode-alist)
        '(ruff-isort ruff))
  (setf (alist-get 'python-ts-mode apheleia-mode-alist)
        '(ruff-isort ruff))

  ;; For golang
  (setf (alist-get 'gofmt apheleia-formatters)
        '("gofmt" "-s"))
  (apheleia-global-mode))
#+end_src
*** flycheck
#+begin_src emacs-lisp
(use-package flycheck
  :straight t
  :hook (prog-mode . flycheck-mode))

(use-package consult-flycheck
  :straight t
  :bind (("M-g f" . consult-flycheck)))
#+end_src
*** highlight-indent-guides
#+begin_src emacs-lisp
(use-package highlight-indent-guides
  :straight t
  :hook ((prog-mode yaml-ts-mode yaml-mode yaml-pro-mode) . highlight-indent-guides-mode)
  :custom (highlight-indent-guides-method 'character))
#+end_src
*** display-line-numbers
#+begin_src emacs-lisp
(use-package display-line-numbers
  :defer t
  :hook ((prog-mode . display-line-numbers-mode)))
#+end_src
*** focus-mode
#+begin_src emacs-lisp
(use-package focus
  :straight t
  :bind (:map focus-mode-map
              ("M-g t ." . #'toggle-focus-transparency))
  :config
  (add-to-list 'focus-mode-to-thing '(python-mode . defun))
  (add-to-list 'focus-mode-to-thing '(org-mode . org-element))
  (add-to-list 'focus-mode-to-thing '(yaml-mode . paragraph))
  (add-to-list 'focus-mode-to-thing '(elfeed-show-mode)))

;; Add some customizations regarding unfocused text
(defvar my-focus-transparent-mode nil
  "Track whether transparent focus mode is active.")

(defun toggle-focus-transparency ()
  "Toggle between transparent and default focus-unfocused face."
  (interactive)
  (if my-focus-transparent-mode
      ;; Restore default settings (inherit from shadow)
      (custom-set-faces
       '(focus-unfocused ((t :inherit shadow))))
    ;; Apply transparent settings
    (custom-set-faces
     '(focus-unfocused ((t (:foreground "#000000"
                           :inherit nil  ; Remove shadow inheritance
                           :opacity 0.1))))))

  ;; Toggle the state
  (setq my-focus-transparent-mode (not my-focus-transparent-mode))
  (message "Focus transparency %s"
           (if my-focus-transparent-mode "enabled" "disabled")))
#+end_src
*** hl-line-mode
#+begin_src emacs-lisp
(use-package hl-line
  :hook ((prog-mode markdown-mode yaml-ts-mode yaml-mode yaml-pro-mode gptel-mode org-mode) . hl-line-mode))
#+end_src
*** hl-todo
#+begin_src emacs-lisp
;; Highlight TODO keywords
(use-package hl-todo
  :straight (:host github :repo "tarsius/hl-todo")
  :hook (prog-mode . hl-todo-mode)
  :config
  (cl-callf append hl-todo-keyword-faces
    '(("BUG"   . "#ee5555")
      ("FIX"   . "#0fa050")
      ("PROJ"  . "#447f44")
      ("IDEA"  . "#0fa050")
      ("INFO"  . "#0e9030")
      ("TWEAK" . "#fe9030")
      ("PERF"  . "#e09030"))))
#+end_src
*** breadcrumb
#+begin_src emacs-lisp
(use-package breadcrumb
  :straight t
  :hook ((go-mode org-mode c-mode c++-mode c-ts-mode c++-ts-mode python-mode python-ts-mode rust-mode rust-ts-mode sh-mode bash-ts-mode) . breadcrumb-local-mode))
#+end_src
*** aggressive-indent
Keep lisp code always indented.
#+begin_src emacs-lisp
(use-package aggressive-indent
  :straight t
  :commands (aggressive-indent-mode aggressive-indent-global-mode)
  :hook
  ;; (clojure-mode . aggressive-indent-mode)
  ;; (clojurescript-mode . aggressive-indent-mode)
  ;; (emacs-lisp-mode . aggressive-indent-mode)
  (lisp-mode . aggressive-indent-mode))
#+end_src
*** wakatime
#+begin_src emacs-lisp
(use-package wakatime-mode
  :straight t
  :config
  (setq
   wakatime-python-bin "~/.pyenv/versions/emacs/bin/python"
   wakatime-cli-path "~/.pyenv/versions/emacs/bin/wakatime")
  (global-wakatime-mode))
#+end_src
*** treemacs
#+begin_src emacs-lisp
(use-package treemacs
  :straight t
  :bind (("M-g 9" . treemacs))
  :config
  (setq treemacs-follow-after-init          t
        treemacs-width                      45
        treemacs-indentation                2
        treemacs-git-integration            t
        treemacs-collapse-dirs              3
        treemacs-silent-refresh             nil
        treemacs-change-root-without-asking nil
        treemacs-sorting                    'alphabetic-desc
        treemacs-show-hidden-files          t
        treemacs-never-persist              nil
        treemacs-is-never-other-window      nil
        treemacs-goto-tag-strategy          'refetch-index)
  (treemacs-follow-mode t)
  (treemacs-filewatch-mode t))

(use-package treemacs-projectile
  :straight t
  :after treemacs projectile
  :config
  (setq treemacs-header-function #'treemacs-projectile-create-header))

;; (use-package treemacs-icons-dired
;;   :after treemacs dired
;;   :straight t
;;   :config (treemacs-icons-dired-mode))

(use-package treemacs-magit
  :after treemacs magit
  :straight t)
#+end_src
** Shells
*** vterm
#+begin_src emacs-lisp
(use-package vterm
  :straight t
  :after prog-mode
  :bind (("C-c v t " . vterm)
         ("C-c v p" . projectile-run-vterm))
  :config
  (setq puni-confirm-when-delete-unbalanced-active-region nil)
  (setq puni-blink-for-sexp-manipulating t))
#+end_src
** VC
*** magit
#+begin_src emacs-lisp
(use-package magit
  :bind (("C-c a v m" . magit))
  :straight t)
#+end_src
*** COMMENT magit-todos
#+begin_src emacs-lisp
(use-package magit-todos
  :straight t
  :after magit
  :config
  (magit-todos-mode))
#+end_src
*** forge
#+begin_src emacs-lisp
(use-package forge
  :straight t
  :after magit)

;;(push '("github.wdf.sap.corp" "github.wdf.sap.corp/api/v3"
;;       "github.wdf.sap.corp" forge-github-repository)
;;
#+end_src

*** diff-hl
#+begin_src emacs-lisp
(use-package diff-hl
  :straight t
  :hook (prog-mode . diff-hl-mode)
  :config
  ;; Added in https://github.com/dgutov/diff-hl/pull/207
  (setq diff-hl-update-async t)
  ;; (diff-hl-flydiff-mode +1)

  ;; Automatic diff-hl-margin-mode in terminal.
  ;; See https://github.com/dgutov/diff-hl/issues/155.
  (add-hook 'diff-hl-mode-on-hook
            (lambda ()
              (unless (display-graphic-p)
                (diff-hl-margin-local-mode))))
  :hook
  (magit-pre-refresh . diff-hl-magit-pre-refresh)
  (magit-post-refresh . diff-hl-magit-post-refresh))
#+end_src
*** ediff
#+begin_src emacs-lisp
(use-package ediff
  :straight (:type built-in)
  :defer t
  :hook(;; show org ediffs unfolded
        (ediff-prepare-buffer . outline-show-all)
        ;; restore window layout when done
        (ediff-quit . winner-undo))
  :config
  (setq
   ;; Do everything in one frame
   ediff-window-setup-function 'ediff-setup-windows-plain
   ;; Split ediff windows horizontally by default
   ediff-split-window-function 'split-window-horizontally
   ediff-merge-split-window-function 'split-window-horizontally))
#+end_src
*** browse-at-remote
#+begin_src emacs-lisp
(use-package browse-at-remote
  :straight t
  :bind (("C-c go" . browse-at-remote)
         ("C-c gy" . browse-at-remote-kill))
  :config
  (add-to-list 'browse-at-remote-remote-type-regexps
               '(:host "github\\.wdf\\.sap\\.corp" :type "github")))
#+end_src
*** pr-review
#+begin_src emacs-lisp
(use-package pr-review
  :straight t
  :after magit)
#+end_src
*** consult-gh
#+begin_src emacs-lisp
(use-package consult-gh
  :straight (:host github :repo "armindarvish/consult-gh" :branch "main")
  ;; :after embark-consult
  :bind (("M-g # r" . consult-gh-repos-list)        ; r for repositories
         ("M-g # i" . consult-gh-search-issues)       ; i for issues
         ("M-g # p" . consult-gh-search-prs)          ; p for pull requests
         ("M-g # r" . consult-gh-search-repos)          ; p for pull requests
         ("M-g # c" . consult-gh-search-code)         ; c for code search
         ("M-g # f" . consult-gh-find-file)    ; f for find files
         ("M-g # n" . consult-gh-notifications) ; n for notifications
         ("M-g # d" . consult-gh-dashboard))
  :custom
  (consult-gh-show-preview t) ;;show previews
  (consult-gh-preview-key "C-o") ;;show previews on demand by hitting "C-o"
  (consult-gh-repo-preview-mode nil) ;;use the default README extension in preview
  (consult-gh-repo-action #'consult-gh--repo-browse-files-action) ;;open file tree of repo on selection
  (consult-gh-issue-action #'consult-gh--issue-view-action) ;;open issues in an emacs buffer
  (consult-gh-pr-action #'consult-gh--pr-view-action) ;;open pull requests in an emacs buffer
  (consult-gh-code-action #'consult-gh--code-view-action) ;;open files that contain code snippet in an emacs buffer
  (consult-gh-file-action #'consult-gh--files-view-action) ;;open files in an emacs buffer

  (consult-gh-notifications-action #'consult-gh--notifications-action) ;;open notifications using default actions for issue/pr
  (consult-gh-dashboard-action #'consult-gh--dashboard-action) ;;open dashbaord items using default actions for issue/pr
  (consult-gh-default-interactive-command #'consult-gh-transient)
  :config
  ;; set default org list
  ;; (setq consult-gh-default-orgs-list (consult-gh--get-current-orgs t))
  ;; add a hook to update default org ist after switching accounts
  ;; (add-hook 'consult-gh-auth-post-switch-hook (lambda (&rest args)
  ;;                                              (setq consult-gh-default-orgs-list
  ;;                                                    (consult-gh--get-current-orgs t))))
  ;; (add-to-list 'savehist-additional-variables 'consult-gh--known-orgs-list) ;;keep record of searched orgs
  ;; (add-to-list 'savehist-additional-variables 'consult-gh--known-repos-list) ;;keep record of searched repos
  )

;;; enable embark actions
(use-package consult-gh-embark
  :straight t
  :config
  (consult-gh-embark-mode +1))
#+end_src
** Misc
*** treesit
#+begin_src emacs-lisp
(use-package treesit
  :straight (:type built-in)
  :mode (("\\.tsx\\'" . tsx-ts-mode)
         ("\\.py\\'" . python-ts-mode)
         ("\\.cmake\\'" . cmake-ts-mode)
         ("\\.go\\'" . go-ts-mode)
         ("\\.js\\'" . typescript-ts-mode)
         ("\\.mjs\\'" . typescript-ts-mode)
         ("\\.mts\\'" . typescript-ts-mode)
         ("\\.cjs\\'" . typescript-ts-mode)
         ("\\.ts\\'" . typescript-ts-mode)
         ("\\.jsx\\'" . tsx-ts-mode)
         ("\\.json\\'" . json-ts-mode)
         ("\\.yaml\\'" . yaml-ts-mode)
         ("\\.css\\'" . css-ts-mode)
         ("\\.yml\\'" . yaml-ts-mode)
         ("\\.php\\'" . php-ts-mode)
         ("\\.prisma\\'" . prisma-ts-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.mm\\'" . objc-mode)
         ("\\.mdx\\'" . markdown-mode))
  :preface
  (defun os/setup-install-grammars ()
    "Install Tree-sitter grammars if they are absent."
    (interactive)
    (dolist (grammar
             '((css . ("https://github.com/tree-sitter/tree-sitter-css" "v0.20.0"))
               (html . ("https://github.com/tree-sitter/tree-sitter-html" "v0.20.1"))
               (javascript . ("https://github.com/tree-sitter/tree-sitter-javascript" "v0.21.2" "src"))
               (kotlin "https://github.com/fwcd/tree-sitter-kotlin")
               (json . ("https://github.com/tree-sitter/tree-sitter-json" "v0.20.2"))
               (python . ("https://github.com/tree-sitter/tree-sitter-python" "v0.20.4"))
               (go "https://github.com/tree-sitter/tree-sitter-go" "v0.20.0")
               (markdown "https://github.com/ikatyang/tree-sitter-markdown")
               (make "https://github.com/alemuller/tree-sitter-make")
               (elisp "https://github.com/Wilfred/tree-sitter-elisp")
               (cmake "https://github.com/uyha/tree-sitter-cmake")
               ;; (c "https://github.com/tree-sitter/tree-sitter-c")
               (cpp "https://github.com/tree-sitter/tree-sitter-cpp")
               (objc "https://github.com/tree-sitter-grammars/tree-sitter-objc")
               (toml "https://github.com/tree-sitter/tree-sitter-toml")
               (php "https://github.com/tree-sitter/tree-sitter-php" "v0.22.8" "php/src" )
               (tsx . ("https://github.com/tree-sitter/tree-sitter-typescript" "v0.20.3" "tsx/src"))
               (typescript . ("https://github.com/tree-sitter/tree-sitter-typescript" "v0.20.3" "typescript/src"))
               (yaml . ("https://github.com/ikatyang/tree-sitter-yaml" "v0.5.0"))
               (prisma "https://github.com/victorhqc/tree-sitter-prisma")))
      (add-to-list 'treesit-language-source-alist grammar)
      ;; Only install `grammar' if we don't already have it
      ;; installed. However, if you want to *update* a grammar then
      ;; this obviously prevents that from happening.
      (unless (treesit-language-available-p (car grammar))
        (treesit-install-language-grammar (car grammar)))))

  ;; Optional, but recommended. Tree-sitter enabled major modes are
  ;; distinct from their ordinary counterparts.
  ;;
  ;; You can remap major modes with `major-mode-remap-alist'. Note
  ;; that this does *not* extend to hooks! Make sure you migrate them
  ;; also
  ;;(dolist (mapping
  ;;         '((python-mode . python-ts-mode)
  ;;           (css-mode . css-ts-mode)
  ;;           (typescript-mode . typescript-ts-mode)
  ;;           (js-mode . typescript-ts-mode)
  ;;           (js2-mode . typescript-ts-mode)
  ;;           (c-mode . c-ts-mode)
  ;;           (c++-mode . c++-ts-mode)
  ;;           (c-or-c++-mode . c-or-c++-ts-mode)
  ;;           (bash-mode . bash-ts-mode)
  ;;           (css-mode . css-ts-mode)
  ;;           (json-mode . json-ts-mode)
  ;;           (js-json-mode . json-ts-mode)
  ;;           (sh-mode . bash-ts-mode)
  ;;           (sh-base-mode . bash-ts-mode)))
  ;;  (add-to-list 'major-mode-remap-alist mapping))
  :config
  (os/setup-install-grammars))
#+end_src
*** combulate
#+begin_src emacs-lisp
(use-package combobulate
  :straight t
  :after (treesit)
  :bind (("C-," . combobulate))
  :preface
  ;; You can customize Combobulate's key prefix here.
  ;; Note that you may have to restart Emacs for this to take effect!
  (setq combobulate-key-prefix "C-x ,")
  ;;
  ;; You can manually enable Combobulate with `M-x
  ;; combobulate-mode'.
  :hook
  ((python-ts-mode . combobulate-mode)
   (js-ts-mode . combobulate-mode)
   (go-mode . go-ts-mode)
   (html-ts-mode . combobulate-mode)
   (css-ts-mode . combobulate-mode)
   (yaml-ts-mode . combobulate-mode)
   (typescript-ts-mode . combobulate-mode)
   (json-ts-mode . combobulate-mode)
   (tsx-ts-mode . combobulate-mode))
  ;; Amend this to the directory where you keep Combobulate's source
  ;; code.
  ;;:load-path ("~/workspace/combobulate")
  )
#+end_src
* DevOps
** Kubel (Kubernetes interface)
#+BEGIN_SRC emacs-lisp
(use-package kubel
  :straight t
  :bind (("C-c a k" . kubel))
  :config
  ;; Set default namespace
  (setq kubel-namespace "heureka"))
#+END_SRC
* ORG mode
** org
Basic configuration
#+begin_src emacs-lisp
(use-package org
  :straight (:type built-in)
  :hook ((org-mode . toggle-truncate-lines))
  :bind (
         ;; Global keybindings
         ("M-g A" . org-agenda)

         :map org-mode-map
         ;; Basic structure
         ("C-c o i h" . org-insert-heading)
         ("C-c o i s" . org-insert-subheading)
         ("C-c o i t" . org-insert-todo-heading)
         ("C-c o i c" . dorneanu/org-insert-link-from-clipboard)

         ;; Structuring
         ("M-s-n" . org-drag-element-forward)
         ("M-s-p" . org-drag-element-backward)

         ;; Clocking
         ("C-c o c i" . org-clock-in)
         ("C-c o c o" . org-clock-out)
         ("C-c o c r" . org-clock-report)
         ("C-c o c m" . dorneanu/org-clock-enter-manually)

         ;; Demote / Promote
         ("C-c o d +" . org-promote-subtree)
         ("C-c o d -" . org-demote-subtree)

         ;; Navigation
         ;; ("C-c o n n" . org-next-visible-heading)
         ;; ("C-c o n p" . org-previous-visible-heading)
         ("M-n" . org-next-visible-heading)
         ("M-p" . org-previous-visible-heading)
         ("M-N" . org-forward-heading-same-level)
         ("M-P" . org-backward-heading-same-level)
         ("M-O" . org-up-element)
         ("M-ö" . org-forward-paragraph)
         ("M-ä" . org-backward-paragraph)

         ;; Todo state
         ("C-c o t t" . org-todo)
         ("C-c o t d" . org-deadline)
         ("C-c o t s" . org-schedule)

         ;; Tags and properties
         ("C-c o :" . org-set-tags-command)
         ("C-c o p" . org-set-property)

         ;; Formatting
         ;; ("C-c o b" . org-bold)
         ;; ("C-c o i" . org-italic)
         ;; ("C-c o u" . org-underline)
         ("C-c o f f" . org-emphasize)

         ;; Hide / show
         ("C-c o f ." . dorneanu/org-focus-current-subtree)
         ("C-c o f s" . org-fold-hide-sublevels)
         ("C-c o f t" . org-fold-hide-subtree)

         ;; Soting
         ("C-c o s" . org-sort)
         ;; Export
         ("C-c o e e" . org-export-dispatch)

         ;; Misc
         ("C-c o a" . org-archive-subtree)
         ("C-c o r w" . org-refile)
         ("C-c o r v" . +org/refile-to-visible)
         ("C-c o r f" . +org/refile-to-current-file)
         ("C-c o r o" . +org/refile-to-other-window)
         ;;("C-c o r l" . +org/refile-to-last-location)
         ("C-c o l" . org-insert-link)
         ("C-c '" . org-edit-special)
         ("C-c o o p" . org-present)

         ([(shift return)] . crux-smart-open-line)
         ([(control shift return)] . crux-smart-open-line-above)

         :map org-src-mode-map
         ("C-x n" . org-edit-src-exit))
  :custom
  (org-auto-align-tags t)
  (org-edit-src-content-indentation t)     ; indent the content of src blocks
  (org-edit-src-turn-on-auto-save t)       ; auto-save org-edit-src
  (org-fontify-quote-and-verse-blocks t)
  (org-pretty-entities t)
  (org-pretty-entities-include-sub-superscripts nil)
  (org-special-ctrl-a/e t)
  (org-startup-indented t)
  (org-element-use-cache nil)
  :config
  (setq org-hide-leading-stars             t
        org-hide-macro-markers             t
        org-hide-properties                t
        org-cycle-hide-drawer-startup      t
        org-hide-drawer-startup            t
        ;; Some characters to choose from: …, ⤵, ▼, ↴, ⬎, ⤷, and ⋱
        org-ellipsis                       "…"
        org-image-actual-width             600
        org-redisplay-inline-images        t
        org-display-inline-images          t
        org-auto-align-tags                t
        org-startup-with-inline-images     "inlineimages"
        org-pretty-entities                t
        org-hide-emphasis-markers          t
        org-fontify-whole-heading-line     t
        org-fontify-done-headline          t
        org-fontify-quote-and-verse-blocks t
        org-startup-indented               t
        org-startup-align-all-tables       t
        org-use-property-inheritance       t
        org-list-allow-alphabetical        t
        ;; M-RET should not split the lines
        org-M-RET-may-split-line           '((default . nil))
        org-insert-heading-respect-content nil
        org-adapt-indentation              t
        org-log-done                       'time
        org-log-state-notes-into-drawer    nil     ;; No state change notes
        org-log-into-drawer                nil     ;; Does this make sense?
        org-directory                      "~/repos/priv/org/"
        org-default-notes-file             (expand-file-name "notes.org" org-directory))

  ;; Set TODO keywords
  (setq org-todo-keywords
        '((sequence
           "TODO(t)"
           "STARTED(s)"
           "NEXT(n)"
           "WIP(p)"
           "WAITING(w!)"
           "|"
           "DONE(d)"
           "CANCELED(c)")
          (sequence
           "PROJ(P)"
           "MEETING(m)"
           "REVIEW(r)"
           "IDEA(i)")))
  ;; "|"
  ;; "STOP(c)"
  ;; "EVENT(m)"


  ;; No blank lines before new entries
  (setq org-blank-before-new-entry
        '((heading . nil)
          (plain-list-item . nil))))
#+end_src

** org-agenda
#+begin_src emacs-lisp
(use-package org-agenda
  :straight (:type built-in)
  :defer t
  :config
  (setq
   ;; Set agenda files
   org-agenda-files (mapcar
                     (lambda (f) (concat org-directory f))
                     '("inbox.org"
                       "work.org.gpg"
                       "sap.org.gpg"
                       "private.org.gpg"
                       "projects.org.gpg"))

   org-agenda-file-regexp
   (replace-regexp-in-string "\\\\\\.org" "\\\\.org\\\\(\\\\.gpg\\\\)?"
                             org-agenda-file-regexp)

   ;; Skip unavailable agenda files
   org-agenda-skip-unavailable-files t

   ;; Skip done tasks
   org-agenda-skip-scheduled-if-done t
   org-agenda-skip-deadline-if-done t

   ;; Show warnings for deadlines 7 days in advance.
   org-deadline-warning-days 5
   org-agenda-include-deadlines t
   org-agenda-todo-list-sublevels t

   ;; Set column width for tags in agenda
   org-agenda-tags-column 100

   ;; Set column width for tags in org mode
   org-tags-column -100


   ;; org-agenda-todo-ignore-scheduled 'all
   ;; org-agenda-todo-ignore-deadlines 'all
   ;; org-agenda-todo-ignore-with-date 'all

   ;; Use straight line as separator between agenda blocks
   ;; https://www.utf8-chartable.de/unicode-utf8-table.pl?start=9472&utf8=dec&unicodeinhtml=dec
   ;; org-agenda-block-separator 9472
   org-agenda-compact-blocks t
   org-agenda-start-day nil ;; i.e. today
   org-agenda-span 1
   org-agenda-start-on-weekday nil

   ;; Clock report settings
   org-agenda-start-with-clockreport-mode t
   org-clock-report-include-clocking-task t
   org-agenda-clockreport-parameter-plist '(:link nil :maxlevel 6 :fileskip0 t :compact nil)

   ;; Time grid
   org-agenda-time-grid
   '((daily today require-timed)
     (0900 01000 1100 1200 1300 1400 1500 1600 1700 1800)
     "-"
     "────────────────")

   ;; http://doc.endlessparentheses.com/Var/org-agenda-prefix-format.html
   org-agenda-prefix-format
   '(
     (agenda . "%5c %4e %?-12t %s")
     (todo   . " %4e %-12c")
     (tags   . " %-22c")
     (search . " %-12c"))

   ;; Append extra files
   org-agenda-files (append org-agenda-files
                            '("~/syncthing/org/2-PARA.org"
                              "~/syncthing/org/01-TDL.org"))

   ;; Append proj files
   org-agenda-files (append org-agenda-files
                            (directory-files org-directory t "proj_.+\\.org$")))

  ;; (add-hook 'org-agenda-mode-hook
  ;;           (lambda ()
  ;;             (visual-line-mode -1)
  ;;             (toggle-truncate-lines 1)
  ;;             (display-line-numbers-mode 0)))
  )
#+end_src

#+results:
: t

** org-super-agenda
Define custom org agenda commands.
Inspired by https://www.rousette.org.uk/archives/doom-emacs-tweaks-org-journal-and-org-super-agenda/

#+begin_src emacs-lisp
(use-package org-super-agenda
  :straight t
  :after (org-agend))

(with-eval-after-load 'org-agenda
  ;; Enable it
  (org-super-agenda-mode)

  ;; Toggle org links display
  (setq org-link-descriptive t)

  ;; Set agenda custom commands
  (setq org-agenda-custom-commands
        '(
          ("a" "Agenda"
           ((agenda "" ((org-agend-span 'day)
                        (org-super-agenda-groups
                         '(
                           (:name "Today"
                                  :time-grid t
                                  :date today
                                  :scheduled today
                                  :order 1)
                           (:discard (:anything))))))
            (tags (concat "wk" (format-time-string "%V")) ((org-agenda-overriding-header  (concat "--\nToDos Week " (format-time-string "%V")))
                                                           (org-super-agenda-groups
                                                            '((:discard (:deadline t))
                                                              (:discard (:todo ("DONE" "CANCELED")))
                                                              (:discard (:not (:todo t)))))))

            (alltodo "" ((org-agenda-overriding-header "")
                         (org-agenda-prefix-format '(
                                                     (agenda . "%7c %4e %?-12t %s")
                                                     (todo . " %-8c [%-4e] %?-12t %s")
                                                     (tags   . " %-22c")
                                                     (search . " %-12c")))

                         (org-super-agenda-groups
                          '(
                            (:log t)
                            (:discard (:tag "inactive"))
                            (:discard (:tag "no-agenda"))
                            (:discard (:tag "jira"))
                            (:name "Started"
                                   :todo ("STARTED")
                                   :order 1)
                            (:name "Quickies"
                                   :and (:effort< "0:15" :not (:tag "recurring")))

                            (:name "This Week"
                                   :auto-property "week")

                            (:name "Overdue"
                                   :deadline past
                                   :scheduled past
                                   :order 2)
                            (:name "Soon"
                                   :deadline feature
                                   :scheduled feature
                                   :order 2)
                            (:name "Waiting"
                                   :todo "WAITING"
                                   :order 2)
                            (:name "To refile"
                                   :category "inbox"
                                   :todo ""
                                   :order 10)
                            (:name "Next to do"
                                   :todo "NEXT"
                                   :order 20)
                            ;; (:name "WIP"
                            ;;  :todo ("WIP")
                            ;;  :order 40)
                            (:discard (:anything))))))
            ;; (alltodo "" ((org-agenda-overriding-header "")
            ;;              (org-agenda-hide-tags-regexp "project\\|ticket\\|active")
            ;;              (org-agenda-prefix-format '((todo . " %-8c [%-4e] %?-12t %s")))
            ;;              (org-super-agenda-groups
            ;;               '(
            ;;                 (:log t)
            ;;                 (:discard (:tag ("no-agenda" "inactive" "meeting" "projectile")))
            ;;                 (:discard (:todo ("PROJ")))
            ;;                 (:name "Projects"
            ;;                        :auto-property "project"
            ;;                        :todo t
            ;;                        :order 1)
            ;;                 (:discard (:anything))))))
                            ))


          ("r" "Resonance"
           ((alltodo "" ((org-agenda-overriding-header "Resonance calendar")
                         (org-super-agenda-groups
                          '(
                            (:discard (:not (:tag ("video" "article"))))
                            (:and (:tag))
                            (:auto-parent t)
                            (:discard (:anything))))))))
          ("p" "Projects"
           ((tags (concat "wk" (format-time-string "%V")) ((org-agenda-overriding-header  (concat "--\nToDos Week " (format-time-string "%V")))
                                                           (org-super-agenda-groups
                                                            '((:discard (:deadline t))
                                                              (:discard (:todo ("DONE" "CANCELED")))
                                                              (:discard (:not (:todo t)))))))

            (alltodo "" ((org-agenda-overriding-header "Projects")
                         (org-agenda-overriding-header "\n\nProjects")
                         (org-super-agenda-groups
                          '(
                            (:log t)
                            (:discard (:tag ("inactive" "area" "meeting" "projectile")))
                            (:discard (:todo ("PROJ")))
                            (:discard (:todo ("MEETING")))
                            (:name "Projects"
                                   :auto-property "project"
                                   :todo t
                                   :order 1)
                            (:discard (:anything))))
                         )))))))
#+end_src
** org-refile
Some extras copied from Doom Emacs:

#+begin_src emacs-lisp
(defun +org-headline-avy ()
  "TODO"
  (require 'avy)
  (save-excursion
    (when-let* ((org-reverse-note-order t)
                (pos (avy-with avy-goto-line (avy-jump (rx bol (1+ "*") (1+ blank))))))
      (when (integerp (car pos))
        ;; If avy is aborted with "C-g", it returns `t', so we know it was NOT
        ;; aborted when it returns an int. If it doesn't return an int, we
        ;; return nil.
        (copy-marker (car pos))))))

(defun +org/goto-visible ()
  "TODO"
  (interactive)
  (goto-char (+org-headline-avy)))
#+end_src

Now settings for ~org-refile~:

#+begin_src emacs-lisp
(with-eval-after-load 'org
  ;; Refiling
  (setq org-refile-use-cache t)
  (setq org-refile-targets '((nil :maxlevel . 9)
                             (org-agenda-files :maxlevel . 9)))

  ;; Allow refile to create parent tasks with confirmation
  (setq org-refile-allow-creating-parent-nodes 'confirm)
  (setq org-refile-use-outline-path 'file)       ; Show filename for refiling
  (setq org-outline-path-complete-in-steps nil)  ; Refile in a single go

  ;; Exclude DONE state tasks from refile targets
  (defun dorneanu/verify-refile-target ()
    "Exclude todo keywords with a done state from refile targets."
    (not (member (nth 2 (org-heading-components)) org-done-keywords)))
  (setq org-refile-target-verify-function 'dorneanu/verify-refile-target)

  ;; Some custom elisp functions
  (defun dorneanu/org-refile-anywhere (&optional goto default-buffer rfloc msg)
    "A version of `org-refile' which allows refiling to any subtree."
    (interactive "P")
    (let ((org-refile-target-verify-function))
      (org-refile goto default-buffer rfloc msg)))

  (defun dorneanu/org-agenda-refile-anywhere (&optional goto rfloc no-update)
    "A version of `org-agenda-refile' which allows refiling to any subtree."
    (interactive "P")
    (let ((org-refile-target-verify-function))
      (org-agenda-refile goto rfloc no-update)))

  ;; These are from Doom Emacs: https://github.com/doomemacs/doomemacs/blob/master/modules/lang/org/autoload/org-refile.el
  (defun +org/refile-to-current-file (arg &optional file)
    "Refile current heading to elsewhere in the current buffer.
If prefix ARG, copy instead of move."
    (interactive "P")
    (let ((org-refile-targets `((,file :maxlevel . 10)))
          (org-refile-use-outline-path t)
          (org-refile-keep arg)
          current-prefix-arg)
      (call-interactively #'org-refile)))

  (defun +org/refile-to-visible ()
    "Refile current heading as first child of visible heading selected with Avy."
    (interactive)
    (when-let (marker (+org-headline-avy))
      (let* ((buffer (marker-buffer marker))
             (filename
              (buffer-file-name (or (buffer-base-buffer buffer)
                                    buffer)))
             (heading
              (org-with-point-at marker
                (org-get-heading 'no-tags 'no-todo)))
             ;; Won't work with target buffers whose filename is nil
             (rfloc (list heading filename nil marker))
             (org-after-refile-insert-hook (cons #'org-reveal org-after-refile-insert-hook)))
        (org-refile nil nil rfloc))))

  (defun +org/refile-to-last-location (arg)
    "Refile current heading to the last node you refiled to.
If prefix ARG, copy instead of move."
    (interactive "P")
    (or (assoc (plist-get org-bookmark-names-plist :last-refile)
               bookmark-alist)
        (user-error "No saved location to refile to"))
    (let ((org-refile-keep arg)
          (completing-read-function
           (lambda (_p _coll _pred _rm _ii _h default &rest _)
             default)))
      (org-refile)))

  (defun +org/refile-to-other-window (arg)
    "Refile current heading to an org buffer visible in another window.
If prefix ARG, copy instead of move."
    (interactive "P")
    (let ((org-refile-keep arg)
          org-refile-targets
          current-prefix-arg)
      (dolist (win (delq (selected-window) (window-list)))
        (with-selected-window win
          (let ((file (buffer-file-name (buffer-base-buffer))))
            (and (eq major-mode 'org-mode)
                 file
                 (cl-pushnew (cons file (cons :maxlevel 10))
                             org-refile-targets)))))
      (call-interactively #'org-refile)))

  ;; Save all buffers after refilling
  (advice-add 'org-refile :after (lambda (&rest _) (org-save-all-org-buffers))))
#+end_src
** org-archive
#+begin_src emacs-lisp
(setq org-archive-location (concat org-directory "/archive/%s_archive.org::* Archived"))
#+end_src
** org-modern
#+begin_src emacs-lisp
(use-package org-modern
  :straight t
  ;; :hook (org-mode . org-modern-mode)
  :hook (org-agenda-finalize . org-modern-agenda)
  ;; :custom-face
  ;; ;; force monospaced font for tags
  ;; (org-modern-tag ((t (:inherit org-verbatim :foreground "black" :background "lightgray" :box "black"))))
  :custom
  (org-modern-star '("◉" "○" "◈" "◇" "✳" "◆" "✸" "▶"))
  (org-modern-table-vertical 5)
  (org-modern-table-horizontal 2)
  (org-modern-list '((?+ . "➤") (?- . "–") (?* . "•")))
  (org-modern-block-fringe nil)
  (org-modern-checkbox nil) ;; not that interesting! maybe it depends on the used font
  (org-modern-todo-faces
   ;; tweak colors, and force it to be monospaced, useful when using `mixed-pitch-mode'.
   '(("idea" . (:inherit org-verbatim :weight semi-bold :foreground "white" :background "goldenrod"))
     ("next" . (:inherit org-verbatim :weight semi-bold :foreground "white" :background "indianred1"))
     ("strt" . (:inherit org-verbatim :weight semi-bold :foreground "white" :background "orangered"))
     ("wait" . (:inherit org-verbatim :weight semi-bold :foreground "white" :background "coral"))
     ("kill" . (:inherit org-verbatim :weight semi-bold :foreground "white" :background "darkgreen"))
     ("proj" . (:inherit org-verbatim :weight semi-bold :foreground "white" :background "limegreen"))
     ("hold" . (:inherit org-verbatim :weight semi-bold :foreground "white" :background "orange"))
     ("done" . (:inherit org-verbatim :weight semi-bold :foreground "black" :background "lightgray")))))
#+end_src

** org-capture
#+begin_src emacs-lisp
(use-package org-capture
  :after org
  :straight (:type built-in)
  :bind (("C-c _" . org-capture))
  :preface
  (defvar my/org-appointment
    (concat "* TODO %^{Appointment} :appt:\n"
            "SCHEDULED: %t\n") "Template for appointment task.")
  (defvar my/org-active-task-template
    (concat "* NEXT %^{Task}\n"
            ":PROPERTIES:\n"
            ":Effort: %^{effort|1:00|0:05|0:15|0:30|2:00|4:00}\n"
            ":CAPTURED: %<%Y-%m-%d %H:%M>\n"
            ":END:") "Template for basic task.")
  (defvar my/org-meeting
    (concat "* MEETING %^{Meeting}\n"
            "SCHEDULED: %t\n") "Template for meetings")

  (defvar my/org-weekly
    (concat "* wk" (format-time-string "%V") "       " ":wk" (format-time-string "%V") ":")
    "Template for weeklies")

  (defvar my/org-basic-task-template
    (concat "* TODO %^{Task}\n"
            ":PROPERTIES:\n"
            ":Effort: %^{effort|1:00|0:05|0:15|0:30|2:00|4:00}\n"
            ":CAPTURED: %<%Y-%m-%d %H:%M>\n"
            ":END:") "Template for basic task.")
  :custom
  (org-capture-templates
   `(
     ("a" "Appointment" entry (file+headline "inbox.org" "Appointments"),
      my/org-appointment
      :empty-lines 1)

     ;; Notes
     ("n" "Note" entry (file+headline "inbox.org" "Notes")
         "* %^{Title} %^G \n:PROPERTIES:\n:CREATED: %U\n:END:\n\n%?"
         :empty-lines 1)

     ("m" "Meetings")
     ("mn" "Meeting" entry (file+headline "inbox.org" "Meetings"),
      my/org-meeting
      :empty-lines 1)

      ("mm" "Minutes" entry (file+headline "inbox.org" "Minutes")
      "** %t-%^{Meeting} \n%?")

     ("ma" "Active meeting" entry (file+headline "inbox.org" "Meetings")
      "* MEETING with %? :meeting:\n%U" :clock-in t :clock-resume t :empty-lines 1)

     ("t" "New Task")
     ("ta" "Active" entry (file+headline "inbox.org" "Active"),
      my/org-active-task-template
      :empty-lines 1
      :clock-in t)
     ("tb" "Backlog" entry (file+headline "inbox.org" "Backlog"),
      my/org-basic-task-template
      :empty-lines 1)

     ("w" "Weekly" entry (file+headline "inbox.org" "Weeklies"),
      my/org-weekly
      :empty-lines 1))))
#+end_src

#+results:
: org-capture

** org-timeblock                                                       :todo:
#+begin_src emacs-lisp
(use-package org-timeblock
  :straight t
  :after (org org-agenda)
  :bind (:map org-timeblock-mode-map
              ("M-n" . org-timeblock-forward-block)
              ("M-p" . org-timeblock-backward-block)
              ("M-s" . org-timeblock-schedule)
              ("M-c i" . org-timeblock-clock-in)
              ("M-c t" . org-timeblock-todo)
              ("r" . org-timeblock-redraw-buffers)
              ("s" . org-timeblock-switch-view))
  :config
  (setq org-timeblock-n-days-view 2
        org-timeblock-scale-options '(8 . 17)))

(defun dorneanu/org-setup-org-timeblock()
  (interactive)
  (add-hook `org-agenda-mode-hook #'org-timeblock-redraw-buffers)
  (split-window-right)
  (balance-windows)
  (other-window 1)
  (org-timeblock))
#+end_src
** exporters
*** hugo
#+begin_src emacs-lisp
(use-package ox-hugo
  :after org
  :straight t)
#+end_src
*** slack
#+begin_src emacs-lisp
(use-package ox-slack
  :straight t
  :defer t)
#+end_src
** org-roam
#+begin_src emacs-lisp
(require 'ox-hugo)
(use-package org-roam
  :straight t
  :defer t
  :bind (("M-g rn" . org-roam-node-find)
         ("M-g rs" . my/rg-org-roam-directory)
         ("M-g rc" . org-roam-capture)
         ("M-g ri" . org-roam-node-insert)
         ("M-g rta" . org-roam-tag-add)
         ("M-g rtd" . org-roam-tag-remove))

  :commands (consult-org-roam-search consult-org-roam-find)
  :custom
  (org-roam-directory (getenv "ORG_ROAM_DIRECTORY"))
  (org-roam-node-display-template (concat "${title:*} " (propertize "${tags:20}" 'face 'org-tag)))
  (org-roam-directory (expand-file-name "repos/priv/roam/" (getenv "HOME")))
  (org-roam-completion-everywhere t)
  :config
  (org-roam-db-autosync-mode 1)
  (setq org-roam-capture-templates
        '(("d" "default" plain
           "%?"
           :if-new (file+head "topics/${slug}.org" "#+title: ${title}\n")
           :unnarrowed t)
          ("j" "Journal" plain "%?"
           :if-new (file+head "journal/%<%Y-%m-%d>.org"
                              "#+title: %<%Y-%m-%d>\n#+filetags: journal\n#+date: %<%Y-%m-%d>\n")
           :immediate-finish t
           :unnarrowed t)
          ("b" "book" plain "%?"
           :if-new
           (file+head "books/${slug}.org" "#+title: ${title}\n#+filetags: book\n")
           :immediate-finish t
           :unnarrowed t)
          ;; Idea from https://daryl.wakatara.com/emacs-gtd-flow-evolved/
          ("r" "Rez" plain "%?"
           :target (file+head "rez/%<%Y>/${slug}.org"
                              "#+TITLE: ${title}
      ,#+CREATED: %u

      ,* ${title}
      :properties:
      :url:
      :end:

      ,* Actions
      ,* Quotes
      ,* Notes
      ") :unnarrowed t)
          ("x" "Blog" plain "%?"
           :if-new (file+head "blog/%<%Y-%m-%d>-${slug}.org" "#+SETUPFILE: setup.org\n#+TITLE: ${title}\n#+CREATED: %<%Y-%m-%d>\n#+HUGO_DRAFT: true\n\n")
           :unnarrowed t)
          ))
  )
#+end_src
*** org-roam-dailies
#+begin_src emacs-lisp
(use-package org-roam-dailies
  :straight (:type built-in)
  :after org
  :bind (("M-g rj" . org-roam-dailies-goto-today))
  :config
  (setq org-roam-dailies-directory "org/journal")
  (setq org-roam-dailies-capture-templates
        '(("d" "default" entry
           "* %?"
           :if-new (file+head "%<%Y-%m-%d>.org"
                              "#+TITLE: %<%Y-%m-%d>\n#+DATE: %<%Y-%m-%d>\n#+FILETAGS: journal")))))

#+end_src

*** COMMENT consult-org-roam: Disabled due to performance issues
#+begin_src emacs-lisp
(use-package consult-org-roam
  :straight t
  :bind (("M-g rn" . consult-org-roam-file-find)
         ("M-g rs" . consult-org-roam-search))
  :custom
  (consult-org-roam-grep-func #'consult-ripgrep)
  (consult-org-roam-buffer-narrow-key ?r) ; custom narrow key for `consult-buffer'
  (consult-org-roam-buffer-after-buffers t)
  :config
  (consult-org-roam-mode 1)
  ;; Eventually suppress previewing for certain functions
  (consult-customize consult-org-roam-forward-links :preview-key (kbd "M-.")))
#+end_src
** org-babel
#+begin_src emacs-lisp
(with-eval-after-load 'org
  ;; (setq org-src-window-setup 'reorganize-frame)
  (setq org-src-fontify-natively t)  ; syntax highlighting for source code blocks

  ;; Tab should do indent in code blocks
  (setq org-src-tab-acts-natively nil)

  ;; Don't remove (or add) any extra whitespace
  (setq org-src-preserve-indentation nil)
  (setq org-edit-src-content-indentation 0))

;; Install ob-go
(use-package ob-go
  :straight t
  :defer t)

(use-package jq-mode
  :straight t
  :defer t)

(use-package ob-mermaid
  :straight t
  :defer t)

(use-package ob-graphql
  :straight t
  :defer t)

(org-babel-do-load-languages
 'org-babel-load-languages
 '((sql . t)
   (go . t)
   (plantuml . t)
   (emacs-lisp . t)
   (mermaid . t)
   (graphql . t)
   (shell . t)))
#+end_src
** COMMENT org-sidebar                                                        :todo:
#+begin_src emacs-lisp
(use-package org-sidebar
  :straight t
  :after org)
#+end_src
** counsel-org-tag
Use counsel-org-tag (I couldn't find any alternative for consult):

#+begin_src emacs-lisp
(global-set-key [remap org-set-tags-command] #'counsel-org-tag)
#+end_src
** COMMENT org-drawio
#+begin_src emacs-lisp
(use-package org-drawio
  :commands (org-drawio-add
             org-drawio-open)
  :custom ((org-drawio-input-dir "./draws")
           (org-drawio-output-dir "./images")
           (org-drawio-output-page "0")
           ;; set to t, if you want to crop the image.
           (org-drawio-crop nil)))
#+end_src
** COMMENT el-draw
#+begin_src emacs-lisp
(use-package el-easydraw
  :straight (el-easydraw :build t
                         :type git
                         :host github
                         :repo "misohena/el-easydraw"))
#+end_src
** org-web-tools
#+begin_src emacs-lisp
(use-package org-web-tools
  :straight t
  :config
  (setq org-web-tools-pandoc-sleep-time 10))

(defun my/sanitize-filename (title)
  "Convert title to safe filename"
  (let* (;; Remove problematic characters
         (safe-title (replace-regexp-in-string 
                      "[^a-zA-Z0-9 ._-]" "" title))
         ;; Replace spaces with underscores or hyphens
         (hyphenated (replace-regexp-in-string 
                      "\\s-+" "-" safe-title))
         ;; Remove multiple consecutive hyphens
         (cleaned (replace-regexp-in-string 
                   "-+" "-" hyphenated))
         ;; Trim and limit length
         (trimmed (string-trim cleaned "-"))
         (limited (if (> (length trimmed) 50)
                      (concat (substring trimmed 0 47) "...")
                    trimmed)))
    
    ;; Ensure we don't end with dots or hyphens
    (replace-regexp-in-string "[-_.]+$" "" limited)))

(defun my/get-webpage-title (url)
  "Extract title directly from webpage HTML"
  (with-temp-buffer
    (url-insert-file-contents url)
    (goto-char (point-min))
    (when (re-search-forward "<title>\\([^<]+\\)</title>" nil t)
      (let ((title (match-string 1)))
        ;; Decode HTML entities
        (setq title (replace-regexp-in-string "&amp;" "&" title))
        (setq title (replace-regexp-in-string "&lt;" "<" title))
        (setq title (replace-regexp-in-string "&gt;" ">" title))
        (setq title (replace-regexp-in-string "&quot;" "\"" title))
        (string-trim title)))))

(defun my/url-to-epub-with-real-title (url)
  "Get actual webpage title and convert to epub with date"
  (interactive "sURL: ")
  (let* ((webpage-title (my/get-webpage-title url))
         (org-content (org-web-tools--url-as-readable-org url))
         (temp-org (make-temp-file "web-article" nil ".org"))
         (final-title (or webpage-title 
                         (my/extract-title-robust org-content url)))
         (clean-filename (my/sanitize-filename final-title))
         ;; Add date prefix for chronological organization
         (dated-filename (format "%s_%s" 
                                (format-time-string "%Y-%m-%d") 
                                clean-filename))
         (epub-file (expand-file-name 
                    (concat dated-filename ".epub")
                    "~/Dropbox/Ebooks/")))
    
    (message "Using title: '%s'" final-title)
    (message "Final filename: %s.epub" dated-filename)
    
    (with-temp-file temp-org
      (insert org-content))
    
    (make-directory (file-name-directory epub-file) t)
    
    (shell-command 
     (format "pandoc -f org -t epub3 --metadata title='%s' -o '%s' '%s'"
             final-title epub-file temp-org))
    
    (delete-file temp-org)
    (message "Created epub: %s" (file-name-nondirectory epub-file))))
#+end_src
** org-download
Insert images easily into ORG mode files
#+begin_src emacs-lisp
(use-package org-download
  :straight t
  :after org
  :hook (org-mode . org-download-enable))

;; Drag-and-drop to `dired`
(add-hook 'dired-mode-hook 'org-download-enable)
#+end_src
** presentations
*** org-re-reveal
Use [[https://oer.gitlab.io/org-re-reveal/][org-re-reveal]] for creating presentations using [[https://revealjs.com/][revealjs]].
#+begin_src emacs-lisp
(use-package org-re-reveal
  :straight t
  :defer t)
#+end_src
*** org-present
#+begin_src emacs-lisp
(use-package org-present
  :straight t
  :commands (org-present)
  :config
  (setq  org-present-startup-folded t)
  (setq org-present-mode-hook
        (list (lambda ()
                (blink-cursor-mode 0)
                (org-present-big)
                (org-overview)
                ;; (org-display-inline-images)
                ;; (org-present-hide-cursor)
                (org-present-read-only)
                (display-line-numbers-mode 0)
                ;; (org-latex-preview '(16))
                ;; TODO ^somehow this stucks at running LaTeX^
                (setq-local olivetti-body-width 70)
                (olivetti-mode 1))))
  (setq org-present-mode-quit-hook
        (list (lambda ()
                (blink-cursor-mode 1)
                (org-present-small)
                ;; (org-remove-inline-images)
                (org-present-show-cursor)
                (org-present-read-write)
                (display-line-numbers-mode 1)
                (olivetti-mode -1)
                (setq-local olivetti-body-width (default-value 'olivetti-body-width))))))
#+end_src

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (26417 39284 13743 0) :init (26417 39284 13740 0) :init-secs (0 0 4529 0) :use-package-secs (0 0 21692 0) :config (26417 39284 13726 0) :config-secs (0 0 4511 0)))

** org-mode: custom elisp
*** Enter clock data manually
From https://mbork.pl/2023-03-20_Manually_entering_clocking_data

#+begin_src emacs-lisp
(defun dorneanu/org-clock-enter-manually (begin end)
  "Enter a clock item manually."
  (interactive (list (org-read-date t t) (org-read-date t t)))
  (save-excursion
    (org-clock-find-position nil)
    (insert-before-markers-and-inherit "\n")
    (backward-char 1)
    (insert-and-inherit org-clock-string " ")
    (org-insert-time-stamp begin t t)
    (org-insert-time-stamp end t t "--")
    (org-evaluate-time-range t)))
#+end_src
*** Auto clock-in when task is started
#+begin_src emacs-lisp
;; From https://github.com/svetlyak40wt/dot-emacs/blob/master/.emacs.d/lib/org-auto-clock.el
;; Auto clock-in when task is marked STARTED
(defun wicked/org-clock-in-if-starting ()
  "Clock in when the task is marked STARTED."
  (when (and (string= org-state "STARTED")
             (not (string= org-last-state org-state)))
    (org-clock-in)))

(defun wicked/org-clock-out-if-waiting ()
  "Clock out when the task is marked WAITING or WIP (Work in Progress)."
  (when (and (or (string= org-state "WAITING")
                 (string= org-state "WIP"))
             (equal (marker-buffer org-clock-marker) (current-buffer))
             (< (point) org-clock-marker)
             (> (save-excursion (outline-next-heading) (point))
                org-clock-marker)
             (not (string= org-last-state org-state)))
    (org-clock-out)))

(with-eval-after-load 'org
  (add-hook 'org-after-todo-state-change-hook #'wicked/org-clock-in-if-starting)
  (defadvice org-clock-in (after wicked activate)
    "Set this task's status to 'STARTED'."
    (org-todo "STARTED"))
  (add-hook 'org-after-todo-state-change-hook #'wicked/org-clock-out-if-waiting))
#+end_src
*** Create ORG heading from clipboard link
#+begin_src emacs-lisp
(cl-defun dorneanu/org-insert-link-from-clipboard (&optional (url (org-web-tools--get-first-url)))
  "Extend org-web-tools to create to take URL from clipboard or kill-ring"
  (interactive)
  (require 'org-web-tools)
  (if-let ((dom (plz 'get url :as (lambda ()
                                    (libxml-parse-html-region (point-min) (point-max)))))
           (title (cl-caddr (car (dom-by-tag dom 'title)))))
      (insert (format "%s ◦ [[%s][%s]]" (format-time-string "%Y-%m-%d") url (org-web-tools--cleanup-title title)))))
#+end_src
*** Focus on current heading
#+begin_src emacs-lisp
(defun dorneanu/org-focus-current-subtree ()
  "Show current subtree, fold everything else"
  (interactive)
  (org-overview)  ; Fold everything
  (org-reveal)    ; Show path to current heading
  (org-show-subtree)) ; Show current subtree content
#+end_src
* Media
** empv
Watch YouTube videos from Emacs using ~mpv~. I also learned you can save the
position and resume whenever the same video is played again (read [[https://unix.stackexchange.com/questions/414639/is-it-possible-to-continue-movies-from-where-one-leaves-in-mpv-as-can-be-done-in][here]]).

#+begin_src emacs-lisp
(use-package empv
  :straight t
  :after (embark browse-url)
  :config

  (setq empv-invidious-instance "https://yewtu.be/")
  (add-to-list 'empv-mpv-args "--ytdl-format=best")

  (defun dorneanu/empv-play-url (url &optional _)
    (interactive)
    (empv-toggle-video)
    (empv-play url)))

(defun dorneanu/play-video-with-mpv-browse (url &optional _)
  "Play a video URL with mpv."
  (interactive "sEnter video URL: ")
  (let ((quality-arg "")
        (quality-val (completing-read "Max height resolution (0 for unlimited): " '("0" "480" "720" "1080" "1980") nil nil)))
    (setq quality-val (string-to-number quality-val))
    (message "Opening %s with height≤%s with mpv..." url quality-val)
    (when (< 0 quality-val)
      (setq quality-arg (format "--ytdl-format=[height<=?%s]" quality-val)))
    (start-process "elfeed-mpv" nil "mpv" quality-arg url)))

;; Handle youtube links using mpv
(with-eval-after-load 'browse-url
  (add-to-list 'browse-url-handlers (cons "^https://\\(www.\\)?youtube.com\\|https://youtu.be" #'dorneanu/play-video-with-mpv-browse)))
#+end_src
** elfeed
#+begin_src emacs-lisp
(use-package elfeed
  :defer t
  :straight t
  :bind (;; Global bindings
         ("C-c a e e" . elfeed)
         ("C-c a e u" . elfeed-update)
         ("C-c a e s" . elfeed-search)
         ("C-c a e b" . elfeed-search-browse-bookmark)
         ("C-c a e l" . elfeed-search-live-filter)

         ;; Search mode bindings
         :map elfeed-search-mode-map
         ("TAB" . elfeed-search-show-entry)
         ("g" . elfeed-search-update--force)
         ("f j" . dorneanu/elfeed-cycle-filters-forward)
         ("f J" . dorneanu/elfeed-cycle-filters-backward)
         ("f k" . dorneanu/elfeed-increase-time-filter)
         ("f K" . dorneanu/elfeed-decrease-time-filter)
         ("f u" . elfeed-update)
         ("f U" . elfeed-search-update--force)
         ("y" . elfeed-search-yank)
         ("s" . elfeed-search-live-filter)
         ("b" . elfeed-search-browse-bookmark)
         ("c" . org-capture)
         ("F" . elfeed-search-fetch-visible)
         ("t t" . elfeed-search-toggle-all)
         ("v" . elfeed-search-view-animation)
         ("C-c C-e" . elfeed-search-export-entries)
         ("f d" . elfeed-search-tag-all-default)
         ("m g r" . my/elfeed-reddit-show-comments)
         ("m g h" . my/elfeed-hn-show-comments)
         ("o x" . dorneanu/elfeed-search-browse-url-xwidget)
         ("o b" . elfeed-search-browse-url)
         ("o B" . dorneanu/elfeed-search-browse-url-chrome)
         ("o r" . sqrtminusone/rdrview-elfeed-show)

         ;; Show mode bindings
         :map elfeed-show-mode-map
         ("q" . kill-buffer-and-window)
         ("u" . elfeed-show-tag--unread)
         ("y" . elfeed-show-yank)
         ("e" . dorneanu/elfeed-show-browse-url-eww)
         ("n" . elfeed-show-next)
         ("p" . elfeed-show-prev)
         ("+" . elfeed-show-tag)
         ("-" . elfeed-show-untag)
         ("s" . elfeed-show-save)
         ("b" . elfeed-show-bookmark)
         ("r" . elfeed-show-refresh)
         ("h" . elfeed-show-visit-html-file)
         ;; For navigation
         ("C-j" . forward-paragraph)
         ("C-k" . backward-paragraph))
  :custom
  ((elfeed-search-title-min-width 70)
   (elfeed-search-title-max-width 140)
   (elfeed-search-trailing-width 30)
   (elfeed-search-date-format '("%Y-%m-%d %H:%M" 16 :left))
   ;; Cache content for offline reading
   (elfeed-use-curl t)
   (elfeed-curl-max-connections 10)
   (elfeed-search-filter "@1-week-ago +unread +daily -devto -youtube -hn")
   (elfeed-db-directory "~/.elfeed")
   (elfeed-goodies/wide-threshold 0.2)
   (elfeed-set-timeout 36000))
  :config
  (custom-set-faces
   ;; Title styling
   '(elfeed-show-title-face ((t :height 1.5
                                :weight bold
                                :family "Variable Serif"
                                :foreground "#A6E3A1")))  ; Catppuccin green
   ;; Author and feed info
   '(elfeed-show-author-face ((t :height 1.2
                                 :family "Variable Sans"
                                 :foreground "#F9E2AF")))  ; Catppuccin yellow
   '(elfeed-show-feed-face ((t :height 1.1
                               :family "Variable Sans"
                               :foreground "#89B4FA")))    ; Catppuccin blue
   ;; Tags and metadata
   ;; '(elfeed-show-tag-face ((t :box (:line-width 1)       ; Boxed tags
   ;;                            :foreground "#F5C2E7")))     ; Catppuccin pink
   ;; Link styling
   '(elfeed-show-link-face ((t :height 1.1
                               :underline (:style line)
                               :foreground "#89DCEB"))))   ; Catppuccin sky

  ;; Function to enhance show buffer readability
  (defun my/elfeed-show-buffer-setup ()
    "Enhance the readability of elfeed show buffer."
    ;; Basic buffer settings
    (setq-local line-spacing 0.2)            ; Increase line spacing
    (setq-local left-margin-width 2)         ; Add left margin
    (setq-local right-margin-width 2)        ; Add right margin
    (setq-local header-line-format nil)      ; Clean header line
    (setq-local cursor-type 'bar)            ; Thin cursor

    ;; Enable useful minor modes
    (variable-pitch-mode t)                  ; Use variable-pitch fonts
    (visual-line-mode t)                     ; Wrap lines at window edge
    (visual-fill-column-mode t)              ; Center content
    (display-line-numbers-mode -1)           ; Disable line numbers
    (olivetti-mode t)                        ; Center content with margins

    ;; Apply text scaling
    (text-scale-set 1)

    ;; Set max content width
    (setq-local visual-fill-column-width 100)
    (setq-local visual-fill-column-center-text t)

    ;; Custom font locks for better content structure
    ;; (font-lock-add-keywords             ;
    ;;  nil
    ;;  '(("^\\*+ .*$" . '(:height 1.2 :weight bold))   ; Headlines
    ;;    ("^[-*] .*$" . '(:height 1.1))                ; List items
    ;;    ("`\\(.*?\\)`" . '(:family "Monospace"))      ; Inline code
    ;;    ("^> .*$" . '(:slant italic :foreground "#C6A0F6"))))
    )  ; Blockquotes

  ;; Hooks
  (add-hook 'elfeed-show-mode-hook #'my/elfeed-show-buffer-setup)
  (add-hook 'elfeed-search-mode-hook
            (lambda ()
              (setq-local tooltip-function #'elfeed-search-show-entry-tooltip))))
#+end_src

*** Custom functions

#+begin_src emacs-lisp
(defun hp/elfeed-entry-line-draw (entry)
  "Enhanced print function for ENTRY in the elfeed-search buffer."
  (let* (;; Basic entry information
         (date (elfeed-search-format-date (elfeed-entry-date entry)))
         (title (or (elfeed-meta entry :title)
                    (elfeed-entry-title entry)
                    ""))
         (title-faces (elfeed-search--faces (elfeed-entry-tags entry)))

         ;; Feed information
         (feed (elfeed-entry-feed entry))
         (feed-title (when feed
                       (or (elfeed-meta feed :title)
                           (elfeed-feed-title feed))))

         ;; Tags formatting
         (tags (mapcar #'symbol-name (elfeed-entry-tags entry)))
         (tags-str (concat "[" (mapconcat 'identity tags ",") "]"))

         ;; Width calculations
         (title-width (- (window-width)
                         elfeed-goodies/feed-source-column-width
                         elfeed-goodies/tag-column-width
                         10  ; date width
                         4)) ; spacing

         ;; Column formatting
         (title-column (elfeed-format-column
                        title
                        (elfeed-clamp elfeed-search-title-min-width
                                      title-width
                                      title-width)
                        :left))
         (tag-column (elfeed-format-column
                      tags-str
                      (elfeed-clamp (length tags-str)
                                    elfeed-goodies/tag-column-width
                                    elfeed-goodies/tag-column-width)
                      :left))
         (feed-column (elfeed-format-column
                       feed-title
                       (elfeed-clamp elfeed-goodies/feed-source-column-width
                                     elfeed-goodies/feed-source-column-width
                                     elfeed-goodies/feed-source-column-width)
                       :left))

         ;; Reading time calculation
         (content (elfeed-deref (elfeed-entry-content entry)))
         (word-count (when content
                       (with-temp-buffer
                         (insert content)
                         (count-words (point-min) (point-max)))))
         (reading-time (when word-count
                         (format "%dm" (/ word-count 200))))

         ;; Age calculations
         (age-in-days (/ (- (float-time)
                            (float-time (elfeed-entry-date entry)))
                         86400))
         (age-face (cond ((> age-in-days 365) 'font-lock-comment-face)
                         ((> age-in-days 30) 'font-lock-keyword-face)
                         (t 'font-lock-string-face))))

    ;; Display logic based on window width
    (if (>= (window-width) (* (frame-width) elfeed-goodies/wide-threshold))
        ;; Wide format
        (progn
          ;; Date and reading time
          (insert (propertize date 'face 'elfeed-search-date-face) " ")
          (when reading-time
            (insert (propertize (format "[%s] " reading-time)
                                'face 'font-lock-comment-face)))

          ;; Feed and tags
          (insert (propertize feed-column 'face 'elfeed-search-feed-face) " ")
          (insert (propertize tag-column 'face 'elfeed-search-tag-face) " ")

          ;; Title and age
          (insert (propertize title 'face title-faces 'kbd-help title))
          (when (> age-in-days 7)
            (insert " " (propertize (format "(%d days old)" (round age-in-days))
                                    'face age-face))))

      ;; Narrow format
      (insert (propertize title 'face title-faces 'kbd-help title)))))

;; Add mouseover tooltips
(defun elfeed-search-show-entry-tooltip ()
  (when-let* ((entry (elfeed-search-selected :single))
              (content (elfeed-deref (elfeed-entry-content entry))))
    (let ((summary (with-temp-buffer
                     (insert content)
                     (goto-char (point-min))
                     (forward-paragraph)
                     (buffer-substring (point-min) (point)))))
      (format "Title: %s\nFeed: %s\nSummary: %s"
              (elfeed-entry-title entry)
              (elfeed-feed-title (elfeed-entry-feed entry))
              (truncate-string-to-width summary 200)))))
(defun hp/elfeed-entry-line-draw (entry)
  "Print ENTRY to the buffer."
  (let* ((date (elfeed-search-format-date (elfeed-entry-date entry)))
         (title (or (elfeed-meta entry :title) (elfeed-entry-title entry) ""))
         (title-faces (elfeed-search--faces (elfeed-entry-tags entry)))
         (feed (elfeed-entry-feed entry))
         (feed-title
          (when feed
            (or (elfeed-meta feed :title) (elfeed-feed-title feed))))
         (tags (mapcar #'symbol-name (elfeed-entry-tags entry)))
         (tags-str (concat "[" (mapconcat 'identity tags ",") "]"))
         (title-width (- (window-width) elfeed-goodies/feed-source-column-width
                         elfeed-goodies/tag-column-width 4))
         (title-column (elfeed-format-column
                        title (elfeed-clamp
                               elfeed-search-title-min-width
                               title-width
                               title-width)
                        :left))
         (tag-column (elfeed-format-column
                      tags-str (elfeed-clamp (length tags-str)
                                             elfeed-goodies/tag-column-width
                                             elfeed-goodies/tag-column-width)
                      :left))
         (feed-column (elfeed-format-column
                       feed-title (elfeed-clamp elfeed-goodies/feed-source-column-width
                                                elfeed-goodies/feed-source-column-width
                                                elfeed-goodies/feed-source-column-width)
                       :left))
         ;; (entry-score (elfeed-format-column (number-to-string (elfeed-score-scoring-get-score-from-entry entry)) 6 :left))
         ;; (entry-authors (concatenate-authors
         ;;                 (elfeed-meta entry :authors)))
         ;; (authors-column (elfeed-format-column entry-authors elfeed-goodies/tag-column-width :left))
         )
    (if (>= (window-width) (* (frame-width) elfeed-goodies/wide-threshold))
        (progn
          ;; (insert (propertize entry-score 'face 'elfeed-search-feed-face) " ")
          (insert (propertize date 'face 'elfeed-search-date-face) " ")
          (insert (propertize feed-column 'face 'elfeed-search-feed-face) " ")
          (insert (propertize tag-column 'face 'elfeed-search-tag-face) " ")
          ;; (insert (propertize authors-column 'face 'elfeed-search-tag-face) " ")
          (insert (propertize title 'face title-faces 'kbd-help title))
          )
      (insert (propertize title 'face title-faces 'kbd-help title))))
  )

#+end_src

xwidget related:

#+begin_src emacs-lisp
(defun dorneanu/elfeed-search-browse-url-xwidget (&optional use-generic-p)
  "open with xwidget"
  (interactive "P")
  ;; Split window and focus there
  (split-window-right)
  (balance-windows)
  (other-window 1)
  (let ((browse-url-browser-function #'xwidget-webkit-browse-url))
    (elfeed-search-browse-url use-generic-p)))
#+end_src

chrome related:
#+begin_src emacs-lisp
(defun dorneanu/elfeed-search-browse-url-chrome (&optional use-generic-p)
  "Open elfeed entry with default macOS browser"
  (interactive "P")
  (let ((browse-url-browser-function #'browse-url-default-macosx-browser))
    (elfeed-search-browse-url use-generic-p)))
#+end_src

*** Filter cycling
Cycle through different filters:

#+begin_src emacs-lisp
(defvar dorneanu/elfeed-custom-filters
  '("+2read"
    "+unread +golang"
    "@1-week-ago +unread +daily -devto -youtube -hn"
    "@1-week-ago +unread +daily -devto -youtube -hn +blogs"
    "@1-week-ago +unread +daily -devto -youtube -hn +security"
    "@1-week-ago +unread +reddit +top"
    "@1-week-ago +unread -hn +news +lage"
    "@1-week-ago +unread -hn +news +correctiv"
    "@1-week-ago +unread +finance"
    "@1-week-ago +unread +daily -devto +youtube +y1"
    "@1-week-ago +unread +daily -devto +hn +points")
  "List of elfeed filters to cycle through.")

(defvar dorneanu/elfeed-current-filter-index 0
  "Current index of `my-elfeed-filters` list.")

;; Regular expression to match the time filter
(defvar dorneanu/time-filter-regex "@\\([0-9]+\\)-week-ago"
  "Regex to match the time filter in elfeed.")

(defun dorneanu/elfeed-cycle-filters-forward ()
  "Cycle forward through `dorneanu/elfeed-custom-filters` and apply the current filter."
  (interactive)
  (setq dorneanu/elfeed-current-filter-index
        (mod (1+ dorneanu/elfeed-current-filter-index)
             (length dorneanu/elfeed-custom-filters)))
  (let ((current-filter (nth dorneanu/elfeed-current-filter-index dorneanu/elfeed-custom-filters)))
    (elfeed-search-set-filter current-filter)
    (message "Elfeed filter set to: %s" current-filter)))

(defun dorneanu/elfeed-cycle-filters-backward ()
  "Cycle backward through `dorneanu/elfeed-custom-filters` and apply the current filter."
  (interactive)
  (setq dorneanu/elfeed-current-filter-index
        (mod (1- dorneanu/elfeed-current-filter-index)
             (length dorneanu/elfeed-custom-filters)))
  (let ((current-filter (nth dorneanu/elfeed-current-filter-index dorneanu/elfeed-custom-filters)))
    (elfeed-search-set-filter current-filter)
    (message "Elfeed filter set to: %s" current-filter)))

(defun dorneanu/elfeed-adjust-time-filter (increment)
  "Adjust the time filter in the current elfeed filter.
  INCREMENT can be positive or negative to increase or decrease the time filter."
  (let* ((current-filter (nth dorneanu/elfeed-current-filter-index dorneanu/elfeed-custom-filters))
         (new-filter (replace-regexp-in-string
                      "@\\([0-9]+\\)-week-ago"
                      (lambda (match)
                        (let ((current-weeks (string-to-number (match-string 1 match))))
                          (concat "@" (number-to-string (max 1 (+ current-weeks increment))) "-week-ago")))
                      current-filter)))
    ;; Update the filter list with the new filter
    (setf (nth dorneanu/elfeed-current-filter-index dorneanu/elfeed-custom-filters) new-filter)
    ;; Apply the new filter
    (elfeed-search-set-filter new-filter)
    (message "Elfeed filter set to: %s" new-filter)))

(defun dorneanu/elfeed-increase-time-filter ()
  "Increase the time filter (e.g., from @1-week-ago to @2-week-ago)."
  (interactive)
  (dorneanu/elfeed-adjust-time-filter 1))

(defun dorneanu/elfeed-decrease-time-filter ()
  "Decrease the time filter (e.g., from @2-week-ago to @1-week-ago)."
  (interactive)
  (dorneanu/elfeed-adjust-time-filter -1))

(defun dorneanu/elfeed-cycle-filters ()
  "Cycle through `dorneanu/elfeed-custom-filters` and apply the current filter."
  (interactive)
  (setq dorneanu/elfeed-current-filter-index
        (mod (1+ dorneanu/elfeed-current-filter-index)
             (length dorneanu/elfeed-custom-filters)))
  (let ((current-filter (nth dorneanu/elfeed-current-filter-index dorneanu/elfeed-custom-filters)))
    (elfeed-search-set-filter current-filter)
    (message "Elfeed filter set to: %s" current-filter)))
#+end_src

*** elfeed-goodies
Elfeed-goodies is a package which enhances the Elfeed experience.
Aside from running its setup command as soon as possible, I also set
in this code block all my keybinds for Elfeed here.
#+begin_src emacs-lisp
(use-package elfeed-goodies
  :after elfeed
  :commands elfeed-goodies/setup
  :straight 
  :init
  (elfeed-goodies/setup)
  :custom
  (elfeed-goodies/feed-source-column-width 28)
  (elfeed-goodies/tag-column-width 28)
  :config
  (setq elfeed-search-print-entry-function 'hp/elfeed-entry-line-draw))
#+end_src
*** Youtube
I don’t want YouTube videos to be open with my web browser when I
invoke ~elfeed-show-visit~, so I’ll advise this function to make it
possible to modify the behaviour of said function. Oh, and I already
made [[file:../../scripts.md#ytplay][a neat package]] for playing YouTube videos and friends through
[[https://ytdl-org.github.io/youtube-dl/][youtube-dl]] or its superior fork [[https://github.com/yt-dlp/yt-dlp][yt-dlp]] in mpv.

#+name: elfeed-open-youtube-with-mpv
#+begin_src emacs-lisp
(defun my/elfeed-filter-youtube-videos (orig-fun &rest args)
  "Open with mpv the video leading to PATH"
  (let ((link (elfeed-entry-link elfeed-show-entry)))
    (when link
      (if (string-match-p ".*youtube\.com.*watch.*" link)
          ;; This is a YouTube video, open it with mpv
          (progn
            (require 'ytplay)
            (ytplay link))
        (apply orig-fun args)))))

(advice-add 'elfeed-show-visit :around #'my/elfeed-filter-youtube-videos)
#+end_src

A future improvement to be made is to let the user chose the
resolution of the video before it is launched. I may not always have
the best internet connection, and viewing 4K videos on a 1080p display
is not something very useful.
*** elfeed-org
Last but not least, my Elfeed configuration is stored in an org file
thanks to ~elfeed-org~.
#+begin_src emacs-lisp
(use-package elfeed-org
  :after elfeed
  :straight t
  :init
  (elfeed-org)
  :config
  (setq rmh-elfeed-org-files (list (concat org-directory "elfeed.org.gpg"))))
#+end_src
*** elfeed-tube
#+begin_src emacs-lisp
(use-package elfeed-tube
  :straight t
  :after elfeed
  :config
  (elfeed-tube-setup)
  :bind (:map elfeed-show-mode-map
              ("C-c C-x m" . #'dorneanu/elfeed-play-with-mpv)
              ("C-c C-x f" . elfeed-tube-fetch)
              ([remap save-buffer] . elfeed-tube-save)
              :map elfeed-search-mode-map
              ("C-c C-x m" . #'dorneanu/elfeed-play-with-mpv)
              ("C-c C-x f" . elfeed-tube-fetch)
              ([remap save-buffer] . elfeed-tube-save)))

;; https://github.com/skeeto/elfeed/issues/267
(defun dorneanu/elfeed-play-with-mpv ()
  "Play entry link with mpv."
  (interactive)
  (let ((entry (if (eq major-mode 'elfeed-show-mode) elfeed-show-entry (elfeed-search-selected :single)))
        (quality-arg "")
        (quality-val (completing-read "Max height resolution (0 for unlimited): " '("0" "480" "720" "1080") nil nil)))
    (setq quality-val (string-to-number quality-val))
    (message "Opening %s with height≤%s with mpv..." (elfeed-entry-link entry) quality-val)
    (when (< 0 quality-val)
      (setq quality-arg (format "--ytdl-format=[height<=?%s]" quality-val)))
    (start-process "elfeed-mpv" nil "mpv" quality-arg (elfeed-entry-link entry))))

;; A more genric function
(defun dorneanu/play-video-with-mpv (url)
  "Play a video URL with mpv."
  (interactive "sEnter video URL: ")
  (let ((quality-arg "")
        (quality-val (completing-read "Max height resolution (0 for unlimited): " '("0" "480" "720" "1080") nil nil)))
    (setq quality-val (string-to-number quality-val))
    (message "Opening %s with height≤%s with mpv..." url quality-val)
    (when (< 0 quality-val)
      (setq quality-arg (format "--ytdl-format=[height<=?%s]" quality-val)))
    (start-process "elfeed-mpv" nil "mpv" quality-arg url)))
#+end_src

*** functions
#+begin_src emacs-lisp
(defun dorneanu/elfeed-search-browse-url-xwidget (&optional use-generic-p)
  "open with xwidget"
  (interactive "P")
  ;; Split window and focus there
  (split-window-right)
  (balance-windows)
  (other-window 1)
  (let ((browse-url-browser-function #'xwidget-webkit-browse-url))
    (elfeed-search-browse-url use-generic-p)))

(defun elfeed/elfeed-show-visit-eww ()
  "Visit the current entry in EWW."
  (interactive)
  (let ((browse-url-browser-function 'eww-browse-url))
    (elfeed-show-visit)))
#+end_src
** reddigg
Use reddigg to show reddit threads.

#+begin_src emacs-lisp
(use-package reddigg
  :straight t
  :after (elfeed))
  
(defun my/elfeed-reddit-show-comments (&optional link)
  (interactive)
  (require 'reddigg)
  (let* ((entry (if (eq major-mode 'elfeed-show-mode)
                    elfeed-show-entry
                  (elfeed-search-selected :ignore-region)))
         (link (if link link (elfeed-entry-link entry))))
    (reddigg-view-comments link)))
    
(defun my/org-buffer-to-epub ()
  "Convert current org-mode buffer to epub"
  (interactive)
  (unless (derived-mode-p 'org-mode)
    (user-error "Current buffer is not in org-mode"))
  
  (let* ((buffer-content (buffer-string))
         (title (my/extract-org-title buffer-content))
         (clean-filename (my/sanitize-filename title))
         (dated-filename (format "%s_%s" 
                                 (format-time-string "%Y-%m-%d") 
                                 clean-filename))
         (temp-org (make-temp-file "org-export" nil ".org"))
         (epub-file (expand-file-name 
                     (concat dated-filename ".epub")  ; Make sure .epub is only added once
                     "~/Dropbox/Ebooks/")))
    
    (message "Title: '%s'" title)
    (message "Creating: %s" epub-file)  ; Show full path for debugging
    
    (with-temp-file temp-org
      (insert buffer-content))
    
    (make-directory (file-name-directory epub-file) t)
    
    ;; Properly escape the title and file paths
    (let ((escaped-title (shell-quote-argument title))
          (escaped-epub-file (shell-quote-argument epub-file))
          (escaped-temp-org (shell-quote-argument temp-org)))
      
      (shell-command 
       (format "pandoc -f org -t epub3 --metadata title=%s -o %s %s"
               escaped-title escaped-epub-file escaped-temp-org)))
    
    (delete-file temp-org)
    (message "Created epub: %s" (file-name-nondirectory epub-file))))

;; Convert an ORG mode buffer to epub
(defun my/org-buffer-to-epub ()
  "Convert current org-mode buffer to epub"
  (interactive)
  (unless (derived-mode-p 'org-mode)
    (user-error "Current buffer is not in org-mode"))
  
  (let* ((buffer-content (buffer-string))
         (title (my/extract-org-title buffer-content))
         (clean-filename (my/sanitize-filename title))
         (dated-filename (format "%s_%s" 
                                 (format-time-string "%Y-%m-%d") 
                                 clean-filename))
         (temp-org (make-temp-file "org-export" nil ".org"))
         (epub-file (expand-file-name 
                     (concat dated-filename ".epub")
                     "~/Dropbox/Ebooks/")))
    
    (message "Title: '%s'" title)
    (message "Creating: %s.epub" epub-file)
    
    (with-temp-file temp-org
      (insert buffer-content))
    
    (make-directory (file-name-directory epub-file) t)
    
    (shell-command 
     (format "pandoc -f org -t epub3 --metadata title='%s' -o '%s' '%s'"
             title epub-file temp-org))
    
    (delete-file temp-org)
    (message "Created epub: %s" (file-name-nondirectory epub-file))))

(defun my/extract-org-title (content)
  "Extract title from #+title: property in org content"
  (if (string-match "^#\\+title:\\s-*\\(.+\\)$" content)
      (string-trim (match-string 1 content))
    (format "Untitled-%s" (format-time-string "%H%M"))))


(defun my/reddigg-to-epub-with-threading ()
  "Convert reddigg buffer to epub preserving comment threading - fixed version"
  (interactive)
  (unless (derived-mode-p 'org-mode)
    (user-error "Current buffer is not in org-mode"))
  
  (let* ((buffer-content (buffer-substring-no-properties (point-min) (point-max))) ; Strip properties
         (processed-content (my/reddit-hierarchy-to-clear-format-spaced buffer-content))
         (title (my/extract-org-title buffer-content))
         (clean-filename (my/sanitize-filename title))
         (dated-filename (format "%s_%s" 
                                (format-time-string "%Y-%m-%d") 
                                clean-filename))
         (temp-org (make-temp-file "reddit-thread" nil ".org"))
         (epub-file (expand-file-name 
                    (concat dated-filename ".epub")
                    "~/Dropbox/Ebooks/")))
    
    (message "Processing Reddit thread...")
    (message "Title: '%s'" title)
    
    (with-temp-file temp-org
      (insert processed-content))
    
    (make-directory (file-name-directory epub-file) t)
    
    (let ((escaped-title (shell-quote-argument title))
          (escaped-epub-file (shell-quote-argument epub-file))
          (escaped-temp-org (shell-quote-argument temp-org)))
      
      (shell-command 
       (format "pandoc -f org -t epub3 --metadata title=%s -o %s %s"
               escaped-title escaped-epub-file escaped-temp-org)))
    
    (delete-file temp-org)
    (message "Created epub: %s" (file-name-nondirectory epub-file))))
#+end_src

** hnreader
#+begin_src emacs-lisp
(use-package hnreader
  :straight t
  :after (elfeed))
#+end_src

Open in same window

#+begin_src emacs-lisp
(setq hnreader-view-comments-in-same-window nil)
#+end_src

Use hnreader to show HN threads

#+begin_src emacs-lisp
(defun my/elfeed-hn-show-comments (&optional link)
  (interactive)
  (let* ((entry (if (eq major-mode 'elfeed-show-mode)
                    elfeed-show-entry
                  (elfeed-search-selected :ignore-region)))
         (link (if link link (elfeed-entry-link entry)))
         (content (elfeed-deref (elfeed-entry-content entry)))
         ;; Regex to match the Comments URL
         (comments-url (and content
                            (string-match "Comments URL: <a href=\"\\(https://news.ycombinator.com/item\\?id=[0-9]+\\)\">" content)
                            (match-string 1 content))))
    (message comments-url)
    (setq-local hnreader-view-comments-in-same-window nil)
    (hnreader-promise-comment (format "%s" comments-url))))
#+end_src

Use hnread to show HN threads for a URL at point

#+begin_src emacs-lisp
(defun my/elfeed-hn-show-comments-at-point ()
  "Kill the url at point."
  (interactive)
  (setq-local hnreader-view-comments-in-same-window t)
  (hnreader-comment (format "%s" (url-get-url-at-point))))
#+end_src
* Files
** dirvish
#+begin_src emacs-lisp
(use-package dirvish
  :straight t
  :after dired
  :bind (("C-c a d" . dirvish-side)
         :map
         dirvish-mode-map ; Dirvish inherits `dired-mode-map'
         ("a"   . dirvish-quick-access)
         ("f"   . dirvish-file-info-menu)
         ("y"   . dirvish-yank-menu)
         ("N"   . dirvish-narrow)
         ("^"   . dirvish-history-last)
         ("h"   . dirvish-history-jump) ; remapped `describe-mode'
         ("s"   . dirvish-quicksort)    ; remapped `dired-sort-toggle-or-edit'
         ("v"   . dirvish-vc-menu)      ; remapped `dired-view-file'
         ("TAB" . dirvish-subtree-toggle)
         ("M-f" . dirvish-history-go-forward)
         ("M-b" . dirvish-history-go-backward)
         ("M-l" . dirvish-ls-switches-menu)
         ("M-m" . dirvish-mark-menu)
         ("M-t" . dirvish-layout-toggle)
         ("M-s" . dirvish-setup-menu)
         ("M-e" . dirvish-emerge-menu)
         ("M-j" . dirvish-fd-jump))
  :init
  (dirvish-override-dired-mode)
  :custom
  (dirvish-attributes '(subtree-state file-size vc-state))
  (dirvish-quick-access-entries ; It's a custom option, `setq' won't work
   '(("r" "~/work/repos"   "Repos (work)")
     ("b" "~/sync/blog"    "Blog")
     ("m" "/Volumes/MC-101/" "MC-101")))
  :config
  (setq dirvish-side-width 40)
  (setq dired-omit-files "^\\.?#\\|^\\.$\\|^\\.\\.$\\|^\\.")
  (setq dired-omit-mode t)
  ;; (setq dired-listing-switches "-ahlv")
  (setq dired-listing-switches "-l"))
#+end_src
*** timidity (midi)
Play midi files from within dir buffers
#+begin_src emacs-lisp
(defun my/dired-play-midi ()
  "Play MIDI file at point with timidity."
  (interactive)
  (let ((file (dired-get-file-for-visit)))
    (if (string-match-p "\\.mid\\'" file)
        (progn
          (start-process "timidity" nil "timidity" "-Od" file)
          (message "Playing MIDI: %s" (file-name-nondirectory file)))
      (message "Not a MIDI file"))))

(with-eval-after-load 'dired
  (define-key dired-mode-map (kbd "C-c p") #'my/dired-play-midi))

(defun my/kill-timidity ()
  "Kill all running timidity processes."
  (interactive)
  (let ((killed 0))
    (dolist (proc (process-list))
      (when (string-match-p "timidity" (process-name proc))
        (delete-process proc)
        (setq killed (1+ killed))))
    (message "Killed %d timidity process%s" killed (if (= killed 1) "" "es"))))
    
(with-eval-after-load 'dired
  (define-key dired-mode-map (kbd "C-c k") #'my/kill-timidity))
#+end_src
** recentf
#+begin_src emacs-lisp
(use-package recentf
  :custom
  (recentf-max-saved-items 200) ; Increase the maximum number of saved items
  (recentf-case-fold-search t) ; Ignore case when searching recentf files
  (recentf-exclude ; Exclude some files from being remembered by recentf
   `(file-remote-p
     ,(rx (or "/elfeed-db/" "/eln-cache/" "/cache/" "/.maildir/" "/.cache/"))
     ,(rx bol "/tmp/")))
  :bind (("C-c c r" . recentf-open-files))
  :init
  ;; Enable `recentf-mode' to remember recent files
  (recentf-mode 1))
#+end_src
* Autocompletion
** cape
#+begin_src emacs-lisp
(use-package cape
  :straight t
  :defer t
  :commands (cape-dabbrev cape-file cape-elisp-block)
  :bind ("C-c p" . cape-prefix-map)
  :init
  ;; Add to the global default value of `completion-at-point-functions' which is
  ;; used by `completion-at-point'.
  ;; (add-hook 'completion-at-point-functions #'cape-dabbrev)
  (add-hook 'completion-at-point-functions #'cape-file)
  (add-hook 'completion-at-point-functions #'cape-elisp-block))
#+end_src
** corfu
#+begin_src emacs-lisp
(use-package corfu
  :straight t
  :defer t
  :commands (corfu-mode global-corfu-mode)
  :hook ((prog-mode . corfu-mode)
         (shell-mode . corfu-mode)
         (eshell-mode . corfu-mode)
         (lsp-completion-mode . dorneanu/corfu-setup-lsp))
  :custom
  ;; Hide commands in M-x which do not apply to the current mode.
  (read-extended-command-predicate #'command-completion-default-include-p)
  ;; Disable Ispell completion function. As an alternative try `cape-dict'.
  (text-mode-ispell-word-completion nil)
  (tab-always-indent 'complete)
  ;; Only use `corfu' when calling `completion-at-point' or
  ;; `indent-for-tab-command'
  (corfu-auto t)
  (corfu-auto-prefix 2)
  (corfu-auto-delay 0.25)
  (corfu-preselect 'first)
  (corfu-quit-at-boundary nil)
  (corfu-separator ?\s)            ; Use space
  (corfu-quit-no-match 'separator) ; Don't quit if there is `corfu-separator' inserted
  (corfu-preview-current 'insert)        ; Preview first candidate. Insert on input if only one
  (corfu-preselect-first t)        ; Preselect first candidate?
  (lsp-completion-provider :none)       ; Use corfu instead for lsp completion
  (corfu-on-exact-match nil)
  (completion-cycle-threshold nil)      ; Always show completion candidates
  (corfu-insert-at-point t)
  :config

  ;; Modify completion behavior for better Eglot integration
  (defun my/corfu-complete-full ()
    "Insert complete candidate, including any additional text edits."
    (interactive)
    (let ((completion-extra-properties nil))
      (corfu-insert)))

  ;; Setup lsp to use corfu for lsp completion
  (defun dorneanu/corfu-setup-lsp ()
    "Use orderless completion style with lsp-capf instead of the default lsp-passthrough."
    (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
          '(orderless)))

  ;; Free the RET key for less intrusive behavior.
  ;; Option 1: Unbind RET completely
  ;; (keymap-unset corfu-map "RET")
  ;; Option 2: Use RET only in shell modes
  (keymap-set corfu-map "RET" `( menu-item "" nil :filter
                                 ,(lambda (&optional _)
                                    (and (derived-mode-p 'eshell-mode 'comint-mode)
                                         #'corfu-send))))
  ;; Bind TAB to the new completion function
  (define-key corfu-map [tab] #'my/corfu-complete-full)
  (define-key corfu-map (kbd "TAB") #'my/corfu-complete-full)

  ;; Enable Corfu
  (global-corfu-mode))

;; Candidate information popup
(use-package corfu-popupinfo
  :straight (:type built-in)
  :hook (corfu-mode . corfu-popupinfo-mode)
  :bind ( ; Bind these to toggle/scroll documentation
         :map corfu-map
         ("M-p" . corfu-popupinfo-scroll-down)
         ("M-n" . corfu-popupinfo-scroll-up)
         ("M-d" . corfu-popupinfo-toggle))
  :custom
  (corfu-popupinfo-delay nil)
  (corfu-popupinfo-max-height 15))

;; Corfu popup on terminal
(use-package corfu-terminal
  :straight t
  :hook (corfu-mode . corfu-terminal-mode))

;; Icons for Corfu using `nerd-icons'
(use-package nerd-icons-corfu
  :straight t
  :after corfu
  :init
  (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))
#+end_src
* Applications
** AI
*** mcp.el
#+begin_src emacs-lisp
(use-package mcp
  :straight t
  :after gptel
  :custom (mcp-hub-servers
           `(("filesystem" . (:command "npx" :args ("-y" "@modelcontextprotocol/server-filesystem" "~/repos/")))))
  :config (require 'mcp-hub))
#+end_src
*** gptel
#+begin_src emacs-lisp
(use-package gptel
  :straight t
  :commands (gptel gptel-send)
  :bind (("M-g '" . #'gptel)
         ("M-g :" . #'gptel-rewrite)
         ("M-g K" . #'gptel-abort)
         ("M-g ö" . #'gptel-send))
  :custom
  (gptel-default-mode 'org-mode)
  ;; (gptel-model "gpt-4")
  :config
  ;; ChatGPT
  ;;(setq gptel-api-key (password-store-get "emacs/chatgpt"))
  ;; Anthropic / Claude 3
  (gptel-make-anthropic "Claude-thinking" ;Any name you want
  :key (password-store-get "emacs/anthropic-claude3")
  :stream t
  :models '(claude-sonnet-4-20250514 claude-3-7-sonnet-20250219)
  :request-params '(:thinking (:type "enabled" :budget_tokens 2048)
                    :max_tokens 4096))

  ;; Required for mcp integration
  (require 'gptel-integrations)
  (setq mcp-hub-servers nil)
  (setq mcp-hub-servers '(("filesystem" :command "npx" :args ("-y" "@modelcontextprotocol/server-filesystem" "/Users/I748851/repos/" "/Volumes/MC-101/ROLAND"))
                          ("shell" :command "npx" :args ("mcp-shell"))
                          ("sequential-thinking" :command "npx" :args ("-y" "@modelcontextprotocol/server-sequential-thinking"))))
  
  ;; Enable expert commands
  (setq gptel-expert-commands t)

  ;; auto-scrolling
  (add-hook 'gptel-post-stream-hook 'gptel-auto-scroll)

  ;; Add system messages
  (add-to-list 'gptel-directives
               '(gopher . "You are an AI Golang programming consultant, with deep expertise in the language's syntax, standard library, best practices, and ecosystem. Your role is to provide comprehensive guidance and support to users who are learning, developing, or optimizing their Golang projects. When interacting with the user, demonstrate an encyclopedic knowledge of the Go programming language. Be prepared to explain core language features, such as its type system, concurrency primitives, and dependency management, in clear, easy-to-understand terms. Suggest idiomatic solutions to common Golang programming challenges, drawing upon your familiarity with design patterns, performance optimization techniques, and the latest language developments. In addition to explaining language fundamentals, offer advice on setting up a productive Golang development environment, integrating with popular third-party libraries and frameworks, and implementing effective testing and deployment strategies. Anticipate the user's needs and proactively suggest ways they can write more robust, scalable, and maintainable Go code. Maintain a patient, consultative tone throughout your interactions. Your goal is to empower the user to become self-sufficient in writing high-quality Go software, while also being available to provide expert-level troubleshooting and code review support when needed. Engage the user in a collaborative, educational manner, encouraging them to think critically about their design decisions and explore alternative approaches. Above all, demonstrate a genuine passion for the Go programming language and its vibrant, growing ecosystem. Inspire the user to share your enthusiasm for Golang's unique features and the powerful applications they can build with it"))
  (add-to-list 'gptel-directives
             '(emacs . "You are an AI Emacs productivity guru, with extensive knowledge of the editor's myriad features, customization capabilities, and powerful ecosystem of packages and plugins. Your role is to serve as a trusted guide, helping the user unlock the full potential of Emacs and become a true power user. When interacting with the user, demonstrate your mastery of Emacs by providing detailed explanations of core concepts, advanced workflows, and cutting-edge customization techniques. Tailor your guidance to the user's current skill level, whether they are a newcomer looking to get started or a seasoned Emacs veteran seeking to optimize their setup. Anticipate the user's needs and proactively suggest ways they can leverage Emacs to boost their productivity, automate repetitive tasks, and streamline their development/writing/research processes. When the user presents a challenge or goal, leverage your deep understanding of Emacs to propose elegant, customized solutions. Maintain an enthusiastic, knowledgeable, and patient tone throughout your interactions. Your goal is to empower the user to become self-sufficient in navigating and customizing Emacs, while also being available to provide expert-level advice and troubleshooting support when needed.. Please use chain of thought."))
  (add-to-list 'gptel-directives
               '(writing . "You are an AI writing assistant tasked with helping me structure and compose blog posts on topics I already have in mind. You are familiar with the tone, style, and voice I have established in my previous blog posts, and your goal is to seamlessly continue that consistent brand voice.

When I provide you with the high-level topic and overall direction for a new blog post, your first step is to <STRUCTURE_PLANNING>:

- Propose a logical structure for the post, including key sections and their purpose. For example: Introduction, Background, Core Argument, Counterpoints, Conclusion.
- For each section, provide a brief description of the type of content that should be included, and the overall flow you recommend.
- Suggest appropriate subheadings that capture the essence of each section.
- Estimate the ideal word count range for the full post and each section.
- Review the plan with me, gather any clarifications or adjustments, and finalize the structure.

Once the structure is approved, you will then <CONTENT_GENERATION>:

- For each section, provide a bulleted list of key points, facts, or ideas that should be covered.
- Review the tone, language, and writing style used in my previous blog posts, and craft sample sentences for each bullet point that align with that established brand voice.
- Aim to strike a balance between providing directive guidance (sample sentences) and leaving room for me to personalize the content in my own words.
- Ensure the overall content flows logically from one section to the next, with smooth transitions.
- Review the full draft with me, gather feedback, and refine as needed.

Throughout the process, please <THINKING>:

- Analyze the topic and my goals for the blog post to ensure the structure and content are well-aligned.
- Consider potential counterarguments or alternative perspectives that should be addressed.
- Identify opportunities to incorporate relevant data, examples, or expert insights to strengthen the post.
- Flag any areas where additional research or fact-checking may be required.
- Maintain a collaborative, supportive tone, and position yourself as a writing partner rather than simply a content generator.

Most importantly, your outputs should reflect the same quality, tone, and brand voice as my previous successful blog posts. Your role is to elevate the post's structure and writing, not to drastically alter its character. Please let me know if you need any clarification or have additional suggestions to improve this system prompt."))
  ;; ollama
  (gptel-make-ollama "Ollama"
    :host "localhost:11434"
    :stream t
    :models '("llama3" "deepseek-r1" "deepseek-coder-v2"))

  ;; gemini
  (gptel-make-gemini "Gemini" :key (password-store-get "emacs/gemini-api") :stream t)

  ;; openweb-ui
  (gptel-make-openai "OpenWebUI"
    :protocol "http"
    :host "localhost:3000"  ; Replace with your OpenWebUI host/port
    :endpoint "/api/chat/completions"
    :stream t
    :key "sk-db1bc3d539f14d6eb84bab26fd83b2f1"
    :models '("sap_ai_core.gemini-2.5-pro" "sap_ai_core.anthropic--claude-4-sonnet")
    :request-params '(:parallel_tool_calls t))
  
  ;; OPTIONAL configuration
  (setq gptel-backend (gptel-make-ollama "Ollama"
                        :host "localhost:11434"
                        :stream t
                        :models '("llama3" "huggingface.co/unsloth/Qwen3-30B-A3B-GGUF:latest" "qwen3:14b" "qwen3:8b" "qwen2.5:14b" "deepseek-r1" "deepseek-v2" "incept5/llama3.1-claude" "deepseek-coder-v2"))))
  ;; (setq gptel-backend (gptel-make-openai "OpenWebUI"
  ;;                       :protocol "http"
  ;;                       :host "localhost:3000"
  ;;                       :endpoint "/api/chat/completions"
  ;;                       :stream t
  ;;                       :key "sk-db1bc3d539f14d6eb84bab26fd83b2f1"
  ;;                       :models '("sap_ai_core.gemini-2.5-pro" 
  ;;                                "sap_ai_core.anthropic--claude-4-sonnet"))))
;; GPTEL-model "deepseek-v3"))
#+end_src
*** ellama
#+begin_src emacs-lisp
(use-package ellama
  :straight t
  :bind ("C-c x" . ellama-transient-main-menu)
  :init
  ;; setup key bindings
  ;; (setopt ellama-keymap-prefix "C-c x")
  ;; language you want ellama to translate to
  (setopt ellama-language "English")
  (setopt ellama-auto-scroll t)
  (require 'llm-ollama)
  (setopt ellama-provider
  	  (make-llm-ollama
  	   ;; this model should be pulled to use it
  	   ;; value should be the same as you print in terminal during pull
  	   :chat-model "llama3:8b"
  	   :embedding-model "nomic-embed-text"
  	   :default-chat-non-standard-params '(("num_ctx" . 8192))))
  (setopt ellama-summarization-provider
  	  (make-llm-ollama
  	   :chat-model "qwen2.5:3b"
  	   :embedding-model "nomic-embed-text"
  	   :default-chat-non-standard-params '(("num_ctx" . 32768))))
  (setopt ellama-coding-provider
  	  (make-llm-ollama
  	   :chat-model "qwen2.5-coder:7b"
  	   :embedding-model "nomic-embed-text"
  	   :default-chat-non-standard-params '(("num_ctx" . 32768))))
  (setopt ellama-translation-provider
  	  (make-llm-ollama
  	   :chat-model "qwen2.5:3b"
  	   :embedding-model "nomic-embed-text"
  	   :default-chat-non-standard-params
  	   '(("num_ctx" . 32768))))
  (setopt ellama-extraction-provider (make-llm-ollama
  				      :chat-model "qwen2.5-coder:7b"
  				      :embedding-model "nomic-embed-text"
  				      :default-chat-non-standard-params
  				      '(("num_ctx" . 32768))))
  :config
  ;; send last message in chat buffer with C-c C-c
  (add-hook 'org-ctrl-c-ctrl-c-hook #'ellama-chat-send-last-message))
#+end_src
** Web
*** eww
#+begin_src emacs-lisp
(use-package eww
  :commands eww eww-follow-link
  :bind (("C-c e ." . eww)
         ("C-c e o" . eww-open-in-new-buffer)
         ("C-c e i" . eww-wiki)
         ("C-c e l" . eww-follow-link))
  :init
  ;; (setq browse-url-browser-function 'eww-browse-url)
  ;; (setq browse-url-browser-function 'browse-url-chrome)
  (setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "open"
      browse-url-generic-args '("-a" "Google Chrome"))
  (setq eww-search-prefix "http://www.google.com/search?q=")

  (defun eww-wiki (text)
    "Function used to search wikipedia for the given text."
    (interactive (list (read-string "Wiki for: ")))
    (eww (format "https://en.m.wikipedia.org/wiki/Special:Search?search=%s"
                 (url-encode-url text))))

  :config
  (add-hook 'eww-mode 'ace-link-mode))
#+end_src
** Browser
*** atomic-chrome
#+begin_src emacs-lisp
(use-package atomic-chrome
  :defer t
  :commands (atomic-chome)
  :straight (atomic-chrome
             :repo "KarimAziev/atomic-chrome"
             :type git
             :host github)
  :commands (atomic-chrome-start-server)
  :config
  (setq-default atomic-chrome-extension-type-list '(atomic-chrome))
  (setq-default atomic-chrome-buffer-open-style 'split)
  (setq-default atomic-chrome-auto-remove-file t)
  (setq-default atomic-chrome-url-major-mode-alist
                '(("claude.ai" . text-mode)
                  ("github.com" . gfm-mode)
                  ("gitlab.com" . gfm-mode)
                  ("leetcode.com" . typescript-ts-mode)
                  ("codi.eu-nl-1.cloud.sap" . gfm-mode)
                  ("codesandbox.io" . js-ts-mode)
                  ("typescriptlang.org" . typescript-ts-mode)
                  ("jsfiddle.net" . js-ts-mode)
                  ("w3schools.com" . js-ts-mode)))
  (atomic-chrome-start-server))
#+end_src
** Reading
*** nov.el (epub)
#+begin_src emacs-lisp
(use-package nov
    :straight t
    :defer t
    :mode ("\\.epub\\'" . nov-mode)
    :config
    (setq nov-text-width 95))
#+end_src
* Useful
** exec-path-from-shell
#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :straight t
  :if (memq window-system '(mac ns x))
  :config
  (exec-path-from-shell-initialize))
#+end_src
** crux
Various useful utilities

#+begin_src emacs-lisp
(use-package crux
  :straight t
  :bind (("C-x C-d" . crux-duplicate-current-line-or-region)
         ("C-c u" . crux-view-url)
         ("C-c f r" . crux-rename-buffer-and-file)
         ("C-c f d" . crux-delete-file-and-buffer)
         ("C-x C-b" . create-scratch-buffer)
         ("s-k"   . crux-kill-whole-line)
         ;;("s-o"   . crux-smart-open-line-above)
         ("C-a"   . crux-move-beginning-of-line)
         ("C-k"   . crux-kill-whole-line)
         ([(shift return)] . crux-smart-open-line)
         ([(control shift return)] . crux-smart-open-line-above))
  :config
  ;; No need to create a new scratch buffer every time
  ;; Just use one.
  (defun create-scratch-buffer ()
    "Create a scratch buffer."
    (interactive)
    (switch-to-buffer (get-buffer-create "*scratch*"))
    (lisp-interaction-mode))

  (crux-with-region-or-buffer indent-region)
  (crux-with-region-or-buffer untabify)
  (crux-with-region-or-point-to-eol kill-ring-save)
  (defalias 'rename-file-and-buffer #'crux-rename-file-and-buffer))
#+end_src
** link-hint
#+begin_src emacs-lisp
(use-package link-hint
  :straight t
  :demand t
  :bind (("C-c l o" . link-hint-open-link)
         ("C-c l c" . link-hint-copy-link)))
#+end_src
** leo
#+begin_src emacs-lisp
(use-package leo
  :straight t
  :defer t
  :bind (("M-g .l" . leo-translate-word)))
#+end_src
** helpful
#+BEGIN_SRC emacs-lisp
;; From https://github.com/dakra/dmacs/blob/nil/init.org#L2056
(use-package helpful
  :straight t
  :bind (("C-h ." . helpful-at-point)
         ("C-h f" . helpful-callable)
         ("C-h v" . helpful-variable)
         ("C-h f" . helpful-function)
         ("C-h s" . describe-symbol)
         ("C-h k" . helpful-key)
         ;; ("C-c h f" . helpful-callable)
         ;; ("C-c h v" . helpful-variable)
         ;; ("C-c h c" . helpful-command)
         ;; ("C-c h m" . helpful-macro)
         ("<C-tab>" . backward-button)
         :map helpful-mode-map
         ("M-?" . helpful-at-point)
         ("RET" . helpful-jump-to-org)
         :map emacs-lisp-mode-map
         ("M-?" . helpful-at-point)
         :map lisp-interaction-mode-map  ; Scratch buffer
         ("M-?" . helpful-at-point))
  :config
  (defun helpful-visit-reference ()
    "Go to the reference at point."
    (interactive)
    (let* ((sym helpful--sym)
           (path (get-text-property (point) 'helpful-path))
           (pos (get-text-property (point) 'helpful-pos))
           (pos-is-start (get-text-property (point) 'helpful-pos-is-start)))
      (when (and path pos)
        ;; If we're looking at a source excerpt, calculate the offset of
        ;; point, so we don't just go the start of the excerpt.
        (when pos-is-start
          (save-excursion
            (let ((offset 0))
              (while (and
                      (get-text-property (point) 'helpful-pos)
                      (not (eobp)))
                (backward-char 1)
                (setq offset (1+ offset)))
              ;; On the last iteration we moved outside the source
              ;; excerpt, so we overcounted by one character.
              (setq offset (1- offset))

              ;; Set POS so we go to exactly the place in the source
              ;; code where point was in the helpful excerpt.
              (setq pos (+ pos offset)))))

        (find-file path)
        (when (or (< pos (point-min))
                  (> pos (point-max)))
          (widen))
        (goto-char pos)
        (recenter 0)
        (save-excursion
          (let ((defun-end (scan-sexps (point) 1)))
            (while (re-search-forward
                    (rx-to-string `(seq symbol-start ,(symbol-name sym) symbol-end))
                    defun-end t)
              (helpful--flash-region (match-beginning 0) (match-end 0)))))
        t))))
#+END_SRC

** dict.cc
#+begin_src emacs-lisp
(use-package dictcc
  :straight t
  :defer t
  :init
  :bind (("M-g .d" . dictcc)))
#+end_src
** password-store
#+begin_src emacs-lisp
(use-package password-store
  :straight t)
(use-package pass
  :straight t)
#+end_src
** Custom Elisp
*** reload dotemacs config
#+begin_src emacs-lisp
(defun dorneanu/reload-dotemacs ()
  "Reload Emacs configuration."
  (interactive)
  (load-file (expand-file-name "init.el" user-emacs-directory)))
#+end_src
*** change font size
Change default font size
#+begin_src emacs-lisp
(defun dorneanu/set-font-size (size)
  "Set the font size to SIZE, specified in tenths of a point."
  (interactive "nEnter the font size: ")
  (set-face-attribute 'default nil :height size))
#+end_src
*** reload directory variables
#+begin_src emacs-lisp
(defun dorneanu/reload-dir-locals ()
  "Reload directory local variables for the current buffer."
  (interactive)
  (let ((enable-local-variables :all))
    (hack-dir-local-variables-non-file-buffer)
    (hack-local-variables)
    (message "Directory local variables reloaded for %s"
             (buffer-name))))
#+end_src
* Navigation
** avy
#+BEGIN_SRC emacs-lisp
(use-package avy
  :demand t
  :bind (("C-x j c" . avy-goto-char)
         ("C-x j w" . avy-goto-word-1)
         ("C-x j l" . avy-goto-line))
  :config
  (setq avy-all-windows nil
        avy-all-windows-alt t
        avy-background t
        avy-style 'pre))
#+END_SRC
** ace-window
#+begin_src emacs-lisp
;; Quickly switch windows in Emacs
(use-package ace-window
  :straight t
  :bind (("M-o" . ace-window))
  :custom
  (aw-dispatch-always t))
#+end_src
** ibuffer
#+begin_src emacs-lisp
(use-package ibuffer
  :defer t
  :commands (ibuffer)
  :custom
  (ibuffer-default-display-maybe-show-predicates t)
  (ibuffer-saved-filter-groups
      '(("Default"
         ("Programming" (mode . prog-mode))
         ("Org" (mode . org-mode))
         ("Magit" (name . "^magit"))
         ("Dired" (mode . dired-mode))
         ("Help" (or (name . "^\\*Help\\*")
                     (name . "^\\*Apropos\\*")
                     (name . "^\\*info\\*"))))))
  :init
  (add-hook 'ibuffer-mode-hook
            #'(lambda ()
                (ibuffer-switch-to-saved-filter-groups "default"))))

#+end_src
*** ibuffer-projectile
#+begin_src emacs-lisp
(use-package ibuffer-projectile
  :straight t
  :config
  (add-hook 'ibuffer-hook
            (lambda ()
              (ibuffer-projectile-set-filter-groups)
              (unless (eq ibuffer-sorting-mode 'alphabetic)
                (ibuffer-do-sort-by-alphabetic)))))
#+end_src
*** COMMENT all-the-icons-ibuffer
#+begin_src emacs-lisp
(use-package all-the-icons-ibuffer
  :straight t
  :after (ibuffer)
  :init
  (all-the-icons-ibuffer-mode 1))
#+end_src
** imenu
#+begin_src emacs-lisp
(use-package imenu
  :defer t
  :config
  ;; Mark imenu-generic-expression as safe for dir local usage
  (put 'imenu-generic-expression 'safe-local-variable 'listp)

  ;; Recenter window after imenu jump so cursor doesn't end up on the last line
  (add-hook 'imenu-after-jump-hook 'recenter)  ; or 'reposition-window
  (set-default 'imenu-auto-rescan t))

(use-package imenu-anywhere
  :straight t
  :bind (("M-I" . ivy-imenu-anywhere)
         ("C-c i" . ivy-imenu-anywhere)))
#+end_src
** imenu-list
#+begin_src emacs-lisp
(use-package inenu-list
  :straight (imenu-list :type git :host github :repo "bmag/imenu-list")
  :defer t)
#+end_src
** popper
Used for popups (eshell, scratch buffer etc.)
#+begin_src emacs-lisp
(use-package popper
  :straight t
  :bind (("C-#"   . popper-toggle)
         ("M-#"   . popper-cycle)
         ("C-M-#" . popper-toggle-type))
  :init
  (setq popper-reference-buffers
        '("\\*Messages\\*"
          "Output\\*$"
          "\\*Async Shell Command\\*"
          help-mode
          compilation-mode))
  (popper-mode +1)
  (popper-echo-mode +1))                ; For echo area hints
#+end_src
* Editing
** Modal
*** meow
#+begin_src emacs-lisp
(defun meow-setup ()
  (interactive)
  (require 'meow)
  (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
  (meow-motion-overwrite-define-key
   '("j" . meow-next)
   '("k" . meow-prev)
   '("<escape>" . ignore))
  (meow-leader-define-key
   ;; SPC j/k will run the original command in MOTION state.
   '("j" . "H-j")
   '("k" . "H-k")
   ;; Use SPC (0-9) for digit arguments.
   '("1" . awesome-tab-backward-tab)
   '("2" . awesome-tab-forward-tab)
   '("3" . crux-switch-to-previous-buffer)
   '("4" . awesome-tab-ace-jump)
   '("5" . meow-digit-argument)
   '("6" . meow-digit-argument)
   '("7" . meow-digit-argument)
   '("8" . meow-digit-argument)
   '("9" . tab-switch)
   '("0" . tab-bar-switch-to-recent-tab)
   '("/" . meow-keypad-describe-key)
   '("bi" . ibuffer)
   '("om" . magit)
   '("?" . meow-cheatsheet))
  (meow-normal-define-key
   '("0" . meow-expand-0)
   '("9" . meow-expand-9)
   '("8" . meow-expand-8)
   '("7" . meow-expand-7)
   '("6" . meow-expand-6)
   '("5" . meow-expand-5)
   '("4" . meow-expand-4)
   '("3" . meow-expand-3)
   '("2" . meow-expand-2)
   '("1" . meow-expand-1)
   '("-" . negative-argument)
   '(";" . meow-reverse)
   '("," . meow-inner-of-thing)
   '("." . meow-bounds-of-thing)
   '("[" . meow-beginning-of-thing)
   '("]" . meow-end-of-thing)
   '("a" . meow-append)
   '("A" . meow-open-below)
   '("ä" . meow-kill-whole-line)
   '("b" . meow-back-word)
   '("B" . meow-back-symbol)
   '("c" . meow-change)
   '("d" . meow-delete)
   '("D" . meow-backward-delete)
   '("e" . meow-next-word)
   '("E" . meow-next-symbol)
   '("f" . meow-find)
   '("g" . meow-cancel-selection)
   '("G" . meow-grab)
   '("h" . meow-left)
   '("H" . meow-left-expand)
   '("i" . meow-insert)
   '("I" . meow-open-above)
   '("j" . meow-next)
   '("J" . meow-next-expand)
   '("k" . meow-prev)
   '("K" . meow-prev-expand)
   '("l" . meow-right)
   '("L" . meow-right-expand)
   '("m" . meow-join)
   '("n" . meow-search)
   '("o" . meow-block)
   ;; '("O" . meow-to-block)
   '("p" . meow-yank)
   '("q" . meow-quit)
   '("Q" . meow-goto-line)
   '("r" . meow-replace)
   '("R" . meow-swap-grab)
   '("s" . meow-kill)
   '("t" . meow-till)
   '("u" . meow-undo)
   '("U" . meow-undo-in-selection)
   '("v" . meow-visit)
   '("w" . meow-mark-word)
   '("W" . meow-mark-symbol)
   '("x" . meow-line)
   '("X" . meow-goto-line)
   '("y" . meow-save)
   '("Y" . meow-sync-grab)
   '("z" . meow-pop-selection)
   '("Z" . dorneanu/wrap-region-with-char)
   '("(" . meow-wrap-round)
   '("{" . meow-wrap-curly)
   '("[" . meow-wrap-square)
   '("'" . meow-wrap-string)))

(use-package meow
  :straight t
  :demand t
  :config
  (meow-setup)
  (meow-global-mode 1))

;; Additional functions
(defun dorneanu/wrap-region-with-char (char)
  "Wrap the selected region with the specified character."
  (interactive "cEnter character: ")
  (when (region-active-p)
    (let ((beg (region-beginning))
          (end (region-end)))
      (goto-char end)
      (insert char)
      (goto-char beg)
      (insert char))))
#+end_src

*** meow for org
#+begin_src emacs-lisp
;; From https://aatmunbaxi.netlify.app/comp/meow_state_org_speed/
(setq meow-org-motion-keymap (make-keymap))
(meow-define-state org-motion
  "Org-mode structural motion"
  :lighter "[O]"
  :keymap meow-org-motion-keymap)

(meow-define-keys 'org-motion
  '("<escape>" . meow-normal-mode)
  '("i" . meow-insert-mode)
  '("g" . meow-normal-mode)
  '("u" .  meow-undo)
  ;; Moving between headlines
  '("k" .  (lambda () (interactive) (org-previous-visible-heading 1) (pulsar-recenter-center)))
  '("j" .  (lambda () (interactive) (org-next-visible-heading 1) (pulsar-recenter-center)))
  ;; Moving between headings at the same level
  '("p" .  (lambda () (interactive) (org-backward-heading-same-level 1) (pulsar-recenter-center)))
  '("n" .  (lambda () (interactive) (org-forward-heading-same-level 1) (pulsar-recenter-center)))
  ;; Moving subtrees themselves
  '("K" .  org-move-subtree-up)
  '("J" .  org-move-subtree-down)
  ;; Navigating paragraphs
  '("0" .  forward-paragraph)
  '("9" .  backward-paragraph)
  ;; Subtree de/promotion
  '("L" .  org-demote-subtree)
  '("H" .  org-promote-subtree)
  ;; Completion-style search of headings
  '("v" .  consult-org-heading)
  ;; Setting subtree metadata
  '("l" .  org-set-property)
  '("t" .  org-todo)
  '("d" .  org-deadline)
  '("s" .  org-schedule)
  '("e" .  org-set-effort)
  ;; Refiling
  '("rv" .  +org/refile-to-visible)
  '("rf" .  +org/refile-to-current-file)
  '("rr" .  org-refile)
  ;; Block navigation
  '("b" .  org-previous-block)
  '("f" .  org-next-block)
  ;; Narrowing/widening
  '("N" .  org-narrow-to-subtree)
  '("W" .  widen))

(meow-define-keys 'normal
  '("O" . meow-org-motion-mode))
#+end_src

** olivetti
#+begin_src emacs-lisp
(use-package olivetti
  :straight t
  :commands (olivetti-mode)
  :custom
  (olivetti-body-width 0.95))
#+end_src
** multiple-cursors
#+begin_src emacs-lisp
(use-package multiple-cursors
  :straight t
  :hook ((multiple-cursors-mode-enabled-hook . (lambda() (corfu-mode -1)))
         (multiple-cursors-mode-disabled-hook . (lambda () (corfu-mode 1))))
  :bind
  (:map prog-mode-map
        ("C-c m l" . mc/edit-lines)
        ("C-c m b" . mc/edit-beginnings-of-lines)
        ("C-c m e" . mc/edit-ends-of-lines)
        ("C-c m a" . mc/mark-all-dwim)
        ("C-c m s" . mc/mark-all-symbols-like-this)
        ("C-c m h" . multiple-cursors-hydra/body)
        ("C-c m w" . mc/mark-all-words-like-this)
        ("C-c m r" . mc/mark-all-in-region)
        ("C-c m R" . mc/mark-all-in-region-regexp)
        ("C-c m d" . mc/mark-all-like-this-in-defun)
        ("C-c m S" . mc/mark-all-symbols-like-this-in-defun)
        ("C-c m W" . mc/mark-all-words-like-this-in-defun)
        ("C-c m i" . mc/insert-numbers)
        ("C-c m n" . mc/mark-next-like-this)
        ("C-c m p" . mc/mark-previous-like-this)
        ("C-c m N" . mc/skip-to-next-like-this)
        ("C-c m P" . mc/skip-to-previous-like-this)
        ("C-c m M-n" . mc/unmark-next-like-this)
        ("C-c m M-p" . mc/unmark-previous-like-this)
        ("s-<mouse-1>"   . mc/add-cursor-on-click)
        ("C-S-<mouse-1>" . mc/add-cursor-on-click)))
#+end_src
** Kill ring
*** easy-kill
#+begin_src emacs-lisp
;; Kill & Mark things easily
(use-package easy-kill
  :straight t
  :bind (([remap kill-ring-save] . easy-kill)
         ([remap mark-sexp] . easy-mark)))
#+end_src
** Search/Replace
*** isearch
#+begin_src emacs-lisp
(use-package isearch
  :straight (:type built-in)
  :custom
  (isearch-lazy-count t) ; Show the match count (need a non-nil `isearch-lazy-highlight')
  (search-ring-max 200) ; 16 is too little
  (regexp-search-ring-max 200)
  :bind (;; Swap `isearch-*' with `isearch-*-regexp' to use regexp based search by default
         ("C-s" . isearch-forward-regexp)
         ("C-r" . isearch-backward-regexp)
         ("C-M-s" . isearch-forward)
         ("C-M-r" . isearch-backward)
         :map isearch-mode-map
         ("<up>" . isearch-ring-retreat)
         ("<down>" . isearch-ring-advance)
         ("C-e" . isearch-edit-string)
         ("M-i" . +insert-thing-at-point)))
#+end_src
*** swiper
Extended ~isearch~
#+begin_src emacs-lisp
(use-package swiper
  :straight t
  :defer t
  :bind (("M-g s s" . swiper)
         ("M-g s ."   . swiper-all-thing-at-point))
  :config
  ;; Recenter afer jump
  (setq swiper-action-center t))
#+end_src

*** Re-builder
#+BEGIN_SRC emacs-lisp
(use-package re-builder
  :defer t
  :config (setq reb-re-syntax 'string))
#+END_SRC
*** Visual-regex
#+BEGIN_SRC emacs-lisp
(use-package visual-regexp
  :bind (:map mode-specific-map
              :prefix-map visual-regexp-prefix-map
              :prefix "v"
              ("r" . vr/query-replace)
              ("R" . vr/replace)
              ("m" . vr/mc-mark)
              ("s" . query-replace)))

(use-package visual-regexp-steroids
  :after visual-regexp)
#+END_SRC
*** rg.el
#+begin_src emacs-lisp
(use-package rg
  :straight t
  :defer t
  :config
  (rg-enable-default-bindings)
  ;; Not sure if I really need this
  (rg-define-toggle "--multiline --multiline-dotall" "u")
  (rg-define-toggle "--word-regexp" "w")
  (rg-define-toggle "--files-with-matches" "L")

  ;; Highlight longer
  (setq next-error-highlight-no-select t)

  ;; Custom searches
  ;; search in org roam folder
  (rg-define-search my/rg-org-roam-directory
    :query ask
    :format regexp
    :files "everything"
    :dir org-roam-directory
    :confirm prefix)

  ;; search in org roam folder where I have transcripts from the Huberman Lab
  (rg-define-search my/rg-org-roam-directory-huberman
    :query ask
    :format regexp
    :files "everything"
    :dir (concat org-roam-directory "/rez/huberman-lab")
    :confirm prefix)

  (setq dotemacs-directory "~/repos/priv/dotemacs")
  (rg-define-search my/rg-dotemacs
    :query ask
    :format regexp
    :files "everything"
    :dir dotemacs-directory
    :confirm prefix)

  (add-hook 'next-error-hook #'recenter)
  (add-hook 'next-error-hook #'focus-mode))
#+end_src

Configure custom searches
#+begin_src emacs-lisp
;; search in org roam folder
(rg-define-search my/rg-org-roam-directory
  :query ask
  :format regexp
  :files "everything"
  :dir org-roam-directory
  :confirm prefix)

;; search in org roam folder where I have transcripts from the Huberman Lab
(rg-define-search my/rg-org-roam-directory-huberman
  :query ask
  :format regexp
  :files "everything"
  :dir (concat org-roam-directory "/rez/huberman-lab")
  :confirm prefix)

(setq dotemacs-directory "~/repos/priv/dotemacs")
(rg-define-search my/rg-dotemacs
  :query ask
  :format regexp
  :files "everything"
  :dir dotemacs-directory
  :confirm prefix)
#+end_src
** Undo/Redo
*** vundo
#+begin_src emacs-lisp
(use-package vundo
  :straight t
  :bind ("C-x u" . vundo)
  :custom
  (vundo-compact-display t)
  (vundo-window-max-height 8)
  (vundo-glyph-alist vundo-unicode-symbols))
#+end_src
** lasgun.el
#+begin_src emacs-lisp
(use-package lasgun
  :straight (:type git :host github :repo "aatmunbaxi/lasgun.el")
  :commands (lasgun-transient)
  :defer t
  :config
  ;; Defines some lasgun actions
  (define-lasgun-action lasgun-action-upcase-word t upcase-word)
  (define-lasgun-action lasgun-action-downcase-word t downcase-word)
  (define-lasgun-action lasgun-action-kill-word nil kill-word)
  (define-lasgun-action lasgun-action-kill-whole-line nil kill-whole-line)
  (define-lasgun-action lasgun-action-comment-line t comment-line)
  (transient-define-prefix lasgun-transient ()
    "Main transient for lasgun."
    [["marks"
      ("c" "Char timer" lasgun-mark-char-timer :transient t)
      ("w" "Word" lasgun-mark-word-0 :transient t)
      ("l" "Begin of line" lasgun-mark-line :transient t)
      ("s" "Symbol" lasgun-mark-symbol-1 :transient t)
      ("o" "Whitespace end" lasgun-mark-whitespace-end :transient t)
      ("x" "Clear lasgun mark ring" lasgun-clear-lasgun-mark-ring :transient t)
      ("u" "Undo lasgun mark" lasgun-pop-lasgun-mark :transient t)]
     ["Actions"
      ("SPC" "Make cursors" lasgun-make-multiple-cursors)
      ("." "Embark act all" lasgun-embark-act-all)
      ("c" "Comment line" lasgun-action-comment-line)
      ("U" "Upcase" lasgun-action-upcase-word)
      ("l" "Downcase" lasgun-action-downcase-word)
      ("k" "Kill whole line" lasgun-action-kill-whole-line)
      ("K" "Kill word" lasgun-action-kill-word)
      ("q" "Quit" transient-quit-one)]]))
#+end_src
** expand-region
#+begin_src emacs-lisp
(use-package expand-region
  :straight t
  :bind
  (("M-g =" . er/expand-region)
   ("M-g - " . er/contract-region)
   :map mode-specific-map
   :prefix-map region-prefix-map
   :prefix "r"
   ("(" . er/mark-inside-pairs)
   (")" . er/mark-outside-pairs)
   ("'" . er/mark-inside-quotes)
   ([34] . er/mark-outside-quotes) ; it's just a quotation mark
   ("o" . er/mark-org-parent)
   ("u" . er/mark-url)
   ("b" . er/mark-org-code-block)
   ("." . er/mark-method-call)
   (">" . er/mark-next-accessor)
   ("w" . er/mark-word)
   ("d" . er/mark-defun)
   ("e" . er/mark-email)
   ("," . er/mark-symbol)
   ("<" . er/mark-symbol-with-prefix)
   (";" . er/mark-comment)
   ("s" . er/mark-sentence)
   ("S" . er/mark-text-sentence)
   ("p" . er/mark-paragraph)
   ("P" . er/mark-text-paragraph)))
#+end_src
** puni
#+begin_src emacs-lisp
(use-package puni
  :straight t)
#+end_src
* UI
** Themes
Install additional themes:
#+begin_src emacs-lisp
(use-package doom-themes
  :straight (:build t)
  :defer t
  ;; :init (load-theme 'doom-nord-aurora t)
  )

;; Install kaolin themes
(use-package kaolin-themes
  :straight t
  :defer t)

;; Install moe-theme
(use-package moe-theme
  :straight t)

(use-package ef-themes
  :straight t)

(use-package modus-themes
  :straight t)

(use-package solarized-theme
  :straight t)

(use-package rg-themes
  :straight (:type git :host github :repo "raegnald/rg-themes"))

(use-package lambda-themes
  :straight (:type git :host github :repo "lambda-emacs/lambda-themes")
  :custom
  (lambda-themes-set-italic-comments t)
  (lambda-themes-set-italic-keywords t)
  (lambda-themes-set-variable-pitch t))

;; Install sanityinc tomorrow
(use-package color-theme-sanityinc-tomorrow
  :straight t)
#+end_src

Load default theme: 

#+begin_src emacs-lisp
(load-theme 'ef-owl t)
#+end_src

** Fonts
Set default font
#+begin_src emacs-lisp
(set-face-attribute 'default nil :family "JetBrains Mono")
#+end_src
** Modeline
*** doom-modeline
#+begin_src emacs-lisp
(use-package doom-modeline
  :straight (:type git :host github :repo "seagle0128/doom-modeline")
  :init
  :custom
  (doom-modeline-height 15)
  (doom-modeline-enable-word-count t)
  (doom-modeline-continuous-word-count-modes '(markdown-mode gfm-mode org-mode))
  (doom-modeline-mu4e nil)
  (doom-modeline-project-detection nil)
  (doom-modeline-env-version t)
  (doom-modeline-persp-name nil)
  (doom-modeline-persp-icon nil)
  (doom-modeline-buffer-file-name-style 'truncate-upto-project)
  :config
  (setq find-file-visit-truename t)
  (doom-modeline-mode 1))
#+end_src
** Folding
*** hideshow
#+begin_src emacs-lisp
 (use-package hideshow
   :straight (:type built-in)
   :defer t
   :hook ((prog-mode conf-mode nxml-mode) . hs-minor-mode) ; Hide/show code blocks, a.k.a. code folding
   :custom
   (hs-hide-comments-when-hiding-all nil)
   :bind (:map hs-minor-mode-map
               ("C-c f" . #'hs-toggle-hiding)
               ("C-c F" . #'+hs-toggle-all))
   :config
   ;; More functions
   ;; @see https://karthinks.com/software/simple-folding-with-hideshow/
   (defun hs-cycle (&optional level)
     (interactive "p")
     (let (message-log-max
           (inhibit-message t))
       (if (= level 1)
           (pcase last-command
             ('hs-cycle
              (hs-hide-level 1)
              (setq this-command 'hs-cycle-children))
             ('hs-cycle-children
              (save-excursion (hs-show-block))
              (setq this-command 'hs-cycle-subtree))
             ('hs-cycle-subtree
              (hs-hide-block))
             (_
              (if (not (hs-already-hidden-p))
                  (hs-hide-block)
                (hs-hide-level 1)
                (setq this-command 'hs-cycle-children))))
         (hs-hide-level level)
         (setq this-command 'hs-hide-level))))

   (defun hs-toggle-all ()
     "Toggle hide/show all."
     (interactive)
     (pcase last-command
       ('hs-toggle-all
        (save-excursion (hs-show-all))
        (setq this-command 'hs-global-show))
       (_ (hs-hide-all))))

   ;; Display line counts
   (defun hs-display-code-line-counts (ov)
     "Display line counts when hiding codes."
     (when (eq 'code (overlay-get ov 'hs))
       (overlay-put ov 'display
                    (concat
                     " "
                     (propertize
                      (if (char-displayable-p ?⏷) "⏷" "...")
                      'face 'shadow)
                     (propertize
                      (format " (%d lines)"
                              (count-lines (overlay-start ov)
                                           (overlay-end ov)))
                      'face '(:inherit shadow :height 0.8))
                     " "))))
   (setq hs-set-up-overlay #'hs-display-code-line-counts))
#+end_src

** symbol-overlay
#+BEGIN_SRC emacs-lisp
(use-package symbol-overlay
  :hook ((prog-mode html-mode css-mode) . symbol-overlay-mode)
  :bind (("C-c c s" . symbol-overlay-put)
         :map symbol-overlay-mode-map
         ("M-n" . symbol-overlay-jump-next)
         ("M-p" . symbol-overlay-jump-prev)
         :map symbol-overlay-map
         ("M-n" . symbol-overlay-jump-next)
         ("M-p" . symbol-overlay-jump-prev)
         ("C-c C-s r" . symbol-overlay-rename)
         ("C-c C-s k" . symbol-overlay-remove-all)
         ("C-c C-s q" . symbol-overlay-query-replace)
         ("C-c C-s t" . symbol-overlay-toggle-in-scope)
         ("C-c C-s n" . symbol-overlay-jump-next)
         ("C-c C-s p" . symbol-overlay-jump-prev))
  :init
  (setq symbol-overlay-scope t))
#+END_SRC
** visual-fill-column
#+begin_src emacs-lisp
(use-package visual-fill-column
  :straight t
  :demand t)
#+end_src
** solaire-mode
#+begin_src emacs-lisp
(use-package solaire-mode
  :straight t
  :init
  (solaire-global-mode))
#+end_src
** pulsar
#+begin_src emacs-lisp
(use-package pulsar
  :straight t
  ;; :hook (after-init-hook . pulsar-global-mode)
  :hook ((next-error xref-after-return org-mode) . pulsar-pulse-line) ; only pulse, don't recenter
  :hook ((consult-after-jump imenu-after-jump xref-after-jump) . pulsar-recenter-center) ; pulse and recenter
  :hook ((consult-after-jump imenu-after-jump xref-after-jump xref-after-return) . pulsar-reveal-entry) ; reveal if hidden
  :custom
  (pulsar-face 'pulsar-red)
  :config
  (pulsar-global-mode t)
  (cl-callf append pulsar-pulse-functions
    '(what-cursor-position scroll-up-command scroll-down-command kill-whole-line yank-from-kill-ring yank yank-pop)))
#+end_src
** Windows
*** windmove
Focus and swap windows
#+begin_src emacs-lisp
(use-package windmove
  :straight t
  :config
  (windmove-default-keybindings 'shift) ; Navigate windows using Shift+Direction
  (defvar-keymap +windmove-keys
    ;; :repeat t ; Make it work with `repeat-mode'
    "k" #'windmove-up
    "j" #'windmove-down
    "h" #'windmove-left
    "l" #'windmove-right
    "d" #'delete-window)
  (keymap-global-set "C-c w" +windmove-keys))
#+end_src
*** winner-mode
#+begin_src emacs-lisp
(use-package winner
  :straight t
  :custom
  (winner-boring-buffers
   '("*Completions*"
     "*Compile-Log*"
     "*inferior-lisp*"
     "*Fuzzy Completions*"
     "*Apropos*"
     "*Help*"
     "*cvs*"
     "*Buffer List*"
     "*Ibuffer*"
     "*esh command on file*"))
  :config
  (winner-mode 1))
#+end_src
** Tabs
*** tabspaces
#+begin_src emacs-lisp
(use-package tabspaces
  ;; use this next line only if you also use straight, otherwise ignore it.
  :straight (:type git :host github :repo "mclear-tools/tabspaces")
  :hook (after-init . tabspaces-mode) ;; use this only if you want the minor-mode loaded at startup.
  :commands (tabspaces-switch-or-create-workspace
             tabspaces-open-or-create-project-and-workspace)
  :custom
  (tabspaces-use-filtered-buffers-as-default t)
  (tabspaces-default-tab "Default")
  (tabspaces-remove-to-default t)
  (tabspaces-include-buffers '("*scratch*"))
  (tabspaces-initialize-project-with-todo t)
  (tabspaces-todo-file-name "project-todo.org")
  ;; sessions
  (tabspaces-session t)
  (tabspaces-session-auto-restore nil)
  (tab-bar-new-tab-choice "*scratch*"))
#+end_src
*** COMMENT centaur-tabs
#+begin_src emacs-lisp
(use-package centaur-tabs
  :straight t
  :init
  (setq centaur-tabs-enable-key-bindings t)
  :custom
  (centaur-tabs-set-icons t)
  (centaur-tabs-plain-icons t)
  :config
  (setq centaur-tabs-style "bar"
        centaur-tabs-height 15
        centaur-tabs-show-new-tab-button t
        centaur-tabs-set-modified-marker t
        centaur-tabs-show-navigation-buttons t
        centaur-tabs-set-bar 'under
        centaur-tabs-show-count nil
        ;; centaur-tabs-label-fixed-length 15
        ;; centaur-tabs-gray-out-icons 'buffer
        x-underline-at-descent-line t
        centaur-tabs-left-edge-margin nil)
  ;; Exclude some buffers
  (setq centaur-tabs-excluded-prefixes
        (append centaur-tabs-excluded-prefixes
                '("*ginko-output*"
                  "*new-prefix2*"
                  "*new-prefix3*")))
  (centaur-tabs-change-fonts (face-attribute 'default :font) 110)
  (centaur-tabs-headline-match)
  ;; (centaur-tabs-enable-buffer-alphabetical-reordering)
  ;; (setq centaur-tabs-adjust-buffer-order t)
  (setq centaur-tabs-adjust-buffer-order 'left)
  (centaur-tabs-mode t)
  (centaur-tabs-group-by-projectile-project)
  (setq uniquify-separator "/")
  (setq uniquify-buffer-name-style 'forward)
  (defun centaur-tabs-buffer-groups ()
    "`centaur-tabs-buffer-groups' control buffers' group rules.

Group centaur-tabs with mode if buffer is derived from `eshell-mode' `emacs-lisp-mode' `dired-mode' `org-mode' `magit-mode'.
All buffer name start with * will group to \"Emacs\".
Other buffer group by `centaur-tabs-get-group-name' with project name."
    (list
     (cond
      ;; ((not (eq (file-remote-p (buffer-file-name)) nil))
      ;; "Remote")
      ((or (string-equal "*" (substr
                              (memq major-mode '(magit-process-mode
                                                 magit-status-mode
                                                 magit-diff-mode
                                                 magit-log-mode
                                                 magit-file-mode
                                                 magit-blob-mode
                                                 magit-blame-mode
                                                 )))
                         "Emacs")
           ((derived-mode-p 'prog-mode)
            "Editing")
           ((derived-mode-p 'dired-mode)
            "Dired")
           ((memq major-mode '(helpful-mode
                               help-mode))
            "Help")
           ((memq major-mode '(org-mode
                               org-agenda-clockreport-mode
                               org-src-mode
                               org-agenda-mode
                               org-beamer-mode
                               org-indent-mode
                               org-bullets-mode
                               org-cdlatex-mode
                               org-agenda-log-mode
                               diary-mode))
            "OrgMode")
           (t
            (centaur-tabs-get-group-name (current-buffer))))))))
  :hook
  (dashboard-mode . centaur-tabs-local-mode)
  (term-mode . centaur-tabs-local-mode)
  (calendar-mode . centaur-tabs-local-mode)
  (org-agenda-mode . centaur-tabs-local-mode)
  (prog-mode . centaur-tabs-mode)
  (eshell-mode . centaur-tabs-local-mode)
  (gptel-mode . centaur-tabs-local-mode)
  (popper-mode . centaur-tabs-local-mode)
  ;; :bind
  ;; ("s-1" . centaur-tabs-backward)
  ;; ("s-2" . centaur-tabs-forward)
  ;; ("s-S h" . centaur-tabs-move-current-tab-to-left)
  ;; ("s-S l" . centaur-tabs-move-current-tab-to-right)
  )
#+end_src
** Mouse
I still use the mouse for scrolling, changing frame sizes:

#+begin_src emacs-lisp
(unless (display-graphic-p)
  (xterm-mouse-mode 1))

;; Automatically focus frame
(setq mouse-autoselect-window t)

;; Some keybindings
(global-set-key (kbd "C-S-<wheel-up>") 'enlarge-window-horizontally)
(global-set-key (kbd "S-<wheel-up>") 'enlarge-window)
(global-set-key (kbd "C-S-<mouse-4>") 'enlarge-window-horizontally)
(global-set-key (kbd "S-<mouse-4>") 'enlarge-window)

(global-set-key (kbd "C-S-<wheel-down>") 'shrink-window-horizontally)
(global-set-key (kbd "S-<wheel-down>") 'shrink-window)
(global-set-key (kbd "C-S-<mouse-5>") 'shrink-window-horizontally)
(global-set-key (kbd "S-<mouse-5>") 'shrink-window)
#+end_src
** Hydra
Some inspirations from https://github.com/rememberYou/.emacs.d/blob/master/config.org
#+begin_src emacs-lisp
(use-package hydra
  :straight t)


(use-package major-mode-hydra
  :straight t
  :after hydra
  :preface
  (defun with-alltheicon (icon str &optional height v-adjust face)
    "Display an icon from all-the-icon."
    (s-concat (all-the-icons-alltheicon icon :v-adjust (or v-adjust 0) :height (or height 1) :face face) " " str))

  (defun with-faicon (icon str &optional height v-adjust face)
    "Display an icon from Font Awesome icon."
    (s-concat (all-the-icons-faicon icon ':v-adjust (or v-adjust 0) :height (or height 1) :face face) " " str))

  (defun with-fileicon (icon str &optional height v-adjust face)
    "Display an icon from the Atom File Icons package."
    (s-concat (all-the-icons-fileicon icon :v-adjust (or v-adjust 0) :height (or height 1) :face face) " " str))

  (defun with-octicon (icon str &optional height v-adjust face)
    "Display an icon from the GitHub Octicons."
    (s-concat (all-the-icons-octicon icon :v-adjust (or v-adjust 0) :height (or height 1) :face face) " " str)))
#+end_src
*** Hydra / Windows

Group window-related commands.

#+begin_src emacs-lisp
(pretty-hydra-define hydra-windows
  (:hint nil :forein-keys warn :quit-key "q" :title "Windows")
  ("Window"
   (("b" balance-windows "balance")
    ("c" centered-window-mode "center")
    ("i" enlarge-window "heighten")
    ("j" shrink-window-horizontally "narrow")
    ("k" shrink-window "lower")
    ("u" winner-undo "undo")
    ("r" winner-redo "redo")
    ("l" enlarge-window-horizontally "widen")
    ("s" switch-window-then-swap-buffer "swap" :color teal))
   "Zoom"
   (("-" text-scale-decrease "out")
    ("+" text-scale-increase "in")
    ("=" (text-scale-increase 0) "reset"))))
#+end_src
*** COMMENT Hydra / Window Nav
From https://github.com/doomemacs/doomemacs/blob/master/modules/ui/hydra/autoload/windows.el

#+begin_src emacs-lisp
(defhydra +hydra/window-nav (:hint nil)
  "
            Split: _v_ert  _s_:horz
           Delete: _c_lose  _o_nly
    Switch Window: _h_:left  _j_:down  _k_:up  _l_:right  _u_:undo  _r_:redo
          Buffers: _p_revious  _n_ext  _b_:select  _f_ind-file
           Resize: _H_:splitter left  _J_:splitter down  _K_:splitter up  _L_:splitter right
             Move: _a_:up  _z_:down  _i_menu
  "
  ("z" scroll-up-line)
  ("a" scroll-down-line)
  ("i" idomenu)

  ("h" windmove-left)
  ("j" windmove-down)
  ("k" windmove-up)
  ("l" windmove-right)
  ("u" winner-undo)
  ("r" winner-redo)

  ("p" previous-buffer)
  ("n" next-buffer)
  ("b" switch-to-buffer)
  ("f" find-file)

  ("s" split-window-below)
  ("v" split-window-right)

  ("c" delete-window)
  ("o" delete-other-windows)

  ("H" hydra-move-splitter-left)
  ("J" hydra-move-splitter-down)
  ("K" hydra-move-splitter-up)
  ("L" hydra-move-splitter-right)

  ("+" text-scale-increase "in")
  ("-" text-scale-decrease "out")
  ("=" (text-scale-increase 0) "reset")

  ("q" nil))
#+end_src
*** COMMENT Hydra / Flyspell
#+begin_src emacs-lisp
(defhydra flyspell-hydra ()
  "
  Spell Commands^^           Add To Dictionary^^              Other
  --------------^^---------- -----------------^^------------- -----^^---------------------------
  [_b_] check whole buffer   [_B_] add word to dict (buffer)  [_t_] toggle spell check
  [_r_] check region         [_G_] add word to dict (global)  [_q_] exit
  [_d_] change dictionary    [_S_] add word to dict (session) [_Q_] exit and disable spell check
  [_n_] next error
  [_c_] correct before point
  [_s_] correct at point
  "
  ("B" nil)
  ("b" flyspell-buffer)
  ("r" flyspell-region)
  ("d" ispell-change-dictionary)
  ("G" nil)
  ("n" flyspell-goto-next-error)
  ("c" flyspell-correct-wrapper)
  ("Q" flyspell-mode :exit t)
  ("q" nil :exit t)
  ("S" nil)
  ("s" flyspell-correct-at-point)
  ("t" nil))
#+end_src
*** Hydra / ORG
**** COMMENT hydra-org-jump
From [[https://sriramkswamy.github.io/dotemacs/]]

#+begin_src emacs-lisp
(defun sk/before-hydra ()
  "Function to run before the Hydra gets executed."
  (focus-mode))

(defun sk/org-jump-next-heading-and-scroll ()
  "Move to the next same-level heading and scroll line to top."
  (interactive)
  (org-forward-heading-same-level)
  (evil-scroll-line-to-top)
  (message "Next heading and scrolled to top"))

(defhydra sk/hydra-org-jump (:color pink :hint nil :pre sk/before-hydra)
  ;; ("J" outline-next-visible-heading)
  ("J" (lambda ()
         (interactive)
         (outline-next-visible-heading 1)
         ;; (call-interactively 'evil-scroll-line-to-top)
         (org-cycle)))

  ;; ("K" outline-previous-visible-heading)
  ("K" (lambda ()
         (interactive)
         (outline-previous-visible-heading 1)
         ;; (call-interactively 'evil-scroll-line-to-top)
         (org-cycle)))
  ("L" org-down-element)
  ("H" org-up-element)
  ;; ("j" org-forward-heading-same-level)
  ("j" (lambda ()
         (interactive)
         (org-forward-heading-same-level 1)
         (call-interactively 'evil-scroll-line-to-top)
         (org-cycle)))
  ;; ("k" org-backward-heading-same-level)
  ("k" (lambda ()
         (interactive)
         (org-backward-heading-same-level 1)
         (call-interactively 'evil-scroll-line-to-top)
         (org-cycle)))
  ;; ("u" org-next-item)
  ;; ("d" org-previous-item)
  ;; ("f" org-table-next-field)
  ;; ("b" org-table-previous-field)
  ;; ("n" org-next-block)
  ("p" forward-paragraph)
  ;; ("N" org-next-link)
  ("P" backward-paragraph)
  ("q" nil :color blue))
#+end_src

#+results:
: sk/hydra-org-jump/body

**** COMMENT hydra-org-babel-transient
#+begin_src emacs-lisp :tangle no
(defhydra org-babel-transient ()
  "
  ^Navigate^                    ^Interact
  ^^^^^^^^^^^------------------------------------------
  [_t_/_s_] navigate src blocs  [_x_] execute src block
  [_g_]^^   goto named block    [_'_] edit src block
  [_z_]^^   recenter screen     [_q_] quit
  "
  ("q" nil :exit t)
  ("t" org-babel-next-src-block)
  ("s" org-babel-previous-src-block)
  ("g" org-babel-goto-named-src-block)
  ("z" recenter-top-bottom)
  ("x" org-babel-execute-maybe)
  ("'" org-edit-special :exit t))
#+end_src
*** COMMENT Hydra / merge
Group Merge commands.

#+begin_src emacs-lisp
(pretty-hydra-define hydra-merge
  (:hint nil :color pink :quit-key "q" :title (with-octicon "mark-github" "Magit" 1 -0.05))
  ("Move"
   (("n" smerge-next "next")
    ("p" smerge-prev "previous"))
   "Keep"
   (("RET" smerge-keep-current "current")
    ("a" smerge-keep-all "all")
    ("b" smerge-keep-base "base")
    ("l" smerge-keep-lower "lower")
    ("u" smerge-keep-upper "upper"))
   "Diff"
   (("<" smerge-diff-base-upper "upper/base")
    ("=" smerge-diff-upper-lower "upper/lower")
    (">" smerge-diff-base-lower "base/lower")
    ("R" smerge-refine "redefine")
    ("E" smerge-ediff "ediff"))
   "Other"
   (("C" smerge-combine-with-next "combine")
    ("r" smerge-resolve "resolve")
    ("k" smerge-kill-current "kill current"))))
#+end_src
*** Hydra / smerge
From https://github.com/dakra/dmacs/blob/nil/init.org

#+begin_src emacs-lisp
(use-package smerge-mode
  :hook (magit-diff-visit-file . (lambda ()
                                   (when smerge-mode
                                     (hydra-smerge/body))))
  :config
  (require 'hydra)
  (defhydra hydra-smerge
    (:color pink :hint nil :post (smerge-auto-leave))
    "
  ^Move^       ^Keep^               ^Diff^                 ^Other^
  ^^-----------^^-------------------^^---------------------^^-------
  _n_ext       _b_ase               _<_: upper/base        _C_ombine
  _p_rev       _u_pper              _=_: upper/lower       _r_esolve
  ^^           _l_ower              _>_: base/lower        _k_ill current
  ^^           _a_ll                _R_efine
  ^^           _RET_: current       _E_diff
  "
    ("n" smerge-next)
    ("p" smerge-prev)
    ("b" smerge-keep-base)
    ("u" smerge-keep-upper)
    ("l" smerge-keep-lower)
    ("a" smerge-keep-all)
    ("RET" smerge-keep-current)
    ("\C-m" smerge-keep-current)
    ("<" smerge-diff-base-upper)
    ("=" smerge-diff-upper-lower)
    (">" smerge-diff-base-lower)
    ("R" smerge-refine)
    ("E" smerge-ediff)
    ("C" smerge-combine-with-next)
    ("r" smerge-resolve)
    ("k" smerge-kill-current)
    ("q" nil "cancel" :color blue)))
#+end_src
*** COMMENT Hydra / modeline                                                                       :todo:
#+begin_src emacs-lisp
(pretty-hydra-define hydra-modeline
  (:title "Modeline" :color amaranth :quit-key ("q" "C-g"))
  ("Icon"
   (("i" (setq doom-modeline-icon (not doom-modeline-icon))
     "display icons" :toggle doom-modeline-icon)
    ("u" (setq doom-modeline-unicode-fallback (not doom-modeline-unicode-fallback))
     "unicode fallback" :toggle doom-modeline-unicode-fallback)
    ("m" (setq doom-modeline-major-mode-icon (not doom-modeline-major-mode-icon))
     "major mode" :toggle doom-modeline-major-mode-icon)
    ("c" (setq doom-modeline-major-mode-color-icon (not doom-modeline-major-mode-color-icon))
     "colorful major mode" :toggle doom-modeline-major-mode-color-icon)
    ("s" (setq doom-modeline-buffer-state-icon (not doom-modeline-buffer-state-icon))
     "buffer state" :toggle doom-modeline-buffer-state-icon)
    ("o" (setq doom-modeline-buffer-modification-icon (not doom-modeline-buffer-modification-icon))
     "modification" :toggle doom-modeline-buffer-modification-icon)
    ("x" (setq doom-modeline-time-icon (not doom-modeline-time-icon))
     "time" :toggle doom-modeline-time-icon)
    ("v" (setq doom-modeline-modal-icon (not doom-modeline-modal-icon))
     "modal" :toggle doom-modeline-modal-icon))
   "Segment"
   (("g h" (setq doom-modeline-hud (not doom-modeline-hud))
     "hud" :toggle doom-modeline-hud)
    ("g m" (setq doom-modeline-minor-modes (not doom-modeline-minor-modes))
     "minor modes" :toggle doom-modeline-minor-modes)
    ("g w" (setq doom-modeline-enable-word-count (not doom-modeline-enable-word-count))
     "word count" :toggle doom-modeline-enable-word-count)
    ("g e" (setq doom-modeline-buffer-encoding (not doom-modeline-buffer-encoding))
     "encoding" :toggle doom-modeline-buffer-encoding)
    ("g i" (setq doom-modeline-indent-info (not doom-modeline-indent-info))
     "indent" :toggle doom-modeline-indent-info)
    ("g c" (setq doom-modeline-display-misc-in-all-mode-lines (not doom-modeline-display-misc-in-all-mode-lines))
     "misc info" :toggle doom-modeline-display-misc-in-all-mode-lines)
    ("g l" (setq doom-modeline-lsp (not doom-modeline-lsp))
     "lsp" :toggle doom-modeline-lsp)
    ("g k" (setq doom-modeline-workspace-name (not doom-modeline-workspace-name))
     "workspace" :toggle doom-modeline-workspace-name)
    ("g g" (setq doom-modeline-github (not doom-modeline-github))
     "github" :toggle doom-modeline-github)
    ("g n" (setq doom-modeline-gnus (not doom-modeline-gnus))
     "gnus" :toggle doom-modeline-gnus)
    ("g u" (setq doom-modeline-mu4e (not doom-modeline-mu4e))
     "mu4e" :toggle doom-modeline-mu4e)
    ("g r" (setq doom-modeline-irc (not doom-modeline-irc))
     "irc" :toggle doom-modeline-irc)
    ("g f" (setq doom-modeline-irc-buffers (not doom-modeline-irc-buffers))
     "irc buffers" :toggle doom-modeline-irc-buffers)
    ("g s" (progn
             (setq doom-modeline-checker-simple-format (not doom-modeline-checker-simple-format))
             (and (bound-and-true-p flycheck-mode) (flycheck-buffer)))
     "simple checker" :toggle doom-modeline-checker-simple-format)
    ("g t" (setq doom-modeline-time (not doom-modeline-time))
     "time" :toggle doom-modeline-time)
    ("g v" (setq doom-modeline-env-version (not doom-modeline-env-version))
     "version" :toggle doom-modeline-env-version))
   "Style"
   (("a" (setq doom-modeline-buffer-file-name-style 'auto)
     "auto"
     :toggle (eq doom-modeline-buffer-file-name-style 'auto))
    ("b" (setq doom-modeline-buffer-file-name-style 'buffer-name)
     "buffer name"
     :toggle (eq doom-modeline-buffer-file-name-style 'buffer-name))
    ("f" (setq doom-modeline-buffer-file-name-style 'file-name)
     "file name"
     :toggle (eq doom-modeline-buffer-file-name-style 'file-name))
    ("t u" (setq doom-modeline-buffer-file-name-style 'truncate-upto-project)
     "truncate upto project"
     :toggle (eq doom-modeline-buffer-file-name-style 'truncate-upto-project))
    ("t f" (setq doom-modeline-buffer-file-name-style 'truncate-from-project)
     "truncate from project"
     :toggle (eq doom-modeline-buffer-file-name-style 'truncate-from-project))
    ("t w" (setq doom-modeline-buffer-file-name-style 'truncate-with-project)
     "truncate with project"
     :toggle (eq doom-modeline-buffer-file-name-style 'truncate-with-project))
    ("t e" (setq doom-modeline-buffer-file-name-style 'truncate-except-project)
     "truncate except project"
     :toggle (eq doom-modeline-buffer-file-name-style 'truncate-except-project))
    ("t r" (setq doom-modeline-buffer-file-name-style 'truncate-upto-root)
     "truncate upto root"
     :toggle (eq doom-modeline-buffer-file-name-style 'truncate-upto-root))
    ("t a" (setq doom-modeline-buffer-file-name-style 'truncate-all)
     "truncate all"
     :toggle (eq doom-modeline-buffer-file-name-style 'truncate-all))
    ("t n" (setq doom-modeline-buffer-file-name-style 'truncate-nil)
     "truncate none"
     :toggle (eq doom-modeline-buffer-file-name-style 'truncate-nil))
    ("r f" (setq doom-modeline-buffer-file-name-style 'relative-from-project)
     "relative from project"
     :toggle (eq doom-modeline-buffer-file-name-style 'relative-from-project))
    ("r t" (setq doom-modeline-buffer-file-name-style 'relative-to-project)
     "relative to project"
     :toggle (eq doom-modeline-buffer-file-name-style 'relative-to-project)))
   "Project Detection"
   (("p a" (setq doom-modeline-project-detection 'auto)
     "auto"
     :toggle (eq doom-modeline-project-detection 'auto))
    ("p f" (setq doom-modeline-project-detection 'ffip)
     "ffip"
     :toggle (eq doom-modeline-project-detection 'ffip))
    ("p i" (setq doom-modeline-project-detection 'projectile)
     "projectile"
     :toggle (eq doom-modeline-project-detection 'projectile))
    ("p p" (setq doom-modeline-project-detection 'project)
     "project"
     :toggle (eq doom-modeline-project-detection 'project))
    ("p n" (setq doom-modeline-project-detection nil)
     "disable"
     :toggle (eq doom-modeline-project-detection nil)))
   "Misc"
   (("n" (progn
           (message "Fetching GitHub notifications...")
           (run-with-timer 300 nil #'doom-modeline--github-fetch-notifications)
           (browse-url "https://github.com/notifications"))
     "github notifications" :exit t)
    ("e" (cond ((bound-and-true-p flycheck-mode)
                (flycheck-list-errors))
               ((bound-and-true-p flymake-mode)
                (flymake-show-diagnostics-buffer)))
     "list errors" :exit t)
    ("w" (if (bound-and-true-p grip-mode)
             (grip-browse-preview)
           (message "Not in preview"))
     "browse preview" :exit t)
    ("z h" (read-from-minibuffer
            "Eval: "
            (format "(setq %s %s)"
                    'doom-modeline-height
                    (symbol-value 'doom-modeline-height)))
     "set height" :exit t)
    ("z w" (read-from-minibuffer
            "Eval: "
            (format "(setq %s %s)"
                    'doom-modeline-bar-width
                    (symbol-value 'doom-modeline-bar-width)))
     "set bar width" :exit t)
    ("z g" (read-from-minibuffer
            "Eval: "
            (format "(setq %s %s)"
                    'doom-modeline-github-interval
                    (symbol-value 'doom-modeline-github-interval)))
     "set github interval" :exit t)
    ("z n" (read-from-minibuffer
            "Eval: "
            (format "(setq %s %s)"
                    'doom-modeline-gnus-timer
                    (symbol-value 'doom-modeline-gnus-timer)))
     "set gnus interval" :exit t))))

#+end_src
*** Hydra / multiple-cursors
#+begin_src emacs-lisp
(defhydra multiple-cursors-hydra (:columns 3 :idle 1.0)
  "Multiple cursors"
  ("l" mc/edit-lines "Edit lines in region" :exit t)
  ("b" mc/edit-beginnings-of-lines "Edit beginnings of lines in region" :exit t)
  ("e" mc/edit-ends-of-lines "Edit ends of lines in region" :exit t)
  ("a" mc/mark-all-dwim "Mark all dwim" :exit t)
  ("S" mc/mark-all-symbols-like-this "Mark all symbols likes this" :exit t)
  ("w" mc/mark-all-words-like-this "Mark all words like this" :exit t)
  ("r" mc/mark-all-in-region "Mark all in region" :exit t)
  ("R" mc/mark-all-in-region-regexp "Mark all in region (regexp)" :exit t)
  ("d" mc/mark-all-like-this-in-defun "Mark all like this in defun" :exit t)
  ("s" mc/mark-all-symbols-like-this-in-defun "Mark all symbols like this in defun" :exit t)
  ("W" mc/mark-all-words-like-this-in-defun "Mark all words like this in defun" :exit t)
  ("i" mc/insert-numbers "Insert numbers" :exit t)
  ("n" mc/mark-next-like-this "Mark next like this")
  ("N" mc/skip-to-next-like-this "Skip to next like this")
  ("M-n" mc/unmark-next-like-this "Unmark next like this")
  ("p" mc/mark-previous-like-this "Mark previous like this")
  ("P" mc/skip-to-previous-like-this "Skip to previous like this")
  ("M-p" mc/unmark-previous-like-this "Unmark previous like this")
  ("q" nil "Quit" :exit t))
#+end_src
*** Hydra / lasgun
#+begin_src emacs-lisp
(defhydra hydra-lasgun-marks (:color red :hint nil)
  "
                              LASGUN MARKS
^^^^───────────────────────────────────────────────────────────
^^^^Basic Marks                    ^^^^Directional Marks
^^^^^^─────────────────────────    ^^^^^^────────────────────────
_l_: Line start                   _W_: Word above     _n_: Word below
_e_: Line end                     _S_: Symbol above   _m_: Symbol below
_w_: Word                         _C_: Char above     _v_: Char below
_s_: Symbol                       _H_: Space above    _b_: Space below
_c_: Char (2)
_t_: Char timer
^^^^Special Marks
^^^^^^─────────────────────────
_0_: Subword-0   _1_: Subword-1   _h_: Whitespace end

_q_: Quit
"
  ("l" lasgun-mark-line :exit nil)
  ("e" lasgun-mark-end-of-line :exit nil)
  ("w" lasgun-mark-word :exit nil)
  ("s" lasgun-mark-symbol-1 :exit nil)
  ("c" lasgun-mark-char-2 :exit nil)
  ("t" lasgun-mark-char-timer :exit nil)

  ;; Above variants - using capital letters
  ("W" lasgun-mark-word-0-above :exit nil)
  ("S" lasgun-mark-symbol-1-above :exit nil)
  ("C" lasgun-mark-char-2-above :exit nil)
  ("H" lasgun-mark-whitespace-end-above :exit nil)

  ;; Below variants - using available lowercase letters
  ("n" lasgun-mark-word-0-below :exit nil)
  ("m" lasgun-mark-symbol-1-below :exit nil)
  ("v" lasgun-mark-char-2-below :exit nil)
  ("b" lasgun-mark-whitespace-end-below :exit nil)

  ("0" lasgun-mark-subword-0 :exit nil)
  ("1" lasgun-mark-subword-1 :exit nil)
  ("h" lasgun-mark-whitespace-end :exit nil)

  ("q" nil :exit t))
#+end_src
*** COMMENT Hydra / Scratch Buffers
#+begin_src emacs-lisp
;; Nice idea from https://github.com/dakra/dmacs/blob/nil/init.org
(defhydra hydra-scratchpad (:hint nil)
  "
     _p_ython    _e_lisp        _s_ql
     _g_o        _j_avascript   _t_ypescript
     _r_ust      _R_est-client  _h_tml
     _o_rg-mode  _T_ext         _m_arkdown
     "
  ("p" (switch-to-buffer "*python*scratchpad.py"))
  ("e" (switch-to-buffer "*elisp*scratchpad.el"))
  ("s" (switch-to-buffer "*sql*scratchpad.sql"))
  ("g" (switch-to-buffer "*go*scratchpad.go"))
  ("j" (switch-to-buffer "*js*scratchpad.js"))
  ("h" (switch-to-buffer "*html*scratchpad.html"))
  ("o" (switch-to-buffer "*org*scratchpad.org"))
  ("T" (switch-to-buffer "*text*scratchpad.txt"))
  ("m" (switch-to-buffer "*markdown*scratchpad.md")))
#+end_src
