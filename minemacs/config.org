#+title: MinEmacs — Config
#+property: header-args:emacs-lisp  :mkdirp yes :lexical t :exports code
#+property: header-args:emacs-lisp+ :mkdirp yes :noweb no-export
#+startup: indent overview

* MinEmacs Config
This section will be ~tangled~ to ~$HOME/.minemacs.d~

** early-config.el
:properties:
:header-args:emacs-lisp: :tangle ~/.minemacs.d/early-config.el
:end:
#+begin_src emacs-lisp
  ;; Set log level to `info' rather than `error'
  ;; (unless minemacs-verbose-p
  ;;   (setq minemacs-msg-level 2))
#+end_src
** config.el
:properties:
:header-args:emacs-lisp: :tangle ~/.minemacs.d/config.el
:end:

#+begin_src emacs-lisp
  ;;; config.el -*- lexical-binding: t; -*-

  ;; Copyright (C) 2022-2024 Abdelhak Bougouffa

  ;; =============================================================================
  ;; CAVEAT! PLEASE NOTE THAT THIS CONFIG FILE IS JUST AN EXAMPLE OF HOW TO SET
  ;; SOME OF MINEMACS' FEATURES. IT IS NOT INTENDED TO BE USED AS IT IS UNLESS YOU
  ;; UNDERSTAND IT ALL. IF YOU USE IT AS IT IS, YOU CAN SET SOME SETTINGS THAT YOU
  ;; DON'T WANT TO SET!
  ;; =============================================================================

  ;; Personal info
  (setq user-full-name "Victor Dorneanu"
        user-mail-address (rot13 "no - spam at dornea dot nu"))

  ;; Set the default GPG key ID, see "gpg --list-secret-keys"
  ;; (setq-default epa-file-encrypt-to '("XXXX"))

  ;; Set a theme for MinEmacs, supported themes include these from `doom-themes'
  ;; or built-in themes
  (setq minemacs-theme 'doom-dracula) ; `doom-one' is a dark theme, `doom-one-light' is the light one

  ;; MinEmacs defines the variable `minemacs-fonts-plist' that is used by the
  ;; `+setup-fonts' function. The function checks and enables the first available
  ;; font from these defined in `minemacs-fonts-plist'. This variable can be
  ;; customized to set font specs for specific Emacs faces or to enable some
  ;; language-specific fonts.

  ;; You can set a list of fonts to be used, like the snippet below. The first
  ;; font found on the system will be used:
  (plist-put minemacs-fonts-plist
             :default
             '((:family "JetBrains Mono" :height 130)
               (:family "Iosevka Fixed Curly Slab" :height 110 :weight light)
               (:family "Cascadia Code" :height 120 :weight semi-light)))

  ;; To set font for arbitrary Emacs face, you need just to write the face name as
  ;; a keyword. For example `variable-pitch' -> `:variable-pitch':
  (plist-put minemacs-fonts-plist
             :variable-pitch ;; <- applies to the `variable-pitch' face using `custom-theme-set-faces'
             '("Lato"
               "Roboto"
               "Inter"
               "Helvetica"))

  ;; For example to set custom font for `mode-line' -> `:mode-line':
  (plist-put minemacs-fonts-plist
             :mode-line ;; <- applies to the `mode-line' face using `custom-theme-set-faces'
             '((:family "JetBrains Mono" :weight regular)
               (:family "Roboto" :weight light)))

  (plist-put minemacs-fonts-plist
             :mode-line-inactive ;; <- applies to the `mode-line-inactive'
             '((:family "JetBrains Mono" :weight regular)
               (:family "Roboto" :weight light)))

  ;; You can also setup some language-specific fonts. For example, to use "Amiri"
  ;; or "KacstOne" for Arabic script (the first to be found). All scripts
  ;; supported by Emacs can be found in `+known-scripts'. The value of the extra
  ;; `:prepend' is passed the last argument to `set-fontset-font'. The extra
  ;; `:scale' parameter can be used to set a scaling factor for the font in Emacs'
  ;; `face-font-rescale-alist'.
  (plist-put minemacs-fonts-plist
             :arabic ;; <- applies to arabic script using `set-fontset-font'
             '((:family "Amiri" :scale 0.9)
               (:family "KacstOne")))

  ;; Use "LXGW WenKai Mono" for Han (Chinese) script
  (plist-put minemacs-fonts-plist
             :han
             '((:family "LXGW WenKai Mono" :scale 1.3)))

  ;; When `me-daemon' and `me-email' are enabled, MinEmacs will try to start
  ;; `mu4e' in background at startup. To disable this behavior, you can set
  ;; `+mu4e-auto-start' to nil here.
  ;; (setq +mu4e-auto-start nil)

  (+deferred!
   ;; Auto enable Eglot in modes `+eglot-auto-enable-modes' using
   ;; `+eglot-auto-enable' (from the `me-prog' module). You can use
   ;; `+lsp-auto-enable' instead to automatically enable LSP mode in supported
   ;; modes (from the `me-lsp' module).
   (+eglot-auto-enable)

   ;; Add `ocaml-mode' to `eglot' auto-enable modes
   (add-to-list '+eglot-auto-enable-modes 'go-mode)
   (add-to-list '+eglot-auto-enable-modes 'terraform-mode)
   (add-to-list '+eglot-auto-enable-modes 'python-mode))

   ;; (with-eval-after-load 'eglot
   ;;   ;; You can use this to fill `+eglot-auto-enable-modes' with all supported
   ;;   ;; modes from `eglot-server-programs'
   ;;   (+eglot-use-on-all-supported-modes eglot-server-programs))

  ;; Enable tab bar
  (with-eval-after-load 'tab-bar
    (setq tab-bar-show t))


  ;; If you installed Emacs from source, you can add the source code
  ;; directory to enable jumping to symbols defined in Emacs' C code.
  ;; (setq source-directory "~/Sources/emacs-git/")

  ;; I use Brave, and never use Chrome, so I replace chrome program with "brave"
  (setq browse-url-chrome-program (or (executable-find "chrome") (executable-find "chromium")))

  ;; Install some third-party packages. MinEmacs uses `use-package' and `straight'
  ;; for package management. It is recommended to use the same to install
  ;; additional packages. For example, to install `devdocs' you can use something
  ;; like:
  ;; (use-package devdocs
  ;;   ;; The installation recipe (from Github)
  ;;   :straight (:host github :repo "astoff/devdocs.el" :files ("*.el"))
  ;;   ;; Autoload the package when invoking these commands, note that if the
  ;;   ;; commands are already autoloaded (defined with `autoload'), this is not
  ;;   ;; needed.
  ;;   :commands devdocs-install
  ;;   ;; MinEmacs sets the `use-package-always-defer' to t, so by default, packages
  ;;   ;; are deferred to save startup time. If you want to load a package
  ;;   ;; immediately, you need to explicitly use `:demand t'.
  ;;   ;; :demand t
  ;;   ;; Set some custom variables, using the `:custom' block is recommended over
  ;;   ;; using `setq'. This will ensure calling the right setter function if it is
  ;;   ;; defined for the custom variable.
  ;;   :custom
  ;;   (devdocs-data-dir (concat minemacs-local-dir "devdocs/")))

  ;; Load additional modules
  ;; (load (concat minemacs-config-dir "modules/autocompletion"))
  ;; (load (concat minemacs-config-dir "modules/programming"))

  ;; Module: `me-tools' -- Package: `vterm'
  ;; When the libvterm present in the system is too old, you can face VTERM_COLOR
  ;; related compilation errors. Thil parameter tells `vterm' to download libvterm
  ;; for you, see the FAQ at: github.com/akermu/emacs-libvterm.
  ;; (with-eval-after-load 'vterm
  ;;   (setq vterm-module-cmake-args "-DUSE_SYSTEM_LIBVTERM=Off"))

  ;; Module: `me-natural-langs' -- Package: `jinx'
  ;; (with-eval-after-load 'jinx
  ;;   ;; Check spelling for Arabic, English and French by default.
  ;;   (setq-default jinx-languages "de en"))

  ;; The `spell-fu' configuration is obsolete now (in favor of `jinx'). However,
  ;; you can force MinEmacs to load obsolete configurations by loading them
  ;; manually. Here is an example of how to force loading an obsolete module, you
  ;; can do this here or in local.el.
  ;; (+load minemacs-obsolete-local-dir "me-spell-fu.el")
  ;; (with-eval-after-load 'spell-fu
  ;;   ;; We can use MinEmacs' helper macro `+spell-fu-register-dictionaries!'
  ;;   ;; to enable multi-language spell checking.
  ;;   (+spell-fu-register-dictionaries! "en" "fr"))

  ;; Module: `me-rss' -- Package: `elfeed'
  ;; (with-eval-after-load 'elfeed
  ;;   ;; Add news feeds for `elfeed'
  ;;   (setq elfeed-feeds
  ;;         '("https://itsfoss.com/feed"
  ;;           "https://lwn.net/headlines/rss"
  ;;           "https://linuxhandbook.com/feed"
  ;;           "https://www.omgubuntu.co.uk/feed"
  ;;           "https://this-week-in-rust.org/rss.xml"
  ;;           "https://planet.emacslife.com/atom.xml")))

  ;; Module: `me-email' -- Package: `mu4e'
  ;; (with-eval-after-load 'mu4e
  ;;   ;; Load personal aliases, a file containing aliases, for example:
  ;;   ;; alias gmail "Firstname Lastname <some.user.name@gmail.com>"
  ;;   ;; alias work  "Firstname Lastname <some.user.name@work.com>"

  ;;   ;; (setq mail-personal-alias-file (concat minemacs-config-dir "private/mail-aliases.mailrc"))

  ;;   (setq +mu4e-auto-bcc-address "always.bcc@this.email") ;; Add an email address always included as BCC

  ;;   ;; Register email accounts with mu4e
  ;;   ;; Use MinEmacs' `+mu4e-register-account' helper function to register multiple accounts
  ;;   (+mu4e-register-account
  ;;    "Google mail" ;; Account name
  ;;    "gmail" ;; Maildir
  ;;    `((user-mail-address     . "account1@gmail.com")
  ;;      (mu4e-sent-folder      . "/gmail/Sent Mail")
  ;;      (mu4e-drafts-folder    . "/gmail/Drafts")
  ;;      (mu4e-trash-folder     . "/gmail/Trash")
  ;;      ;; These settings aren't mandatory if a `msmtp' config is used.
  ;;      (smtpmail-smtp-server  . "smtp.googlemail.com")
  ;;      (smtpmail-smtp-service . 587)
  ;;      ;; Define account aliases
  ;;      (+mu4e-account-aliases . ("account1-alias@somesite.org"
  ;;                                "account1-alias@othersite.org"))
  ;;      ;; Org-msg greeting and signature
  ;;      (org-msg-greeting-fmt  . "Hi%s,")
  ;;      ;; Generate signature
  ;;      (org-msg-signature     . ,(+org-msg-make-signature
  ;;                                 "Regards," ;; Closing phrase
  ;;                                 "Firstname" ;; First name
  ;;                                 "Lastname" ;; Last name
  ;;                                 "/R&D Engineer at Some company/")))
  ;;    'default ;; Use it as default in a multi-accounts setting
  ;;    'gmail)) ;; This is a Gmail account, store it and treat it accordingly (see `me-mu4e-gmail')

  ;; Module: `me-org' -- Package: `org'
  (with-eval-after-load 'org
    ;; Set Org-mode directory
    (setq org-directory "~/work/repos/org/" ; let's put files here
          org-default-notes-file (concat org-directory "inbox.org"))
    ;; Customize Org stuff
    ;; (setq org-todo-keywords
    ;;       '((sequence "IDEA(i)" "TODO(t)" "NEXT(n)" "PROJ(p)" "STRT(s)" "WAIT(w)" "HOLD(h)" "|" "DONE(d)" "KILL(k)")
    ;;         (sequence "[ ](T)" "[-](S)" "|" "[X](D)")
    ;;         (sequence "|" "OKAY(o)" "YES(y)" "NO(n)")))

    (setq org-export-headline-levels 5))

    ;; Your Org files to include in the agenda
    ;; (setq org-agenda-files
    ;;       (mapcar
    ;;        (lambda (f) (concat org-directory f))
    ;;        '("inbox.org"
    ;;          "work.org.gpg"
    ;;          "private.org.gpg"
    ;;          "projects.org.gpg"))))

  ;; Module: `me-notes' -- Package: `denote'
  ;; (with-eval-after-load 'denote
  ;;   (setq denote-directory "~/Org/notes/"))

  ;; Module: `me-media' -- Package: `empv'
  ;; (with-eval-after-load 'empv
  ;;   ;; Set the radio channels, you can get streams from radio-browser.info
  ;;   (setq empv-radio-channels
  ;;         '(("El-Bahdja FM" . "http://webradio.tda.dz:8001/ElBahdja_64K.mp3")
  ;;           ("El-Chaabia" . "https://radio-dzair.net/proxy/chaabia?mp=/stream")
  ;;           ("Quran Radio" . "http://stream.radiojar.com/0tpy1h0kxtzuv")
  ;;           ("Algeria International" . "https://webradio.tda.dz/Internationale_64K.mp3")
  ;;           ("JOW Radio" . "https://str0.creacast.com/jowradio")
  ;;           ("Europe1" . "http://ais-live.cloud-services.paris:8000/europe1.mp3")
  ;;           ("France Iter" . "http://direct.franceinter.fr/live/franceinter-hifi.aac")
  ;;           ("France Info" . "http://direct.franceinfo.fr/live/franceinfo-hifi.aac")
  ;;           ("France Culture" . "http://icecast.radiofrance.fr/franceculture-hifi.aac")
  ;;           ("France Musique" . "http://icecast.radiofrance.fr/francemusique-hifi.aac")
  ;;           ("FIP" . "http://icecast.radiofrance.fr/fip-hifi.aac")
  ;;           ("Beur FM" . "http://broadcast.infomaniak.ch/beurfm-high.aac")
  ;;           ("Skyrock" . "http://icecast.skyrock.net/s/natio_mp3_128k"))
  ;;         ;; See: docs.invidious.io/instances/
  ;;         empv-invidious-instance "https://invidious.projectsegfau.lt/api/v1"))

  ;; Module: `me-ros' -- Package: `ros'
  ;; (with-eval-after-load 'ros
  ;;   (setq ros-workspaces
  ;;         (list
  ;;          (ros-dump-workspace
  ;;           :tramp-prefix "/docker:ros@ros-machine:"
  ;;           :workspace "~/ros_ws"
  ;;           :extends '("/opt/ros/noetic/"))
  ;;          (ros-dump-workspace
  ;;           :tramp-prefix "/docker:ros@ros-machine:"
  ;;           :workspace "~/ros2_ws"
  ;;           :extends '("/opt/ros/foxy/")))))

  ;; Module: `me-vc' -- Package: `forge'
  ;; (with-eval-after-load 'forge
  ;;   ;; To setup private Gitlab instance
  ;;   ;; 1. Add this to your ~/.gitconfig
  ;;   ;; [gitlab "gitlab.private.com/api/v4"]
  ;;   ;;   user = my.username
  ;;   ;; 2. Then create an access token on GitLab. I ticked api and write_repository, which seems to work fine so far. Put the token in ~/.authinfo.gpg
  ;;   ;; machine gitlab.private.com/api/v4 login my.user^forge password <token>
  ;;   ;; 3. Use this in your config:
  ;;   (add-to-list 'forge-alist '("gitlab.private.com" "gitlab.private.com/api/v4" "gitlab.private.com" forge-gitlab-repository)))

  ;; ;; Module: `me-vc' -- Package: `jiralib2'
  ;; ;; When `jiralib2' is enabled, do some extra stuff
  ;; (when (memq 'jiralib2 minemacs-configured-packages)
  ;;   ;; You need to set `jiralib2-url' and `jiralib2-user-login-name'
  ;;   (setq jiralib2-url "https://my-jira-server.tld/"
  ;;         jiralib2-user-login-name "my-username")

  ;;   ;; Add a hook on git-commit, so it adds the ticket number to the commit message
  ;;   (add-hook
  ;;    'git-commit-mode-hook
  ;;    (defun +jira-commit-auto-insert-ticket-id-h ()
  ;;      (when (and jiralib2-user-login-name
  ;;                 ;; Do not auto insert if the commit message is not empty (ex. amend)
  ;;                 (+first-line-empty-p))
  ;;        (goto-char (point-min))
  ;;        (insert "\n")
  ;;        (goto-char (point-min))
  ;;        (+jira-insert-ticket-id)
  ;;        (insert ": ")))))



#+end_src
** modules.el
:properties:
:header-args:emacs-lisp: :tangle ~/.minemacs.d/modules.el
:end:
#+begin_src emacs-lisp
  ;;; modules.el -*- lexical-binding: t; -*-

  ;; Copyright (C) 2022 Abdelhak Bougouffa

  ;; This file can be used to override `minemacs-modules'
  ;; and `minemacs-core-modules'

  ;;; Ordered list of enabled core modules
  ;; (setq minemacs-core-modules
  ;;       '(me-splash         ; Simple splash screen
  ;;         me-keybindings    ; Keybinding (general, which-key, hydra, ...)
  ;;         me-evil           ; Emacs as Vim (evil, evil-collection, evil-snipe, evil-numbers, ...)
  ;;         ;; me-core-ui        ; Core UI (doom-themes, modus-themes, doom-modeline, ...)
  ;;         me-completion))   ; Completion (vertico, marginalia, corfu, cape, consult, embark, ...)

  ;;; List of enabled modules
  (setq minemacs-modules
        '(me-ui             ; User interface (svg-lib, focus, mixed-pitch, ...)
          ;; me-nano           ; N Λ N O Emacs, ...
          ;; me-ai             ; AI assistant using ollama (ellama, llm, ...)
          ;; me-keybindings
          ;;me-evil
          me-completion
          me-editor         ; Editing (tempel, tempel-collection, rainbow-delimiters, expreg, drag-stuff, ...)
          me-daemon         ; Emacs daemon tweaks
          ;;me-undo           ; Better undoing (undo-fu-session, vundo, ...)
          me-multi-cursors  ; Multi-cursors editing (iedit, evil-mc, evil-iedit-state, ...)
          me-vc             ; Version control (magit, forge, core-review, diff-hl, ...)
          me-project        ; Project management (projection, compile-multi, consult-project-extra, ...)
          me-prog           ; Programming stuff (tree-sitter, eldoc-box, apheleia, editorconfig, ...)
          me-checkers       ; Static checkers (flymake-collection, flymenu, flymake-quickdef, flymake-cppcheck, ...)
          me-debug          ; Debugging tools (realgud, disaster, dape, ...)
          me-emacs-lisp     ; Emacs lisp development (parinfer-rust, macrostep, eros, helpful, ...)
          ;; me-common-lisp ; Common Lisp development (sly, sly-quicklisp, ...)
          ;; me-scheme      ; Scheme development (racket-mode, geiser, ...)
          ;; me-clojure     ; Clojure development (clojure-mode, cider, ...)
          ;; me-embedded    ; Embedded systems (embed, arduino, openocd, bitbake, dts-mode, ...)
          ;; me-robot       ; Robotics stuff (ros, robot-mode, ...)
          ;; me-data           ; Data file formats (csv, yaml, toml, json, plantuml-mode, ...)
          ;; me-math        ; Mathematics (maxima, ess, ein, code-cells, julia-mode, ...)
          ;; me-modeling    ; Modeling tools (scad-mode, modelica-mode, ...)
          me-org            ; Org-mode for life (org-contrib, org-modern, org-appear, engrave-faces, ...)
          extras/me-org-extras
          extras/me-writing-mode
          me-extra          ; Extra features (better-jumper, crux, ...)
          ;; me-notes          ; Notes & Zettelkasten (denote, consult-notes, ...)
          ;; me-email       ; Email (mu4e, mu4e-alert, org-msg, ...)
          ;; extras/me-mu4e-ui
          ;; extras/me-mu4e-gmail
          ;; extras/me-mu4e-extras
          me-rss         ; News feed (elfeed, ...)
          ;; me-lifestyle   ; *Very* opinionated lifestyle packages (awqat, ...)
          me-docs           ; Documents (pdf-tools, pdf-view-restore, nov, crdt, edraw, markdown-mode, ...)
          ;; me-calendar    ; Calendar (calfw, calfw-org, calfw-ical, ...)
          ;; me-latex          ; LaTeX (auctex, auctex-latexmk, LaTeX-preview-pane, ...)
          me-biblio         ; Bibliography & citations (citar, citar-embark, org-re-reveal-citeproc, ...)
          me-natural-langs  ; Natural language stuff (jinx, spell-fu, go-translate, eglot-ltex, ...)
          me-files          ; Files and directories (dirvish, vlf, sudo-edit, ztree, ...)
          me-tools          ; System tools (vterm, tldr, ssh-deploy, docker, logview, with-editor, ...)
          me-tty            ; Emacs from terminal (xclip, ...)
          ;; me-fun            ; Games and funny packages (xkcd, speed-type, wordel, ...)
          me-media          ; Multimedia (empv, emms, ...)
          ;; obsolete/me-tabspaces  ; Workspace separation (tabspaces, ...)
          ;; me-binary         ; Display binary files in hex or decompile them
          me-window         ; Frame & window tweaks
          me-search
          ;; obsolete/me-yasnippet
          ;;obsolete/me-org-roam
          ))
  ;;obsolete/me-lsp))       ; Good old yasnippet

  ;;; List of disabled packages
  ;; You can set `minemacs-disabled-packages' to disable some packages. For
  ;; example, if you want to use the `me-ui' module, but you want to disable the
  ;; `focus' package. You can use:
  ;; (push 'embark minemacs-disabled-packages')
  ;; (push 'eglot minemacs-disabled-packages)

  ;; Adding a package to `minemacs-disabled-packages' guarantees disabling its
  ;; corresponding `use-package' section in MinEmacs' modules. However, please
  ;; note that, if you want to completely disable a package, you need to make sure
  ;; you've also disabled its dependent packages (see `M-x straight-dependents'),
  ;; otherwise it will get installed as a dependency.
  ;;
  ;; You can also `push' ( `add-to-list') multiple packages at once (as a list).
  ;; For example, to completely disable `iedit' and its dependencies
  ;; `evil-multiedit' and `evil-iedit-state', you can use:
  ;; (push '(iedit evil-multiedit evil-iedit-state) minemacs-disabled-packages)
  (push '(cape-yasnippet treesit-auto lsp-mode) minemacs-disabled-packages)
  (push '(citar-org-roam citar tempel tempel-collection) minemacs-disabled-packages)
  (push '(org org-agenda org-modern) minemacs-disabled-packages)
  (push '(marginalia) minemacs-disabled-packages)
  (push '(flymake) minemacs-disabled-packages)
  (push '(corfu corfu-popup) minemacs-disabled-packages)
  ;;; Using the obsolete modules
  ;; You can use the obsolete packages configurations by adding the
  ;; `obsolete/me-*' modules to `minemacs-modules'. However, these modules, as
  ;; their names indicate, are OBSOLETE and NOT SUPPORTED. This is a
  ;; non-comprehensive list of obsolete modules, see "modules/obsolete/*.el" for
  ;; the full list.
  ;; (setq minemacs-modules
  ;;       (append
  ;;        minemacs-modules
  ;;        '(
  ;;          obsolete/me-blamer         ; M-x git blame
  ;;          obsolete/me-chezmoi        ; Integrate chezmoi with Emacs
  ;;          obsolete/me-cov            ; Show code coverage results (cov, ...)
  ;;          obsolete/me-eaf            ; EAF apps (browser, jupyter, file-sender, ...)
  ;;          obsolete/me-evil-escape    ; Escape without ESC (evil-escape, ...)
  ;;          obsolete/me-expand-region  ; Expand region (included as an alternative for `expreg' in non tree-sitter builds)
  ;;          obsolete/me-flycheck       ; Static checkers (flycheck, ...)
  ;;          obsolete/me-flycheck-cmake ; Flycheck + CMake
  ;;          obsolete/me-flycheck-eglot ; Flycheck + Eglot
  ;;          obsolete/me-lexic          ; Offline dictionary using sdcv
  ;;          obsolete/me-ligature       ; Ligatures (needs further customization in function of the used font)
  ;;          obsolete/me-lsp            ; LSP and DAP (lsp-mode, dap-mode, consult-lsp, lsp-pyright, ccls, ...)
  ;;          obsolete/me-netextender    ; NetExtender integration (start/stop VPN sessions from Emacs)
  ;;          obsolete/me-org-present    ; Org presentations in Emacs
  ;;          obsolete/me-org-roam       ; Org roam configuration (org-roam, consult-org-roam, ...)
  ;;          obsolete/me-projectile     ; Project management (projectile, consult-projectile, treemacs-projectile, ...)
  ;;          obsolete/me-smartparens    ; Smartparens
  ;;          obsolete/me-spell-fu       ; Spell checking (included as an alternative when `jinx' cannot be used)
  ;;          obsolete/me-tree-sitter    ; Tree-sitter module configuration (this module is automatically activated for Emacs 28 or 29+ built without treesitter support)
  ;;          obsolete/me-unicode-fonts  ; Better Unicode management mainly for non-latin fonts
  ;;          obsolete/me-writeroom      ; Replacement for `+writing-mode' (writeroom-mode, ...)
  ;;          obsolete/me-yasnippet      ; Yasnippet (yasnippet, cape-yasnippet, yasnippet-snippets, ...)
  ;;         )))

          #+end_src
* Autocompletion
:properties:
:header-args:emacs-lisp: :tangle ~/.minemacs.d/config.el
:end:
*** cape
#+begin_src emacs-lisp
  (use-package cape
    :straight t
    :demand t
    :hook ((org-mode . dorneanu/set-org-capf))
    ;; :hook ((prog-mode . dorneanu/set-basic-capf)
    ;;        (text-mode . dorneanu/set-basic-capf)
    ;;        (org-mode . dorneanu/set-basic-capf)
    ;;        ;; (go-ts-mode . dorneanu/set-go-capf)
    ;;        (lsp-completion-mode . dorneanu/set-lsp-capf))
    ;; :bind (("M-c ." . completion-at-point)
    ;;        ("M-c p" . completion-at-point)
    ;;        ("M-c t" . complete-tag)
    ;;        ("M-c d" . cape-dabbrev)
    ;;        ("M-c f" . cape-file)
    ;;        ("M-c k" . cape-keyword)
    ;;        ("M-c s" . cape-symbol)
    ;;        ("M-c a" . cape-abbrev)
    ;;        ("M-c i" . cape-ispell)
    ;;        ("M-c l" . cape-line)
    ;;        ("M-c w" . cape-dict)
    ;;        ("M-c \\" . cape-tex)
    ;;        ("M-c _" . cape-tex)
    ;;        ("M-c ^" . cape-tex)
    ;;        ("M-c &" . cape-sgml)
    ;;        ("M-c r" . cape-rfc1345))
    ;; :init
    ;; Add `completion-at-point-functions', used by `completion-at-point'.
    ;; (add-to-list 'completion-at-point-functions #'cape-history)
    ;; (add-to-list 'completion-at-point-functions #'cape-keyword)
    ;; (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    ;; (add-to-list 'completion-at-point-functions #'cape-symbol)
    ;; (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    ;; (add-to-list 'completion-at-point-functions #'cape-elisp-block)
    ;; (add-to-list 'completion-at-point-functions #'cape-file)
    :custom
    (cape-dabbrev-min-length 1)
    )

  ;; Apply the same completion keybindings to several modes
  (defun dorneanu/my-setup-completion-bindings ()
    (define-key (current-local-map) (kbd "M-c .") 'completion-at-point)
    (define-key (current-local-map) (kbd "M-c p") 'completion-at-point) ;; Duplicate, consider removing
    (define-key (current-local-map) (kbd "M-c t") 'complete-tag)
    (define-key (current-local-map) (kbd "M-c d") 'cape-dabbrev)
    (define-key (current-local-map) (kbd "M-c f") 'cape-file)
    (define-key (current-local-map) (kbd "M-c k") 'cape-keyword)
    (define-key (current-local-map) (kbd "M-c s") 'cape-symbol)
    (define-key (current-local-map) (kbd "M-c a") 'cape-abbrev)
    (define-key (current-local-map) (kbd "M-c i") 'cape-ispell)
    (define-key (current-local-map) (kbd "M-c l") 'cape-line)
    (define-key (current-local-map) (kbd "M-c w") 'cape-dict)
    (define-key (current-local-map) (kbd "M-c \\") 'cape-tex)
    (define-key (current-local-map) (kbd "M-c _") 'cape-tex)
    (define-key (current-local-map) (kbd "M-c ^") 'cape-tex)
    (define-key (current-local-map) (kbd "M-c &") 'cape-sgml)
    (define-key (current-local-map) (kbd "M-c r") 'cape-rfc1345))

  (add-hook 'prog-mode-hook 'dorneanu/my-setup-completion-bindings)
  (add-hook 'org-mode-hook 'dorneanu/my-setup-completion-bindings)

  ;; Disable company
  ;; (add-hook 'prog-mode-hook (lambda () (company-mode -1)))
  ;; (global-company-mode -1)

  ;; Set capfs for different modes
  (defun dorneanu/set-basic-capf ()

    (setq-local completion-at-point-functions
                (list (cape-capf-super #'cape-dabbrev #'cape-dict #'cape-keyword #'cape-history))))

  (defun dorneanu/set-org-capf ()
    (setq-local completion-at-point-functions
                (list (cape-capf-super #'cape-dabbrev #'yasnippet-capf))))

  (defun dorneanu/set-lsp-capf ()
    (setq-local completion-at-point-functions
                (list (cape-capf-super #'lsp-completion-at-point #'cape-dabbrev #'cape-dict #'cape-keyword))))

  (defun dorneanu/set-go-capf ()
    (setq-local completion-at-point-functions
                (list (cape-capf-super #'lsp-completion-at-point (cape-company-to-capf #'company-go)))))
#+end_src
*** corfu
Some useful resources:
- https://www.skfwe.cn/p/corfu-orderless-dabbrev-use/
- https://kristofferbalintona.me/posts/202203130102/
#+begin_src emacs-lisp
(use-package corfu
  :straight t
  :demand t
  :hook ((global-corfu-mode . corfu-popupinfo-mode)
         (lsp-completion-mode . dorneanu/corfu-setup-lsp) ; Use corfu for lsp completion
         )
  ;; Use TAB for cycling, default is `corfu-complete'.
  :bind
  (:map corfu-map
        ("TAB" . corfu-complete)
        ([tab] . corfu-complete))
  ;; :bind (("C-c . p" . completion-at-point)
  ;;        :map corfu-map
  ;;        ("TAB" . corfu-next)
  ;;        ([tab] . corfu-next)
  ;;        ("S-TAB" . corfu-previous)
  ;;        ([backtab] . corfu-previous)
  ;;        ("<escape>" . corfu-quit)
  ;;        ("<return>" . corfu-insert)
  ;;        ("M-d"      . corfu-info-documentation)
  ;;        ("M-l"      . corfu-info-location)
  ;;        ("M-."      . corfu-move-to-minibuffer))
  :custom
  (tab-always-indent 'complete)
  (completion-cycle-threshold t)      ; Always show candidates in menu

  ;; Only use `corfu' when calling `completion-at-point' or
  ;; `indent-for-tab-command'
  (corfu-auto t)
  (corfu-auto-prefix 2)
  (corfu-auto-delay 0.25)

  (corfu-min-width 50)
  (corfu-max-width corfu-min-width)     ; Always have the same width
  ;; (corfu-count 14)
  ;; (corfu-scroll-margin 4)
  (corfu-cycle t)
  (corfu-preselect 'prompt)

  ;; `nil' means to ignore `corfu-separator' behavior, that is, use the older
  ;; `corfu-quit-at-boundary' = nil behavior. Set this to separator if using
  ;; `corfu-auto' = `t' workflow (in that case, make sure you also set up
  ;; `corfu-separator' and a keybind for `corfu-insert-separator', which my
  ;; configuration already has pre-prepared). Necessary for manual corfu usage with
  ;; orderless, otherwise first component is ignored, unless `corfu-separator'
  ;; is inserted.
  (corfu-quit-at-boundary nil)
  (corfu-separator ?\s)            ; Use space
  (corfu-quit-no-match 'separator) ; Don't quit if there is `corfu-separator' inserted
  (corfu-preview-current 'insert)  ; Preview first candidate. Insert on input if only one
  (corfu-preselect-first t)        ; Preselect first candidate?
  ;; (lsp-completion-provider :none)       ; Use corfu instead for lsp completions
  :init
  (global-corfu-mode)
  :preface
  (defun corfu-enable-always-in-minibuffer ()
    "Enable Corfu in the minibuffer if Vertico/Mct are not active."
    (unless (or (bound-and-true-p mct--active) ; Useful if I ever use MCT
                (bound-and-true-p vertico--input))
      (setq-local corfu-auto nil)       ; Ensure auto completion is disabled
      (corfu-mode 1)))

  ;; Move corfu to minibuffer
  (defun corfu-move-to-minibuffer ()
    (interactive)
    (pcase completion-in-region--data
      (`(,beg ,end ,table ,pred ,extras)
       (let ((completion-extra-properties extras)
             completion-cycle-threshold completion-cycling)
         (consult-completion-in-region beg end table pred)))))
  (keymap-set corfu-map "M-m" #'corfu-move-to-minibuffer)
  (add-to-list 'corfu-continue-commands #'corfu-move-to-minibuffer)
  :config

  ;; Enable Corfu more generally for every minibuffer, as long as no other
  ;; completion UI is active. If you use Mct or Vertico as your main
  ;; minibuffer completion UI. From
  ;; https://github.com/minad/corfu#completing-with-corfu-in-the-minibuffer
  (add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer 1)

  ;; Setup lsp to use corfu for lsp completion
  (defun dorneanu/corfu-setup-lsp ()
    "Use orderless completion style with lsp-capf instead of the default lsp-passthrough."
    (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
          '(orderless)))

  ;; Let eshell also do auto-completion
  (add-hook 'eshell-mode-hook
            (lambda ()
              (setq-local corfu-auto nil)
              (corfu-mode)))

  ;; Free the RET key for less intrusive behavior.
  ;; Option 1: Unbind RET completely
  ;; (keymap-unset corfu-map "RET")
  ;; Option 2: Use RET only in shell modes
  (keymap-set corfu-map "RET" `( menu-item "" nil :filter
                                 ,(lambda (&optional _)
                                    (and (derived-mode-p 'eshell-mode 'comint-mode)
                                     #'corfu-send))))
  )
#+end_src

#+results:
: corfu-complete

****** kind-icon
#+begin_src emacs-lisp
(use-package kind-icon
  :straight
  :after corfu
  ;; :custom
  ;; (kind-icon-default-face 'corfu-default) ; Have background color be the same as `corfu' face background
  ;; (kind-icon-blend-background nil)  ; Use midpoint color between foreground and background colors ("blended")?
  ;; (kind-icon-blend-frac 0.08)
  :config
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter) ; Enable `kind-icon'
  )
#+end_src

#+results:

****** nerd-icons-corfu
#+begin_src emacs-elisp
(use-package nerd-icons-corfu
  :straight t
  :after corfu
  :init (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))
#+end_src
***** yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :straight t
    :hook (minemacs-lazy . yas-global-mode)
    :init
    (defvar yas-verbosity 2)
    :custom
    (yas-snippet-dirs nil)
    (yas-triggers-in-field t))

  ;; (use-package cape-yasnippet
  ;;   :straight (:host github :repo "elken/cape-yasnippet")
  ;;   :after cape yasnippet
  ;;   :demand t
  ;;   :hook ((prog-mode text-mode conf-mode) . +cape-yasnippet--setup-h)
  ;;   :config
  ;;   ;; To avoid auto-expanding snippets
  ;;   (plist-put cape-yasnippet--properties :exit-function #'always)
  ;;   (defun +cape-yasnippet--setup-h ()
  ;;     (when (bound-and-true-p yas-minor-mode)
  ;;       (add-to-list 'completion-at-point-functions #'cape-yasnippet))))

  (use-package yasnippet-capf
    :straight t
    :after cape
    :hook ((prog-mode text-mode conf-mode) . +cape-yasnippet--setup-h)
    :config
    (defun +cape-yasnippet--setup-h ()
      (when (bound-and-true-p yas-minor-mode)
        (add-to-list 'completion-at-point-functions #'yasnippet-capf))))


  (use-package yasnippet-snippets
    :straight t
    :after yasnippet
    :demand t)

  (use-package doom-snippets
    :straight (:host github :repo "hlissner/doom-snippets" :files ("*.el" "*"))
    :after yasnippet
    :demand t)

  (with-eval-after-load 'yasnippet
    (push "~/.minemacs.d/snippets/" yas-snippet-dirs))

  ;; (Use-package license-snippets
  ;;   :straight t
  ;;   :after yasnippet
  ;;   :demand t
  ;;   :config
  ;;   (license-snippets-init))

#+end_src
****** consult-yasnippet
Use ~consult-yasnippet~:
#+begin_src emacs-lisp
  (use-package consult-yasnippet
    :straight t
    :bind (("M-g y" . consult-yasnippet)))
#+end_src

***** embark
Finally, [[https://github.com/oantolin/embark/][embark]] is great if like me you like to interact directly with your
files (e.g., for renaming, deleting and copying) through your completion system
without having to go through =dired=.

#+begin_src emacs-lisp
  ;; Some usefull functions
  (defun cust/vsplit-file-open (f)
    (let ((evil-vsplit-window-right t))
      (evil-window-vsplit)
      (find-file f)))

  (defun cust/split-file-open (f)
    (let ((evil-split-window-below t))
      (evil-window-split)
      (find-file f)))

  (use-package embark
    :straight t
    :bind (("C-." . embark-act)
           :map embark-file-map
           ("V" . cust/vsplit-file-open)
           ("X" . cust/split-file-open))
    :config
    (define-key embark-url-map "X" #'dorneanu/embark-open-url-in-xwidget-webkit)
    )
#+end_src

Further functions:

#+begin_src emacs-lisp
  (defun dorneanu/embark-open-url-in-xwidget-webkit (url &rest args)
    "open with xwidget"
    (message "URL: " url)
    ;; Split window and focus there
    (when (stringp url)
      ;; If it's a "naked url", just try adding https: to it.
      (unless (string-match "\\`[A-Za-z]+:" url)
        (setq url (concat "https://" url)))

      ;; Split window
      (split-window-right)
      (balance-windows)
      (other-window 1)

      (xwidget-webkit-new-session url)
      (xwidget-webkit-goto-url url)
      ))

#+end_src
***** counsel
#+begin_src emacs-lisp
  (use-package counsel
    :straight t)
#+end_src
***** marginalia
#+begin_src emacs-lisp
  (use-package marginalia
    :straight t)
#+end_src
***** consult-org-roam
#+begin_src emacs-lisp
  (use-package consult-org-roam
    :straight t
    :bind (("M-g rn" . consult-org-roam-file-find)
           ("M-g rs" . consult-org-roam-search))
    :custom
    (consult-org-roam-grep-func #'consult-ripgrep)
    (consult-org-roam-buffer-narrow-key ?r) ; custom narrow key for `consult-buffer'
    (consult-org-roam-buffer-after-buffers t)
    :config
    (consult-org-roam-mode 1)
    ;; Eventually suppress previewing for certain functions
    (consult-customize consult-org-roam-forward-links :preview-key (kbd "M-.")))
#+end_src

***** vertico-multiform
#+begin_src emacs-lisp
  (use-package vertico-multiform
    :straight (:type built-in)
    :demand t
    :config
    (setq vertico-multiform-commands
          '((consult-line buffer)
            ;; (consult-buffer buffer)
            (consult-org-heading buffer)
            (consult-imenu buffer)
            (consult-project-buffer buffer)
            (consult-project-extra-find buffer)))
    ;; (setq vertico-multiform-commands
    ;;       '((consult-line
    ;;          ;; posframe
    ;;          ;; (vertico-posframe-poshandler . posframe-poshandler-frame-top-center)
    ;;          ;; (vertico-posframe-border-width . 10)
    ;;          ;; NOTE: This is useful when emacs is used in both in X and
    ;;          ;; terminal, for posframe do not work well in terminal, so
    ;;          ;; vertico-buffer-mode will be used as fallback at the
    ;;          ;; moment.
    ;;          ;; (vertico-posframe-fallback-mode . vertico-buffer-mode))
    ;;         (t posframe)))
    ;; (add-to-list 'vertico-multiform-categories
    ;;              '(jinx grid (vertico-grid-annotate . 35)))

    (vertico-multiform-mode 1))

#+end_src
* Programming
:properties:
:header-args:emacs-lisp: :tangle ~/.minemacs.d/config.el
:end:
** Visual config
*** truncate-lines
Disable truncating lines
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook (lambda () (setq truncate-lines t)))
#+end_src
*** indentation
#+begin_src emacs-lisp
  (setq-default tab-width 4
                indent-tabs-mode nil)
#+end_src
** LSP
*** COMMENT lsp-ui
#+begin_src emacs-lisp
  (use-package lsp-ui
    :after lsp
    :defer t
    :straight t
    :commands lsp-ui-mode
    :custom
    (lsp-ui-peek-always-show t)
    (lsp-ui-sideline-show-hover t)
    (lsp-ui-doc-enable t))
#+end_src
*** consult-lsp
#+begin_src emacs-lisp
  (use-package consult-lsp
    :defer t
    :after lsp
    :straight t)
#+end_src
*** treemacs-lsp
#+begin_src emacs-lisp
(use-package lsp-treemacs
  :straight t
  :defer t
  :custom
  (lsp-treemacs-theme "Iconless"))
#+end_src
** Tools
*** highlight-indent-guides
#+begin_src emacs-lisp
  (use-package highlight-indent-guides
    :straight t
    :hook (prog-mode . highlight-indent-guides-mode)
    :custom (highlight-indent-guides-method 'character))
#+end_src

*** Treesitter
Treesit is a native Emacs [[https://tree-sitter.github.io/tree-sitter/][tree-sitter]] implementation which provides a
very fast and flexible way of performing code-highlighting in Emacs.
It is built-in in Emacs 29 and newer, and I just need to tweak a couple of
variables to install grammars for different languages.
#+begin_src emacs-lisp
  (use-package treesit
    :defer t
    :straight (:type built-in)
    ;; :hook ((bash-ts-mode c-ts-mode c++-ts-mode
    ;;                      html-ts-mode js-ts-mode typescript-ts-mode
    ;;                      go-ts-mode json-ts-mode rust-ts-mode tsx-ts-mode python-ts-mode
    ;;                      css-ts-mode yaml-ts-mode) . lsp-deferred)
    :init
    (setq treesit-language-source-alist
          '((bash "https://github.com/tree-sitter/tree-sitter-bash")
            (cmake "https://github.com/uyha/tree-sitter-cmake")
            (css "https://github.com/tree-sitter/tree-sitter-css")
            (elisp "https://github.com/Wilfred/tree-sitter-elisp")
            (go "https://github.com/tree-sitter/tree-sitter-go")
            (gomod "https://github.com/camdencheek/tree-sitter-go-mod")
            (dockerfile "https://github.com/camdencheek/tree-sitter-dockerfile")
            (html "https://github.com/tree-sitter/tree-sitter-html")
            (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
            (json "https://github.com/tree-sitter/tree-sitter-json")
            (make "https://github.com/alemuller/tree-sitter-make")
            (markdown "https://github.com/ikatyang/tree-sitter-markdown")
            (python "https://github.com/tree-sitter/tree-sitter-python")
            (terraform "https://github.com/kgrotel/terraform-ts-mode")
            (toml "https://github.com/tree-sitter/tree-sitter-toml")
            (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
            (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")
            (yaml "https://github.com/ikatyang/tree-sitter-yaml"))))

  (use-package treesit-auto
    :demand t
    :straight t
    :config
    (global-treesit-auto-mode)
    (setq treesit-language-source-alist
          '((bash "https://github.com/tree-sitter/tree-sitter-bash")
            (cmake "https://github.com/uyha/tree-sitter-cmake")
            (css "https://github.com/tree-sitter/tree-sitter-css")
            (elisp "https://github.com/Wilfred/tree-sitter-elisp")
            (go "https://github.com/tree-sitter/tree-sitter-go")
            (gomod "https://github.com/camdencheek/tree-sitter-go-mod")
            (dockerfile "https://github.com/camdencheek/tree-sitter-dockerfile")
            (html "https://github.com/tree-sitter/tree-sitter-html")
            (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
            (json "https://github.com/tree-sitter/tree-sitter-json")
            (make "https://github.com/alemuller/tree-sitter-make")
            (markdown "https://github.com/ikatyang/tree-sitter-markdown")
            (python "https://github.com/tree-sitter/tree-sitter-python")
            (terraform "https://github.com/kgrotel/terraform-ts-mode")
            (toml "https://github.com/tree-sitter/tree-sitter-toml")
            (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
            (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")
            (yaml "https://github.com/ikatyang/tree-sitter-yaml"))))
#+end_src

#+results:
: t

** DSLs
*** Makefiles
#+begin_src emacs-lisp
  (defun my/local-tab-indent ()
    (setq-local indent-tabs-mode 1))
  (add-hook 'makefile-mode-hook #'my/local-tab-indent)
#+end_src
*** COMMENT Markdown
Yes, I love org-mode and I largely prefer to use it instead of
Markdown due to its far superior power and abilities. But still,
sometimes I need to use Markdown because not everyone uses org-mode,
unfortunately.
#+begin_src emacs-lisp
  (use-package markdown-mode
    :defer t
    :straight t
    :mode
    (("\\.mkd\\'" . markdown-mode)
     ("\\.mdk\\'" . markdown-mode)
     ("\\.mdx\\'" . markdown-mode))
    :hook (markdown-mode . orgtbl-mode)
    :hook (markdown-mode . visual-line-mode)
    :config
    (setq markdown-fontify-code-blocks-natively t))
#+end_src

Since most of my Markdown files are related to GitHub, I’d like to be
able to render Markdown through its API.
#+begin_src emacs-lisp
  (use-package gh-md
    :defer t
    :after markdown-mode
    :straight (:build t))
#+end_src

Sometimes, I have to work with GitHub’s markdown flavour, but I’m not
really a huge fan of writing it by hand. So instead, I’ll write it in
org-mode and then export it with ~ox-gfm~.
#+begin_src emacs-lisp
  (use-package ox-gfm
    :straight (:build t)
    :defer t
    :after (org ox))
#+end_src

Nuxt has its own flavour of Markdown, called [[https://content.nuxtjs.org/guide/writing/mdc/][MDC]] (/MarkDown Components/)
which is a godsend to write content for Nuxt websites! However, no
~mdc-mode~ existed when I began working with it, so I’m working on one.
#+begin_src emacs-lisp
  ;; (use-package mdc-mode
  ;;   :defer t
  ;;   :after markdown-mode
  ;;   :straight (mdc-mode :type git
  ;;                       :host github
  ;;                       :repo "Phundrak/mdc-mode"
  ;;                       :build t))
#+end_src

Tables of content are always nice to have for large files, just like
with the ~toc-org~ package for org-mode.
#+begin_src emacs-lisp
  (use-package markdown-toc
    :defer t
    :after markdown-mode
    :straight (:build t))
#+end_src

Lastly, ~edit-indirect~ is a package that allows to edit code blocks as
in org-mode but with other major modes, such as code blocks in
Markdown.
#+begin_src emacs-lisp
  (use-package edit-indirect
    :straight (:build t)
    :defer t)
#+end_src

*** COMMENT PKGBUILD
As I am an ArchLinux user, I sometimes have to interact with PKGBUILD
files, both from the AUR when I want to install something from there
or some I write myself.
#+begin_src emacs-lisp
  (use-package pkgbuild-mode
    :straight (:build t)
    :defer t
    :custom
    (pkgbuild-update-sums-on-save nil)
    (pkgbuild-ask-about-save nil)
    :general
    (phundrak/major-leader-key
     :keymaps 'pkgbuild-mode-map
     "c"  #'pkgbuild-syntax-check
     "i"  #'pkgbuild-initialize
     "I"  #'pkgbuild-increase-release-tag
     "m"  #'pkgbuild-makepkg
     "u"  '(:ignore :wk "update")
     "us" #'pkgbuild-update-sums-line
     "uS" #'pkgbuild-update-srcinfo))
#+end_src

*** PlantUML
#+begin_src emacs-lisp
  (use-package plantuml-mode
    :straight t
    :defer t
    :mode ("\\.\\(pum\\|puml\\)\\'" . plantuml-mode)
    :after ob
    :init
    (add-to-list 'org-babel-load-languages '(plantuml . t))
    :config
    (setq plantuml-default-exec-mode 'jar
          plantuml-jar-path "~/.local/bin/plantuml.jar"
          org-plantuml-jar-path "~/.local/bin/plantuml.jar"
          plantuml-indent-level 4))
#+end_src

*** COMMENT SSH Config files
#+begin_src emacs-lisp
  (use-package ssh-config-mode
    :defer t
    :straight t)
#+end_src

*** COMMENT Systemd
#+begin_src emacs-lisp
  (use-package systemd
    :defer t
    :straight t)
#+end_src

*** COMMENT Tmux config
#+begin_src emacs-lisp
  (use-package tmux-mode
    :defer t
    :straight (tmux-mode :type git :host github :repo "nverno/tmux-mode")
    :mode (("tmux\\.conf\\'" . tmux-mode)))
#+end_src

*** Toml
#+begin_src emacs-lisp
  (use-package toml-mode
    :straight t
    :defer t
    :mode "/\\(Cargo.lock\\|\\.cargo/config\\)\\'")
#+end_src

*** Yaml
#+begin_src emacs-lisp
  (use-package yaml-mode
    :straight t
    :defer t
    :mode "\\.yml\\'"
    :mode "\\.yaml\\'")
#+end_src

** Languages
*** Golang
#+begin_src emacs-lisp
  ;; (use-package go-ts-mode
  ;;   :hook
  ;;   (go-ts-mode . lsp-deferred)
  ;;   (go-ts-mode . apheleia-mode)
  ;;   :bind (:map go-ts-mode-map
  ;;               ("M-?" . godoc-at-point)
  ;;               ("M-." . godef-jump)
  ;;               ("M-*" . pop-tag-mark)  ;; Jump back after godef-jump
  ;;               ("C-c m r" . go-run))
  ;;   :config
  ;;   (setq go-ts-mode-indent-offset 4))


  (use-package company-go
    :straight t
    :after (company go-mode))

  (use-package go-mode
    :straight t
    :mode "\\.go\\'"
    :hook
    ;; (before-save . gofmt-before-save)
    (go-mode . apheleia-mode)
    :bind (:map go-mode-map
                ("M-?" . godoc-at-point)
                ("M-." . xref-find-definitions)
                ("M-_" . xref-find-references)
                ;; ("M-*" . pop-tag-mark) ;; Jump back after godef-jump
                ("C-c m r" . go-run))
    :custom
    (gofmt-command "goimports"))

  ;; Add company backends
  ;; (defun golang/set-company-backends ()
  ;;  (setq-local company-backends '((company-capf company-go))))

  ;; (add-hook 'go-mode-hook #'golang/set-company-backends)
  ;; (add-hook 'go-ts-mode-hook #'golang/set-company-backends)

  ;; Setup capf
  (add-hook 'go-ts-mode-hook (lambda ()
                               (setq-local completion-at-point-functions
                                           (list (cape-capf-super #'cape-dabbrev #'lsp-completion-at-point (cape-company-to-capf #'company-go) (cape-company-to-capf #'company-yasnippet))))))
  (add-hook 'go-mode-hook (lambda ()
                            (setq-local completion-at-point-functions
                                        (list (cape-capf-super #'cape-dabbrev #'lsp-completion-at-point (cape-company-to-capf #'company-go) (cape-company-to-capf #'company-yasnippet))))))

  ;; (add-hook 'go-mode-hook (lambda ()
  ;;                         (flycheck-add-next-checker 'golangci-lint)
  ;;                         (flycheck-add-next-checker 'go-vet)))

  (use-package gotest
    :straight t
    :after go-mode
    :bind (:map go-mode-map
                ("C-c t f" . go-test-current-file)
                ("C-c t t" . go-test-current-test)
                ("C-c t j" . go-test-current-project)
                ("C-c t b" . go-test-current-benchmark)
                ("C-c t c" . go-test-current-coverage)
                ("C-c t x" . go-run)))

  (use-package go-guru
    :straight t
    :hook
    (go-mode . go-guru-hl-identifier-mode))

  (use-package go-projectile
    :straight t
    :after (projectile go-mode))

  (use-package flycheck-golangci-lint
    :straight t
    :hook
    (go-mode . flycheck-golangci-lint-setup))

  (use-package go-eldoc
    :straight t
    :hook
    (go-mode . go-eldoc-setup))

  (use-package go-tag
    :straight t
    :bind (:map go-mode-map
                ("C-c t a" . go-tag-add)
                ("C-c t r" . go-tag-remove))
    :init (setq go-tag-args (list "-transform" "camelcase")))

  (use-package go-fill-struct
    :straight t)

  (use-package go-impl
    :straight t)
#+end_src

*** Python
:end:
First, we need to set up the main Python mode. With this, we’ll also
add Python to the list of LSP languages and to the list of languages
org-babel supports.
#+begin_src emacs-lisp
  (use-package python
    :defer t
    :straight t
    :after ob
    :mode (("SConstruct\\'" . python-mode)
           ("SConscript\\'" . python-mode)
           ("[./]flake8\\'" . conf-mode)
           ("/Pipfile\\'"   . conf-mode))
    :init
    (setq python-indent-guess-indent-offset-verbose nil)
    (add-hook 'python-mode-local-vars-hook #'lsp)
    :config
    (setq python-indent-guess-indent-offset-verbose nil)
    (when (and (executable-find "python3")
               (string= python-shell-interpreter "python"))
      (setq python-shell-interpreter "python3")))
#+end_src
**** pytest
#+begin_src emacs-lisp
  (use-package pytest
    :defer t
    :straight t
    :commands (pytest-one
               pytest-pdb-one
               pytest-all
               pytest-pdb-all
               pytest-last-failed
               pytest-pdb-last-failed
               pytest-module
               pytest-pdb-module)
    :config
    (add-to-list 'pytest-project-root-files "setup.cfg"))
#+end_src
**** poetry
#+begin_src emacs-lisp
  (use-package poetry
    :defer t
    :straight t
    :commands (poetry-venv-toggle
               poetry-tracking-mode)
    :config
    (setq poetry-tracking-strategy 'switch-buffer)
    (add-hook 'python-mode-hook #'poetry-tracking-mode))
#+end_src

**** pip-requirements
This package will bring a new major mode for editing pip requirements.
#+begin_src emacs-lisp
  (use-package pip-requirements
    :defer t
    :straight t)
#+end_src

#+end_src
**** pipenv
This is a [[https://github.com/pypa/pipenv][pipenv]] porcelain
#+begin_src emacs-lisp
  (use-package pipenv
    :defer t
    :straight t
    :commands (pipenv-activate
               pipenv-deactivate
               pipenv-shell
               pipenv-open
               pipenv-install
               pipenv-uninstall)
    :hook (python-mode . pipenv-mode)
    :init (setq pipenv-with-projectile nil))
#+end_src
**** pyenv
This integrates ~pyenv~ into ~python-mode~.
#+begin_src emacs-lisp
  (use-package pyenv
    :defer t
    :straight t
    :config
    (add-hook 'python-mode-hook #'pyenv-track-virtualenv)
    (add-to-list 'global-mode-string
                 '(pyenv-virtual-env-name (" venv:" pyenv-virtual-env-name " "))
                 'append))
#+end_src
**** pyenv-mode
Let’s also add a mode for ~pyenv~:
#+begin_src emacs-lisp
  (use-package pyenv-mode
    :defer t
    :after python
    :straight t
    :if (executable-find "pyenv")
    :commands (pyenv-mode-versions))
#+end_src
**** pyimport
This package automatically imports packages we forgot to import.
#+begin_src emacs-lisp
  (use-package pyimport
    :defer t
    :straight t)
#+end_src
**** py-isort
On the other hand, this one sorts our imports to make them more readable.
#+begin_src emacs-lisp
  (use-package py-isort
    :defer t
    :straight t)
#+end_src
**** counsel-pydoc
Access pydoc through counsel.
#+begin_src emacs-lisp
  (use-package counsel-pydoc
    :defer t
    :straight t)
#+end_src
**** sphinx-doc
This generates Python documentation that is meant to be compatible
with Sphinx, a documentation generation for Python.
#+begin_src emacs-lisp
  (use-package sphinx-doc
    :defer t
    :straight t
    :init
    (add-hook 'python-mode-hook #'sphinx-doc-mode))
#+end_src
**** COMMENT cython-mode
Cython is a Python to C compiler. It also introduces the extended
Cython programming language which makes writing C for Python easier.
This package is a major mode for the Cython programming language.
#+begin_src emacs-lisp
  (use-package cython-mode
    :defer t
    :straight t
    :mode "\\.p\\(yx\\|x[di]\\)\\'"
    :config
    (setq cython-default-compile-format "cython -a %s"))
#+end_src
**** COMMENT flycheck-cython
Flycheck can also be enabled for Cython:
#+begin_src emacs-lisp
  (use-package flycheck-cython
    :defer t
    :straight t
    :after cython-mode)
#+end_src
**** blacken
Blacken uses the ~black~ formatter backend to format Python buffers.
#+begin_src emacs-lisp
  (use-package blacken
    :defer t
    :straight t
    :init
    (add-hook 'python-mode-hook #'blacken-mode))
#+end_src
**** pyright
Finally, I’m using [[https://github.com/microsoft/pyright][Pyright]] as my LSP backend for Python.
#+begin_src emacs-lisp
  ;; (use-package lsp-pyright
  ;;   :after lsp-mode
  ;;   :defer t
  ;;   :straight (:buidl t))
#+end_src
*** Terraform
#+begin_src emacs-lisp
  (use-package terraform-mode
    :straight t
    :hook
    (terraform-mode . apheleia-mode)
    :config
    (setq terraform-indent-level 2
          terraform-format-on-save t))

  ;; Configure company
  (use-package company-terraform
    :straight t
    :after (company lsp)
    :defer t)

  ;; Setup capf
  ;; (add-hook 'terraform-mode-hook (lambda ()
  ;;                                  (setq-local completion-at-point-functions
  ;;                                              (list (cape-capf-super #'cape-dabbrev #'lsp-completion-at-point (cape-company-to-capf #'company-terraform))))))

  ;; Setup LSP
  ;; (with-eval-after-load 'lsp
  ;;   (lsp-register-client
  ;;    (make-lsp-client :new-connection (lsp-stdio-connection '("~/.bin/terraform-lsp" "-enable-log-file"))
  ;;                     :major-modes '(terraform-mode)
  ;;                     :server-id 'terraform-ls))

  ;;   ;; Disable tfls
  ;;   (setq lsp-disabled-clients '(tfls))

  ;;   ;; Enable links
  ;;   (setq lsp-enable-links t)

  ;;   ;; Pre-fill fields
  ;;   (setq lsp-terraform-ls-prefill-required-fields t)

  ;;   ;; Show references
  ;;   (setq lsp-terraform-ls-enable-show-reference t)

  ;;   (add-hook 'terraform-mode-hook #'lsp-deferred)
  ;;  )
#+end_src

*** Web programming
**** emmet
[[https://emmet.io/][Emmet]] is a powerful templating engine that can generate through simple
CSS-like expression some HTML to avoid the user writing everything by
hand.
#+begin_src emacs-lisp
  (use-package emmet-mode
    :straight t
    :defer t
    :hook ((css-mode  . emmet-mode)
           (html-mode . emmet-mode)
           (web-mode  . emmet-mode)
           (sass-mode . emmet-mode)
           (scss-mode . emmet-mode)
           (web-mode  . emmet-mode))
    :config

    )
#+end_src
**** impatient-mode
Impatient mode serves web buffers live over HTTP, including your live
modifications.
#+begin_src emacs-lisp
  (use-package impatient-mode
    :straight t
    :defer t)
#+end_src
** flycheck
#+begin_src emacs-lisp
(use-package flycheck
  :straight t
  :hook (prog-mode . flycheck-mode))

(use-package consult-flycheck
  :straight t
  :bind (("M-g f" . consult-flycheck)))
#+end_src
** VC
*** forge
#+begin_src emacs-lisp
(use-package forge
  :straight t
  :after magit)
#+end_src
* Buffer Management
:properties:
:header-args:emacs-lisp: :tangle ~/.minemacs.d/config.el
:end:
** popper
Used for popups (eshell, scratch buffer etc.)
#+begin_src emacs-lisp
  (use-package popper
    :straight t
    :bind (("C-#"   . popper-toggle)
           ("M-#"   . popper-cycle)
           ("C-M-#" . popper-toggle-type))
    :init
    (setq popper-reference-buffers
          '("\\*Messages\\*"
            "Output\\*$"
            "\\*Async Shell Command\\*"
            help-mode
            compilation-mode))
    (popper-mode +1)
    (popper-echo-mode +1))                ; For echo area hints
#+end_src
* UI
:properties:
:header-args:emacs-lisp: :tangle ~/.minemacs.d/config.el
:end:
** Theme
Install additional themes:

#+begin_src emacs-lisp
;; (use-package doom-themes
;;   :straight (:build t)
;;   :defer t
;;   ;; :init (load-theme 'doom-nord-aurora t)
;;  )

;; Install kaolin themes
(use-package kaolin-themes
  :straight t
  :defer t)

;; Install moe-theme
(use-package moe-theme
  :straight t)

(use-package ef-themes
  :straight t)

(use-package modus-themes
  :straight t)

(use-package solarized-theme
  :straight t)

(use-package lambda-themes
  :straight (:type git :host github :repo "lambda-emacs/lambda-themes")
  :custom
  (lambda-themes-set-italic-comments t)
  (lambda-themes-set-italic-keywords t)
  (lambda-themes-set-variable-pitch t))

;; Install sanityinc tomorrow
(use-package color-theme-sanityinc-tomorrow
  :straight t)
#+end_src
** alpha-background
#+begin_src emacs-lisp
  ;; From https://www.emacswiki.org/emacs/TransparentEmacs
  (set-frame-parameter (selected-frame) 'alpha '(95 . 70))
  (add-to-list 'default-frame-alist '(alpha . (95 . 70)))

  (defun dorneanu/toggle-transparency ()
    (interactive)
    (let ((alpha (frame-parameter nil 'alpha)))
      (set-frame-parameter
       nil 'alpha
       (if (eql (cond ((numberp alpha) alpha)
                      ((numberp (cdr alpha)) (cdr alpha))
                      ;; Also handle undocumented (<active> <inactive>) form.
                      ((numberp (cadr alpha)) (cadr alpha)))
                100)
           '(95 . 70) '(100 . 100)))))
#+end_src
** COMMENT spacious-padding
Make the echo / minibuffer area smaller:

#+begin_src emacs-lisp
  (with-eval-after-load 'spacious-padding
      (plist-put spacious-padding-widths :internal-border-width 1))
#+end_src

** COMMENT solaire-mode
I'm still not sure if I like it
#+begin_src emacs-lisp
  (use-package solaire-mode
    :straight t)
#+end_src
** display-line-numbers
Don't use relative numbers
#+begin_src emacs-lisp
  (with-eval-after-load 'display-line-numbers
    (setq display-line-numbers-type 'absolute))
#+end_src
** treemacs
#+begin_src emacs-lisp
  (use-package treemacs
    :straight t
    :custom
    (treemacs-persist-file (concat minemacs-local-dir "treemacs/persist.el"))
    (treemacs-last-error-persist-file (concat minemacs-local-dir "treemacs/last-error-persist.el"))
    (treemacs-width 40)
    :config
    ;; Use the same height for the root node (project directory)
    (set-face-attribute 'treemacs-root-face nil :height 1.0))

  (use-package treemacs-nerd-icons
    :straight t
    :after treemacs nerd-icons
    :demand t
    :config
    (treemacs-load-theme "nerd-icons"))

  (use-package treemacs-evil
    :straight t
    :after (evil))

  (use-package treemacs-projectile
    :straight t
    :after (treemacs))
#+end_src
** visual-fill-column
#+begin_src emacs-lisp
  (use-package visual-fill-column
    :straight t
    :demand t)
#+end_src
** tab-line-mode
Disable tab-line-mode for specific modes/buffers:
#+begin_src emacs-lisp
(use-package tab-line
  :straight (:type built-in)
  :demand t
  :config
  ;; Exclude tab-line in specific modes
  (add-to-list 'tab-line-exclude-modes 'dired-mode)
  (add-to-list 'tab-line-exclude-modes 'imenu-list-major-mode)
  (add-to-list 'tab-line-exclude-modes 'magit-revision-mode)
  (add-to-list 'tab-line-exclude-modes 'eshell-mode)
  ;; Some UI changes
  (setq tab-line-new-button-show nil)  ;; do not show add-new button
  (setq tab-line-close-button-show t)  ;; do not show close button
  (setq tab-line-separator " ")  ;; set it to empty
  ;; (defvar my/tab-height 15)
  ;; (defvar my/tab-left (powerline-wave-right 'tab-line nil my/tab-height))
  ;; (defvar my/tab-right (powerline-wave-left nil 'tab-line my/tab-height))

  ;; (defun my/tab-line-tab-name-buffer (buffer &optional _buffers)
  ;;   (require 'powerline)
  ;;   (powerline-render (list my/tab-left
  ;;                           (format "%s" (buffer-name buffer))
  ;;                           my/tab-right)))
  ;; (setq tab-line-tab-name-function #'my/tab-line-tab-name-buffer)

  ;; tab color settings
  (set-face-attribute 'tab-line nil ;; background behind tabs
                      :background "gray20"
                      :foreground "gray60" :distant-foreground "gray50"
                      :height 1.0 :box nil)
  (set-face-attribute 'tab-line-tab nil ;; active tab in another window
                      :inherit 'tab-line
                      :foreground "gray70" :background "gray90" :box nil)
  (set-face-attribute 'tab-line-tab-current nil ;; active tab in current window
                      :background "#b34cb3" :foreground "white" :box nil)
  (set-face-attribute 'tab-line-tab-inactive nil ;; inactive tab
                      :background "gray60" :foreground "black" :box nil)
  (set-face-attribute 'tab-line-highlight nil ;; mouseover
                      :background "white" :foreground 'unspecified)
  (global-tab-line-mode 1))
#+end_src

* Editing
:properties:
:header-args:emacs-lisp: :tangle ~/.minemacs.d/config.el
:end:
** Searching
*** swiper
Extended ~isearch~
#+begin_src emacs-lisp
  (use-package swiper
    :straight t
    :bind (("M-g s s" . swiper)
           ("M-g s ."   . swiper-all-thing-at-point))
    :config
    ;; Recenter afer jump
    (setq swiper-action-center t))
#+end_src

** rg.el
#+begin_src emacs-lisp
  (use-package rg
    :straight t
    :config
    (rg-enable-default-bindings)
    ;; Not sure if I really need this
    (rg-define-toggle "--multiline --multiline-dotall" "u")
    (rg-define-toggle "--word-regexp" "w")
    (rg-define-toggle "--files-with-matches" "L")

    ;; Highlight longer
    (setq next-error-highlight-no-select t)

    ;; Custom searches
    ;; search in org roam folder
    (rg-define-search my/rg-org-roam-directory
                      :query ask
                      :format regexp
                      :files "everything"
                      :dir org-roam-directory
                      :confirm prefix)

    ;; search in org roam folder where I have transcripts from the Huberman Lab
    (rg-define-search my/rg-org-roam-directory-huberman
                      :query ask
                      :format regexp
                      :files "everything"
                      :dir (concat org-roam-directory "/rez/huberman-lab")
                      :confirm prefix)

    (setq dotemacs-directory "/cs/priv/repos/dotemacs")
    (rg-define-search my/rg-dotemacs
                      :query ask
                      :format regexp
                      :files "everything"
                      :dir dotemacs-directory
                      :confirm prefix)

    (add-hook 'next-error-hook #'recenter)
    (add-hook 'next-error-hook #'focus-mode))
#+end_src

Configure custom searches
#+begin_src emacs-lisp
  ;; search in org roam folder
  (rg-define-search my/rg-org-roam-directory
                    :query ask
                    :format regexp
                    :files "everything"
                    :dir org-roam-directory
                    :confirm prefix)

  ;; search in org roam folder where I have transcripts from the Huberman Lab
  (rg-define-search my/rg-org-roam-directory-huberman
                    :query ask
                    :format regexp
                    :files "everything"
                    :dir (concat org-roam-directory "/rez/huberman-lab")
                    :confirm prefix)

  (setq dotemacs-directory "/cs/priv/repos/dotemacs")
  (rg-define-search my/rg-dotemacs
                    :query ask
                    :format regexp
                    :files "everything"
                    :dir dotemacs-directory
                    :confirm prefix)
#+end_src

** COMMENT evil
*** evil-surround
#+begin_src emacs-lisp
  (use-package evil-surround
    :straight t
    :demand t
    :config
    (global-evil-surround-mode 1))
#+end_src
** meow
#+begin_src emacs-lisp
(use-package meow
  :straight t
  :config
  (meow-setup)
  (meow-global-mode 1))

(defun meow-setup ()
  (interactive)
  (require 'meow)
  (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
  (meow-motion-overwrite-define-key
   '("j" . meow-next)
   '("k" . meow-prev)
   '("<escape>" . ignore))
  (meow-leader-define-key
   ;; SPC j/k will run the original command in MOTION state.
   '("j" . "H-j")
   '("k" . "H-k")
   ;; Use SPC (0-9) for digit arguments.
   '("1" . meow-digit-argument)
   '("2" . meow-digit-argument)
   '("3" . meow-digit-argument)
   '("4" . meow-digit-argument)
   '("5" . meow-digit-argument)
   '("6" . meow-digit-argument)
   '("7" . meow-digit-argument)
   '("8" . meow-digit-argument)
   '("9" . meow-digit-argument)
   '("0" . meow-digit-argument)
   '("/" . meow-keypad-describe-key)
   '("?" . meow-cheatsheet))
  (meow-normal-define-key
   '("0" . meow-expand-0)
   '("9" . meow-expand-9)
   '("8" . meow-expand-8)
   '("7" . meow-expand-7)
   '("6" . meow-expand-6)
   '("5" . meow-expand-5)
   '("4" . meow-expand-4)
   '("3" . meow-expand-3)
   '("2" . meow-expand-2)
   '("1" . meow-expand-1)
   '("-" . negative-argument)
   '(";" . meow-reverse)
   '("," . meow-inner-of-thing)
   '("." . meow-bounds-of-thing)
   '("[" . meow-beginning-of-thing)
   '("]" . meow-end-of-thing)
   '("a" . meow-append)
   '("A" . meow-open-below)
   '("ä" . meow-kill-whole-line)
   '("b" . meow-back-word)
   '("B" . meow-back-symbol)
   '("c" . meow-change)
   '("d" . meow-delete)
   '("D" . meow-backward-delete)
   '("e" . meow-next-word)
   '("E" . meow-next-symbol)
   '("f" . meow-find)
   '("g" . meow-cancel-selection)
   '("G" . meow-grab)
   '("h" . meow-left)
   '("H" . meow-left-expand)
   '("i" . meow-insert)
   '("I" . meow-open-above)
   '("j" . meow-next)
   '("J" . meow-next-expand)
   '("k" . meow-prev)
   '("K" . meow-prev-expand)
   '("l" . meow-right)
   '("L" . meow-right-expand)
   '("m" . meow-join)
   '("n" . meow-search)
   '("o" . meow-block)
   ;; '("O" . meow-to-block)
   '("p" . meow-yank)
   '("q" . meow-quit)
   '("Q" . meow-goto-line)
   '("r" . meow-replace)
   '("R" . meow-swap-grab)
   '("s" . meow-kill)
   '("t" . meow-till)
   '("u" . meow-undo)
   '("U" . meow-undo-in-selection)
   '("v" . meow-visit)
   '("w" . meow-mark-word)
   '("W" . meow-mark-symbol)
   '("x" . meow-line)
   '("X" . meow-goto-line)
   '("y" . meow-save)
   '("Y" . meow-sync-grab)
   '("z" . meow-pop-selection)
   '("'" . repeat)
   '("<escape>" . ignore)))
#+end_src
*** meow for org
#+begin_src emacs-lisp
;; From https://aatmunbaxi.netlify.app/comp/meow_state_org_speed/
(setq meow-org-motion-keymap (make-keymap))
(meow-define-state org-motion
  "Org-mode structural motion"
  :lighter "[O]"
  :keymap meow-org-motion-keymap)

(meow-define-keys 'org-motion
  '("<escape>" . meow-normal-mode)
  '("i" . meow-insert-mode)
  '("g" . meow-normal-mode)
  '("u" .  meow-undo)
  ;; Moving between headlines
  '("k" .  org-previous-visible-heading)
  '("j" .  org-next-visible-heading)
  ;; Moving between headings at the same level
  '("p" .  org-backward-heading-same-level)
  '("n" .  org-forward-heading-same-level)
  ;; Moving subtrees themselves
  '("K" .  org-subtree-up)
  '("J" .  org-subtree-down)
  ;; Subtree de/promotion
  '("L" .  org-demote-subtree)
  '("H" .  org-promote-subtree)
  ;; Completion-style search of headings
  '("v" .  consult-org-heading)
  ;; Setting subtree metadata
  '("l" .  org-set-property)
  '("t" .  org-todo)
  '("d" .  org-deadline)
  '("s" .  org-schedule)
  '("e" .  org-set-effort)
  ;; Refiling
  '("rv" .  +org/refile-to-visible)
  '("rf" .  +org/refile-to-current-file)
  '("rr" .  org-refile)
  ;; Block navigation
  '("b" .  org-previous-block)
  '("f" .  org-next-block)
  ;; Narrowing/widening
  '("N" .  org-narrow-to-subtree)
  '("W" .  widen))

(meow-define-keys 'normal
  '("O" . meow-org-motion-mode))
#+end_src

** smartparens
#+begin_src emacs-lisp
(use-package smartparens-config
  :after smartparens
  :config
  ;; don't create a pair with single quote in minibuffer
  (sp-local-pair 'minibuffer-inactive-mode "'" nil :actions nil)

  ;; indent after inserting any kinds of parens
  (defun my/smartparens-pair-newline-and-indent (id action context)
    (save-excursion
      (newline)
      (indent-according-to-mode))
    (indent-according-to-mode))
  (sp-pair "(" nil :post-handlers
           '(:add (my/smartparens-pair-newline-and-indent "RET")))
  (sp-pair "{" nil :post-handlers
           '(:add (my/smartparens-pair-newline-and-indent "RET")))
  (sp-pair "[" nil :post-handlers
           '(:add (my/smartparens-pair-newline-and-indent "RET")))
  )

(use-package smartparens
  :straight t
  :hook (after-init . show-smartparens-global-mode)
  :bind (:map smartparens-mode-map
              ;; paredit bindings
              ("C-M-f" . sp-forward-sexp)
              ("C-M-b" . sp-backward-sexp)
              ("C-M-d" . sp-down-sexp)
              ("C-M-u" . sp-backward-up-sexp)
              ("C-M-n" . sp-up-sexp)
              ("C-M-p" . sp-backward-down-sexp)
              ;; ("M-s" . sp-splice-sexp)
              ("M-<up>" . sp-splice-sexp-killing-backward)
              ("M-<down>" . sp-splice-sexp-killing-forward)
              ;; ("M-r" . sp-splice-sexp-killing-around)
              ("M-(" . sp-wrap-round)
              ("M-{" . sp-wrap-curly)
              ("C-)" . sp-forward-slurp-sexp)
              ("C-<right>" . sp-forward-slurp-sexp)
              ("C-}" . sp-forward-barf-sexp)
              ("C-<left>" . sp-forward-barf-sexp)
              ("C-(" . sp-backward-slurp-sexp)
              ("C-M-<left>" . sp-backward-slurp-sexp)
              ("C-{" . sp-backward-barf-sexp)
              ("C-M-<right>" . sp-backward-barf-sexp)
              ;; ("M-S" . sp-split-sexp)
              ;; mine
              ("C-M-k" . sp-kill-sexp)
              ("C-M-w" . sp-copy-sexp)
              ("M-@" . sp-mark-sexp)
              )
  :diminish smartparens-mode
  :init
  (setq sp-show-pair-delay 0.2
        ;; avoid slowness when editing inside a comment for modes with
        ;; parenthesized comments (e.g. coq)
        sp-show-pair-from-inside nil
        sp-cancel-autoskip-on-backward-movement nil
        sp-highlight-pair-overlay nil
        sp-highlight-wrap-overlay nil
        sp-highlight-wrap-tag-overlay nil)
  ;; :config
  )
#+end_src
* Reading
:properties:
:header-args:emacs-lisp: :tangle ~/.minemacs.d/config.el
:end:
** olivetti
#+begin_src emacs-lisp
  (use-package olivetti
    :straight t
    :custom
    (olivetti-body-width 0.68))
#+end_src

** expand-region
#+begin_src emacs-lisp
  (use-package expand-region
    :straight t
    :bind
    (("M-g =" . er/expand-region)
     ("M-g - " . er/contract-region)
     :map mode-specific-map
     :prefix-map region-prefix-map
     :prefix "r"
     ("(" . er/mark-inside-pairs)
     (")" . er/mark-outside-pairs)
     ("'" . er/mark-inside-quotes)
     ([34] . er/mark-outside-quotes) ; it's just a quotation mark
     ("o" . er/mark-org-parent)
     ("u" . er/mark-url)
     ("b" . er/mark-org-code-block)
     ("." . er/mark-method-call)
     (">" . er/mark-next-accessor)
     ("w" . er/mark-word)
     ("d" . er/mark-defun)
     ("e" . er/mark-email)
     ("," . er/mark-symbol)
     ("<" . er/mark-symbol-with-prefix)
     (";" . er/mark-comment)
     ("s" . er/mark-sentence)
     ("S" . er/mark-text-sentence)
     ("p" . er/mark-paragraph)
     ("P" . er/mark-text-paragraph)))
#+end_src
** epub
#+begin_src emacs-lisp
  (use-package nov
    :straight t
    :defer t
    :mode ("\\.epub\\'" . nov-mode)
    :config
    (setq nov-text-width 95))
#+end_src
* Navigation
** link-hint
#+begin_src emacs-lisp
(use-package link-hint
  :straight t
  :demand t
  :bind (("C-c l o" . link-hint-open-link)
         ("C-c l c" . link-hint-copy-link)))
#+end_src
* Files
:properties:
:header-args:emacs-lisp: :tangle ~/.minemacs.d/config.el
:end:
** dirvish
#+begin_src emacs-lisp
(use-package dirvish
  :straight t
  :init
  (dirvish-override-dired-mode)
  :custom
  (dirvish-attributes '(subtree-state nerd-icons file-size))
  (dirvish-quick-access-entries ; It's a custom option, `setq' won't work
   '(("r" "~/work/repos"   "Repos (work)")
     ("b" "~/sync/blog"    "Blog")))
  :config
  (setq dirvish-side-width 40)
  ;; (setq dirvish-attributes '(vc-state subtree-state all-the-icons collapse git-msg file-time file-size))
  :bind (("C-c a d" . dirvish-side)
         :map dirvish-mode-map ; Dirvish inherits `dired-mode-map'
         ("a"   . dirvish-quick-access)
         ("f"   . dirvish-file-info-menu)
         ("y"   . dirvish-yank-menu)
         ("N"   . dirvish-narrow)
         ("^"   . dirvish-history-last)
         ("h"   . dirvish-history-jump) ; remapped `describe-mode'
         ("s"   . dirvish-quicksort)    ; remapped `dired-sort-toggle-or-edit'
         ("v"   . dirvish-vc-menu)      ; remapped `dired-view-file'
         ("TAB" . dirvish-subtree-toggle)
         ("M-f" . dirvish-history-go-forward)
         ("M-b" . dirvish-history-go-backward)
         ("M-l" . dirvish-ls-switches-menu)
         ("M-m" . dirvish-mark-menu)
         ("M-t" . dirvish-layout-toggle)
         ("M-s" . dirvish-setup-menu)
         ("M-e" . dirvish-emerge-menu)
         ("M-j" . dirvish-fd-jump)))
#+end_src

* Helpful
:properties:
:header-args:emacs-lisp: :tangle ~/.minemacs.d/config.el
:end:
** leo
#+begin_src emacs-lisp
  (use-package leo
    :straight t
    :defer t
    :bind (("M-g .l" . leo-translate-word)))
#+end_src
** dict.cc
#+begin_src emacs-lisp
  (use-package dictcc
    :straight t
    :defer t
    :init
    :bind (("M-g .d" . dictcc)))
#+end_src
** wordreference
#+begin_src emacs-lisp
  (use-package wordreference
    :straight t
    :defer t
    :bind (:map wordreference-mode-map
                ("S" . wordreference-switch-source-target-and-search))
    :config
    (setq
     wordreference-source-lang "en"
     wordreference-target-lang "de")
    :bind (("M-g .w" . wordreference-search)))

  (add-hook 'wordreference-mode-hook #'turn-off-evil-mode)
#+end_src
** password-store
#+begin_src emacs-lisp
  (use-package auth-source
    :straight t)
  (use-package password-store
    :straight t)
  (use-package pass
    :straight t)
#+end_src
** COMMENT Screenshots
*** emacsshot
From https://gitlab.com/marcowahl/emacsshot
#+begin_src emacs-lisp
  (use-package emacsshot
    :straight t
    :bind(("C-x a s f" . my/emacsshot-snap-frame)
          ("C-x a s w" . my/emacsshot-snap-window))
    :config
    (defun copy-file-content-to-clipboard (file-path)
      (shell-command (format "xclip -selection clipboard -t image/png -i %s" file-path)))
    (defun my/emacsshot-snap-window ()
      (interactive)
      (emacsshot-snap-window)
      (copy-file-content-to-clipboard "~/emacsshot.png")
      )
    (defun my/emacsshot-snap-frame ()
      (interactive)
      (emacsshot-snap-frame)
      (copy-file-content-to-clipboard "~/emacsshot.png")
      ))
#+end_src

** Misc
*** Keycast
In case I am sharing my screen with people and I want to show which
functions are called on my keystrokes since I don’t exactly use
standard keybindings.

#+begin_src emacs-lisp
  (use-package keycast
    :defer t
    :straight t
    :config
    (define-minor-mode keycast-mode
      "Show current command and its key binding in the mode line."
      :global t
      (if keycast-mode
          (add-hook 'pre-command-hook 'keycast--update t)
        (remove-hook 'pre-command-hook 'keycast--update)))
    (add-to-list 'global-mode-string '("" mode-line-keycast " ")))
#+end_src
** Hydra
Some inspirations from https://github.com/rememberYou/.emacs.d/blob/master/config.org
#+begin_src emacs-lisp
  (use-package hydra
    :straight t)

  (use-package hydra-examples
    :ensure nil)

  (use-package major-mode-hydra
    :straight t
    :after hydra
    :preface
    (defun with-alltheicon (icon str &optional height v-adjust face)
      "Display an icon from all-the-icon."
      (s-concat (all-the-icons-alltheicon icon :v-adjust (or v-adjust 0) :height (or height 1) :face face) " " str))

    (defun with-faicon (icon str &optional height v-adjust face)
      "Display an icon from Font Awesome icon."
      (s-concat (all-the-icons-faicon icon ':v-adjust (or v-adjust 0) :height (or height 1) :face face) " " str))

    (defun with-fileicon (icon str &optional height v-adjust face)
      "Display an icon from the Atom File Icons package."
      (s-concat (all-the-icons-fileicon icon :v-adjust (or v-adjust 0) :height (or height 1) :face face) " " str))

    (defun with-octicon (icon str &optional height v-adjust face)
      "Display an icon from the GitHub Octicons."
      (s-concat (all-the-icons-octicon icon :v-adjust (or v-adjust 0) :height (or height 1) :face face) " " str)))
#+end_src
*** Hydra / Windows

Group window-related commands.

#+begin_src emacs-lisp
  (pretty-hydra-define hydra-windows
                       (:hint nil :forein-keys warn :quit-key "q" :title (with-faicon "windows" "Windows" 1 -0.05))
                       ("Window"
                        (("b" balance-windows "balance")
                         ("c" centered-window-mode "center")
                         ("i" enlarge-window "heighten")
                         ("j" shrink-window-horizontally "narrow")
                         ("k" shrink-window "lower")
                         ("u" winner-undo "undo")
                         ("r" winner-redo "redo")
                         ("l" enlarge-window-horizontally "widen")
                         ("s" switch-window-then-swap-buffer "swap" :color teal))
                        "Zoom"
                        (("-" text-scale-decrease "out")
                         ("+" text-scale-increase "in")
                         ("=" (text-scale-increase 0) "reset"))))
#+end_src
*** Hydra / Window Nav
From https://github.com/doomemacs/doomemacs/blob/master/modules/ui/hydra/autoload/windows.el

#+begin_src emacs-lisp
  (defhydra +hydra/window-nav (:hint nil)
    "
            Split: _v_ert  _s_:horz
           Delete: _c_lose  _o_nly
    Switch Window: _h_:left  _j_:down  _k_:up  _l_:right  _u_:undo  _r_:redo
          Buffers: _p_revious  _n_ext  _b_:select  _f_ind-file
           Resize: _H_:splitter left  _J_:splitter down  _K_:splitter up  _L_:splitter right
             Move: _a_:up  _z_:down  _i_menu
  "
    ("z" scroll-up-line)
    ("a" scroll-down-line)
    ("i" idomenu)

    ("h" windmove-left)
    ("j" windmove-down)
    ("k" windmove-up)
    ("l" windmove-right)
    ("u" winner-undo)
    ("r" winner-redo)

    ("p" previous-buffer)
    ("n" next-buffer)
    ("b" switch-to-buffer)
    ("f" find-file)

    ("s" split-window-below)
    ("v" split-window-right)

    ("c" delete-window)
    ("o" delete-other-windows)

    ("H" hydra-move-splitter-left)
    ("J" hydra-move-splitter-down)
    ("K" hydra-move-splitter-up)
    ("L" hydra-move-splitter-right)

    ("+" text-scale-increase "in")
    ("-" text-scale-decrease "out")
    ("=" (text-scale-increase 0) "reset")

    ("q" nil))
#+end_src
*** Hydra / Flyspell
#+begin_src emacs-lisp
  (defhydra flyspell-hydra ()
    "
  Spell Commands^^           Add To Dictionary^^              Other
  --------------^^---------- -----------------^^------------- -----^^---------------------------
  [_b_] check whole buffer   [_B_] add word to dict (buffer)  [_t_] toggle spell check
  [_r_] check region         [_G_] add word to dict (global)  [_q_] exit
  [_d_] change dictionary    [_S_] add word to dict (session) [_Q_] exit and disable spell check
  [_n_] next error
  [_c_] correct before point
  [_s_] correct at point
  "
    ("B" nil)
    ("b" flyspell-buffer)
    ("r" flyspell-region)
    ("d" ispell-change-dictionary)
    ("G" nil)
    ("n" flyspell-goto-next-error)
    ("c" flyspell-correct-wrapper)
    ("Q" flyspell-mode :exit t)
    ("q" nil :exit t)
    ("S" nil)
    ("s" flyspell-correct-at-point)
    ("t" nil))
#+end_src
*** Hydra / ORG
**** hydra-org-jump
From [[https://sriramkswamy.github.io/dotemacs/]]

#+begin_src emacs-lisp
  (defun sk/before-hydra ()
    "Function to run before the Hydra gets executed."
    (focus-mode))

  (defun sk/org-jump-next-heading-and-scroll ()
    "Move to the next same-level heading and scroll line to top."
    (interactive)
    (org-forward-heading-same-level)
    (evil-scroll-line-to-top)
    (message "Next heading and scrolled to top"))

  (defhydra sk/hydra-org-jump (:color pink :hint nil :pre sk/before-hydra)
    ;; ("J" outline-next-visible-heading)
    ("J" (lambda ()
           (interactive)
           (outline-next-visible-heading 1)
           ;; (call-interactively 'evil-scroll-line-to-top)
           (org-cycle)))

    ;; ("K" outline-previous-visible-heading)
    ("K" (lambda ()
           (interactive)
           (outline-previous-visible-heading 1)
           ;; (call-interactively 'evil-scroll-line-to-top)
           (org-cycle)))
    ("L" org-down-element)
    ("H" org-up-element)
    ;; ("j" org-forward-heading-same-level)
    ("j" (lambda ()
           (interactive)
           (org-forward-heading-same-level 1)
           (call-interactively 'evil-scroll-line-to-top)
           (org-cycle)))
    ;; ("k" org-backward-heading-same-level)
    ("k" (lambda ()
           (interactive)
           (org-backward-heading-same-level 1)
           (call-interactively 'evil-scroll-line-to-top)
           (org-cycle)))
    ;; ("u" org-next-item)
    ;; ("d" org-previous-item)
    ;; ("f" org-table-next-field)
    ;; ("b" org-table-previous-field)
    ;; ("n" org-next-block)
    ("p" forward-paragraph)
    ;; ("N" org-next-link)
    ("P" backward-paragraph)
    ("q" nil :color blue))
#+end_src

#+results:
: sk/hydra-org-jump/body

**** hydra-org-babel-transient
#+begin_src emacs-lisp :tangle no
  (defhydra org-babel-transient ()
    "
  ^Navigate^                    ^Interact
  ^^^^^^^^^^^------------------------------------------
  [_t_/_s_] navigate src blocs  [_x_] execute src block
  [_g_]^^   goto named block    [_'_] edit src block
  [_z_]^^   recenter screen     [_q_] quit
  "
    ("q" nil :exit t)
    ("t" org-babel-next-src-block)
    ("s" org-babel-previous-src-block)
    ("g" org-babel-goto-named-src-block)
    ("z" recenter-top-bottom)
    ("x" org-babel-execute-maybe)
    ("'" org-edit-special :exit t))
#+end_src
*** Hydra / merge
Group Merge commands.

#+begin_src emacs-lisp
  (pretty-hydra-define hydra-merge
                       (:hint nil :color pink :quit-key "q" :title (with-octicon "mark-github" "Magit" 1 -0.05))
                       ("Move"
                        (("n" smerge-next "next")
                         ("p" smerge-prev "previous"))
                        "Keep"
                        (("RET" smerge-keep-current "current")
                         ("a" smerge-keep-all "all")
                         ("b" smerge-keep-base "base")
                         ("l" smerge-keep-lower "lower")
                         ("u" smerge-keep-upper "upper"))
                        "Diff"
                        (("<" smerge-diff-base-upper "upper/base")
                         ("=" smerge-diff-upper-lower "upper/lower")
                         (">" smerge-diff-base-lower "base/lower")
                         ("R" smerge-refine "redefine")
                         ("E" smerge-ediff "ediff"))
                        "Other"
                        (("C" smerge-combine-with-next "combine")
                         ("r" smerge-resolve "resolve")
                         ("k" smerge-kill-current "kill current"))))
#+end_src
*** Hydra / smerge
From https://github.com/dakra/dmacs/blob/nil/init.org

#+begin_src emacs-lisp
  (use-package smerge-mode
    :hook (magit-diff-visit-file . (lambda ()
                                     (when smerge-mode
                                       (hydra-smerge/body))))
    :config
    (require 'hydra)
    (defhydra hydra-smerge
      (:color pink :hint nil :post (smerge-auto-leave))
      "
  ^Move^       ^Keep^               ^Diff^                 ^Other^
  ^^-----------^^-------------------^^---------------------^^-------
  _n_ext       _b_ase               _<_: upper/base        _C_ombine
  _p_rev       _u_pper              _=_: upper/lower       _r_esolve
  ^^           _l_ower              _>_: base/lower        _k_ill current
  ^^           _a_ll                _R_efine
  ^^           _RET_: current       _E_diff
  "
      ("n" smerge-next)
      ("p" smerge-prev)
      ("b" smerge-keep-base)
      ("u" smerge-keep-upper)
      ("l" smerge-keep-lower)
      ("a" smerge-keep-all)
      ("RET" smerge-keep-current)
      ("\C-m" smerge-keep-current)
      ("<" smerge-diff-base-upper)
      ("=" smerge-diff-upper-lower)
      (">" smerge-diff-base-lower)
      ("R" smerge-refine)
      ("E" smerge-ediff)
      ("C" smerge-combine-with-next)
      ("r" smerge-resolve)
      ("k" smerge-kill-current)
      ("q" nil "cancel" :color blue)))
#+end_src
*** Hydra / modeline                                                   :todo:
#+begin_src emacs-lisp
  (pretty-hydra-define hydra-modeline
                       (:title "Modeline" :color amaranth :quit-key ("q" "C-g"))
                       ("Icon"
                        (("i" (setq doom-modeline-icon (not doom-modeline-icon))
                          "display icons" :toggle doom-modeline-icon)
                         ("u" (setq doom-modeline-unicode-fallback (not doom-modeline-unicode-fallback))
                          "unicode fallback" :toggle doom-modeline-unicode-fallback)
                         ("m" (setq doom-modeline-major-mode-icon (not doom-modeline-major-mode-icon))
                          "major mode" :toggle doom-modeline-major-mode-icon)
                         ("c" (setq doom-modeline-major-mode-color-icon (not doom-modeline-major-mode-color-icon))
                          "colorful major mode" :toggle doom-modeline-major-mode-color-icon)
                         ("s" (setq doom-modeline-buffer-state-icon (not doom-modeline-buffer-state-icon))
                          "buffer state" :toggle doom-modeline-buffer-state-icon)
                         ("o" (setq doom-modeline-buffer-modification-icon (not doom-modeline-buffer-modification-icon))
                          "modification" :toggle doom-modeline-buffer-modification-icon)
                         ("x" (setq doom-modeline-time-icon (not doom-modeline-time-icon))
                          "time" :toggle doom-modeline-time-icon)
                         ("v" (setq doom-modeline-modal-icon (not doom-modeline-modal-icon))
                          "modal" :toggle doom-modeline-modal-icon))
                        "Segment"
                        (("g h" (setq doom-modeline-hud (not doom-modeline-hud))
                          "hud" :toggle doom-modeline-hud)
                         ("g m" (setq doom-modeline-minor-modes (not doom-modeline-minor-modes))
                          "minor modes" :toggle doom-modeline-minor-modes)
                         ("g w" (setq doom-modeline-enable-word-count (not doom-modeline-enable-word-count))
                          "word count" :toggle doom-modeline-enable-word-count)
                         ("g e" (setq doom-modeline-buffer-encoding (not doom-modeline-buffer-encoding))
                          "encoding" :toggle doom-modeline-buffer-encoding)
                         ("g i" (setq doom-modeline-indent-info (not doom-modeline-indent-info))
                          "indent" :toggle doom-modeline-indent-info)
                         ("g c" (setq doom-modeline-display-misc-in-all-mode-lines (not doom-modeline-display-misc-in-all-mode-lines))
                          "misc info" :toggle doom-modeline-display-misc-in-all-mode-lines)
                         ("g l" (setq doom-modeline-lsp (not doom-modeline-lsp))
                          "lsp" :toggle doom-modeline-lsp)
                         ("g k" (setq doom-modeline-workspace-name (not doom-modeline-workspace-name))
                          "workspace" :toggle doom-modeline-workspace-name)
                         ("g g" (setq doom-modeline-github (not doom-modeline-github))
                          "github" :toggle doom-modeline-github)
                         ("g n" (setq doom-modeline-gnus (not doom-modeline-gnus))
                          "gnus" :toggle doom-modeline-gnus)
                         ("g u" (setq doom-modeline-mu4e (not doom-modeline-mu4e))
                          "mu4e" :toggle doom-modeline-mu4e)
                         ("g r" (setq doom-modeline-irc (not doom-modeline-irc))
                          "irc" :toggle doom-modeline-irc)
                         ("g f" (setq doom-modeline-irc-buffers (not doom-modeline-irc-buffers))
                          "irc buffers" :toggle doom-modeline-irc-buffers)
                         ("g s" (progn
                                  (setq doom-modeline-checker-simple-format (not doom-modeline-checker-simple-format))
                                  (and (bound-and-true-p flycheck-mode) (flycheck-buffer)))
                          "simple checker" :toggle doom-modeline-checker-simple-format)
                         ("g t" (setq doom-modeline-time (not doom-modeline-time))
                          "time" :toggle doom-modeline-time)
                         ("g v" (setq doom-modeline-env-version (not doom-modeline-env-version))
                          "version" :toggle doom-modeline-env-version))
                        "Style"
                        (("a" (setq doom-modeline-buffer-file-name-style 'auto)
                          "auto"
                          :toggle (eq doom-modeline-buffer-file-name-style 'auto))
                         ("b" (setq doom-modeline-buffer-file-name-style 'buffer-name)
                          "buffer name"
                          :toggle (eq doom-modeline-buffer-file-name-style 'buffer-name))
                         ("f" (setq doom-modeline-buffer-file-name-style 'file-name)
                          "file name"
                          :toggle (eq doom-modeline-buffer-file-name-style 'file-name))
                         ("t u" (setq doom-modeline-buffer-file-name-style 'truncate-upto-project)
                          "truncate upto project"
                          :toggle (eq doom-modeline-buffer-file-name-style 'truncate-upto-project))
                         ("t f" (setq doom-modeline-buffer-file-name-style 'truncate-from-project)
                          "truncate from project"
                          :toggle (eq doom-modeline-buffer-file-name-style 'truncate-from-project))
                         ("t w" (setq doom-modeline-buffer-file-name-style 'truncate-with-project)
                          "truncate with project"
                          :toggle (eq doom-modeline-buffer-file-name-style 'truncate-with-project))
                         ("t e" (setq doom-modeline-buffer-file-name-style 'truncate-except-project)
                          "truncate except project"
                          :toggle (eq doom-modeline-buffer-file-name-style 'truncate-except-project))
                         ("t r" (setq doom-modeline-buffer-file-name-style 'truncate-upto-root)
                          "truncate upto root"
                          :toggle (eq doom-modeline-buffer-file-name-style 'truncate-upto-root))
                         ("t a" (setq doom-modeline-buffer-file-name-style 'truncate-all)
                          "truncate all"
                          :toggle (eq doom-modeline-buffer-file-name-style 'truncate-all))
                         ("t n" (setq doom-modeline-buffer-file-name-style 'truncate-nil)
                          "truncate none"
                          :toggle (eq doom-modeline-buffer-file-name-style 'truncate-nil))
                         ("r f" (setq doom-modeline-buffer-file-name-style 'relative-from-project)
                          "relative from project"
                          :toggle (eq doom-modeline-buffer-file-name-style 'relative-from-project))
                         ("r t" (setq doom-modeline-buffer-file-name-style 'relative-to-project)
                          "relative to project"
                          :toggle (eq doom-modeline-buffer-file-name-style 'relative-to-project)))
                        "Project Detection"
                        (("p a" (setq doom-modeline-project-detection 'auto)
                          "auto"
                          :toggle (eq doom-modeline-project-detection 'auto))
                         ("p f" (setq doom-modeline-project-detection 'ffip)
                          "ffip"
                          :toggle (eq doom-modeline-project-detection 'ffip))
                         ("p i" (setq doom-modeline-project-detection 'projectile)
                          "projectile"
                          :toggle (eq doom-modeline-project-detection 'projectile))
                         ("p p" (setq doom-modeline-project-detection 'project)
                          "project"
                          :toggle (eq doom-modeline-project-detection 'project))
                         ("p n" (setq doom-modeline-project-detection nil)
                          "disable"
                          :toggle (eq doom-modeline-project-detection nil)))
                        "Misc"
                        (("n" (progn
                                (message "Fetching GitHub notifications...")
                                (run-with-timer 300 nil #'doom-modeline--github-fetch-notifications)
                                (browse-url "https://github.com/notifications"))
                          "github notifications" :exit t)
                         ("e" (cond ((bound-and-true-p flycheck-mode)
                                     (flycheck-list-errors))
                                    ((bound-and-true-p flymake-mode)
                                     (flymake-show-diagnostics-buffer)))
                          "list errors" :exit t)
                         ("w" (if (bound-and-true-p grip-mode)
                                  (grip-browse-preview)
                                (message "Not in preview"))
                          "browse preview" :exit t)
                         ("z h" (read-from-minibuffer
                                 "Eval: "
                                 (format "(setq %s %s)"
                                         'doom-modeline-height
                                         (symbol-value 'doom-modeline-height)))
                          "set height" :exit t)
                         ("z w" (read-from-minibuffer
                                 "Eval: "
                                 (format "(setq %s %s)"
                                         'doom-modeline-bar-width
                                         (symbol-value 'doom-modeline-bar-width)))
                          "set bar width" :exit t)
                         ("z g" (read-from-minibuffer
                                 "Eval: "
                                 (format "(setq %s %s)"
                                         'doom-modeline-github-interval
                                         (symbol-value 'doom-modeline-github-interval)))
                          "set github interval" :exit t)
                         ("z n" (read-from-minibuffer
                                 "Eval: "
                                 (format "(setq %s %s)"
                                         'doom-modeline-gnus-timer
                                         (symbol-value 'doom-modeline-gnus-timer)))
                          "set gnus interval" :exit t))))

#+end_src
*** Hydra / unicode
From https://github.com/dakra/dmacs/blob/nil/init.org
Add here circled digits like: ②
#+begin_src emacs-lisp
  (defun dakra/insert-unicode (unicode-name)
    "Same as C-x 8 enter UNICODE-NAME."
    (insert-char (gethash unicode-name (ucs-names))))

  (defhydra dakra/hydra-unicode (:color blue :hint nil)
    "
       Unicode  _c_ €   _a_ ä   _A_ Ä
                _d_ °   _o_ ö   _O_ Ö
                _e_ €   _u_ Ü   _U_ Ü
                _p_ £   _s_ ß
                _m_ µ
                _r_ →
       "
    ("a" (dakra/insert-unicode "LATIN SMALL LETTER A WITH DIAERESIS"))
    ("A" (dakra/insert-unicode "LATIN CAPITAL LETTER A WITH DIAERESIS"))
    ("o" (dakra/insert-unicode "LATIN SMALL LETTER O WITH DIAERESIS")) ;;
    ("O" (dakra/insert-unicode "LATIN CAPITAL LETTER O WITH DIAERESIS"))
    ("u" (dakra/insert-unicode "LATIN SMALL LETTER U WITH DIAERESIS")) ;;
    ("U" (dakra/insert-unicode "LATIN CAPITAL LETTER U WITH DIAERESIS"))
    ("s" (dakra/insert-unicode "LATIN SMALL LETTER SHARP S"))
    ("c" (dakra/insert-unicode "COPYRIGHT SIGN"))
    ("d" (dakra/insert-unicode "DEGREE SIGN"))
    ("e" (dakra/insert-unicode "EURO SIGN"))
    ("p" (dakra/insert-unicode "POUND SIGN"))
    ("r" (dakra/insert-unicode "RIGHTWARDS ARROW"))
    ("m" (dakra/insert-unicode "MICRO SIGN")))
#+end_src
** explain-pause-mode
#+begin_src emacs-lisp
  (use-package explain-pause-mode
    :straight (explain-pause-mode :type git :host github :repo "lastquestion/explain-pause-mode"))
#+end_src
** exec-path-from-shell
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :straight t
    :if (memq window-system '(mac ns x))
    :config
    (exec-path-from-shell-initialize))
#+end_src
** COMMENT crux
Various useful utilities
#+begin_src emacs-lisp
  (global-unset-key (kbd "C-c f"))
  (use-package crux
    :bind (("C-c u" . crux-view-url)
           ("C-c f r" . crux-rename-buffer-and-file)
           ("C-c f d" . crux-delete-file-and-buffer)
           ("s-k"   . crux-kill-whole-line)
           ;;("s-o"   . crux-smart-open-line-above)
           ("C-a"   . crux-move-beginning-of-line)
           ([(shift return)] . crux-smart-open-line)
           ([(control shift return)] . crux-smart-open-line-above)))
#+end_src
** Custom Elisp
*** reload config
#+begin_src emacs-lisp
  (defun dorneanu/reload-dotemacs ()
    (interactive)
    (load-file (concat minemacs-root-dir "init.el" )))
#+end_src
*** change font size
Change default font size
#+begin_src emacs-lisp
  (defun dorneanu/set-font-size (size)
    "Set the font size to SIZE, specified in tenths of a point."
    (interactive "nEnter the font size: ")
    (set-face-attribute 'default nil :height size))
#+end_src

* Applications
:properties:
:header-args:emacs-lisp: :tangle ~/.minemacs.d/config.el
:end:
** AI
*** chatgpt-shell
#+begin_src emacs-lisp
  (use-package chatgpt-shell
    :straight t
    :commands (chatgpt-shell)
    :bind (("C-c a p" . chatgpt-shell-prompt)
           ("C-c a s" . chatgpt-shell)
           ("C-c a cd" . dorneanu/+chatgpt-shell-check-diff)
           ("C-c a cp" . dorneanu/+chatgpt-shell-check-paragraph)
           ("C-c a P" . dorneanu/+chatgpt-shell-check-and-correct-paragraph)
           ("C-c a u" . +retrive-text-content-from-page)
           ("C-c a r" . chatgpt-shell-proofread-region))
    :config
    (setq chatgpt-shell-openai-key (password-store-get "emacs/chatgpt"))
    ;; <<chatgpt-shell-custom-functions>>
    :custom
    ;; From https://github.com/jwiegley/dot-emacs/blob/master/init.org
    ;; I might need to change these
    (chatgpt-shell-system-prompts
     '(("English" .
        "I want you to act as an English translator, spelling corrector and improver. I will speak to you in any language and you will detect the language, translate it and answer in the corrected and improved version of my text, in English. I want you to replace my simplified A0-level words and sentences with more beautiful and elegant, upper level English words and sentences. Keep the meaning same, but make them more literary. I want you to only reply the correction, the improvements and nothing else, do not write explanations.")
       ("General" .
        "You use markdown liberally to structure responses. Always show code snippets in markdown blocks with language labels.")
       ("Programming" .
        "The user is a programmer with very limited time. You treat their time as precious. You do not repeat obvious things, including their query. You are as concise as possible in responses. You never apologize for confusions because it would waste their time. You use markdown liberally to structure responses. Always show code snippets in markdown blocks with language labels. Don't explain code snippets. Whenever you output updated code for the user, only show diffs, instead of entire snippets.")
       ("Positive Programming" .
        "Your goal is to help the user become an amazing computer programmer. You are positive and encouraging. You love see them learn. You do not repeat obvious things, including their query. You are as concise in responses. You always guide the user go one level deeper and help them see patterns. You never apologize for confusions because it would waste their time. You use markdown liberally to structure responses. Always show code snippets in markdown blocks with language labels. Don't explain code snippets. Whenever you output updated code for the user, only show diffs, instead of entire snippets.")
       )))
#+end_src
**** Custom functions
***** chatgpt-shell-checks
For ChatGPT:
#+name: chatgpt-shell-custom-functions
#+begin_src emacs-lisp
  ;; https://www.reddit.com/r/emacs/comments/185n3yo/emacs_meets_chatgpt_for_flawless_grammar_and/
  (defun chatgpt-shell-check-paragraph (text)
    "Send TEXT to ChatGPT for spell and grammar checking."
    ;; trim both sides to make diff easier
    (if (string= text "")
        (error "nothing to send to chatGPT"))
    (message "sending [%s]" text)
    (let ((response (chatgpt-shell-post-prompt
                     (concat
                      "Please correct the spelling and grammar of the following paragraph."
                      "Maintain existing org-mode syntax expressions like =this=, *this* and ~this~."
                      "Only return the corrected paragraph, not the original text or this prompt."
                      " If there is no change, return 'It looks good'."
                      "Here's the text:\n\n" text)
                     nil "gpt-3.5-turbo" nil nil nil nil)))
      response))

  (defun dorneanu/+chatgpt-shell-check-and-correct-paragraph ()
    "Check and correct the current paragraph using ChatGPT."
    (interactive)
    (let* ((bounds (bounds-of-thing-at-point 'paragraph))
           (start (car bounds))
           (end (cdr bounds))
           (original-text (string-trim-left (buffer-substring-no-properties start end)))
           (point-offset (- end (point))) ; Save the offset of point from end
           (checked-text (chatgpt-shell-check-paragraph original-text)))
      (when checked-text
        (if (string-prefix-p "It looks good" checked-text)
            (message "It looks good")
          (save-excursion
            (goto-char start)
            (delete-region start end)
            (insert "\n") ; Insert a newline here
            (insert checked-text)
            (chatgpt-shell-check-diff original-text checked-text)
            ;; Move the point to its new position relative to the end
            (goto-char (- (cdr (bounds-of-thing-at-point 'paragraph)) point-offset)))))))

  (defun chatgpt-shell-check-diff (original-text checked-text)
    (let ((buffer-ori (get-buffer-create "*chatgpt-grammar-original*"))
          (buffer-new (get-buffer-create "*chatgpt-grammar-checked*"))
          (reg-A-end nil)
          (reg-B-end nil)
          )
      (set-buffer buffer-ori)
      (erase-buffer)
      (insert original-text)
      (setq reg-A-end (point-max))
      (set-buffer buffer-new)
      (erase-buffer)
      (insert checked-text)
      (setq reg-B-end (point-max))
      (ediff-regions-internal buffer-ori 1 reg-A-end
                              buffer-new 1 reg-B-end
                              nil 'ediff-regions-wordwise 'word-mode nil)))

#+end_src
*** gptel
#+begin_src emacs-lisp
  (use-package gptel
    :straight t
    :commands (gptel gptel-send)
    :bind (("<f7>" . #'gptel)
           ("s-<f7>" . #'gptel-send))
    :custom
    (gptel-default-mode 'org-mode)
    (gptel-model "gpt-4")
    :config
    ;; ChatGPT
    (setq gptel-api-key (password-store-get "emacs/chatgpt"))
    ;; Anthropic / Claude 3
    (gptel-make-anthropic "Claude"
                          :stream t
                          :key (password-store-get "emacs/anthropic-claude3"))
    ;; OPTIONAL configuration
    ;; (setq
    ;;  gptel-model "claude-3-sonnet-20240229" ;  "claude-3-opus-20240229" also available
    ;;  gptel-backend (gptel-make-anthropic "Claude"
    ;;                                      :stream t :key (password-store-get "emacs/anthropic-claude3")))
    )
#+end_src

#+results:
: gptel-send

** Feeds
*** elfeed
#+begin_src emacs-lisp
(use-package elfeed
  :defer t
  :straight t
  :config
  ;; Global keybindings for elfeed
  (keymap-global-set "C-c e e" #'elfeed)
  (keymap-global-set "C-c e u" #'elfeed-update)
  (keymap-global-set "C-c e s" #'elfeed-search)

  ;; Keybindings for elfeed-search-mode
  (keymap-set elfeed-search-mode-map "g" #'elfeed-search-update--force)
  (keymap-set elfeed-search-mode-map "f j" #'dorneanu/elfeed-cycle-filters-forward)
  (keymap-set elfeed-search-mode-map "f J" #'dorneanu/elfeed-cycle-filters-backward)
  (keymap-set elfeed-search-mode-map "f k" #'dorneanu/elfeed-increase-time-filter)
  (keymap-set elfeed-search-mode-map "f K" #'dorneanu/elfeed-decrease-time-filter)
  (keymap-set elfeed-search-mode-map "f u" #'elfeed-update)
  (keymap-set elfeed-search-mode-map "f U" #'elfeed-search-update--force)
  (keymap-set elfeed-search-mode-map "y" #'elfeed-show-yank)
  (keymap-set elfeed-search-mode-map "m g r" #'my/elfeed-reddit-show-comments)
  (keymap-set elfeed-search-mode-map "m g h" #'my/elfeed-hn-show-comments)
  (keymap-set elfeed-search-mode-map "o x" #'dorneanu/elfeed-search-browse-url-xwidget)
  (keymap-set elfeed-search-mode-map "o b" #'elfeed-search-browse-url)
  (keymap-set elfeed-search-mode-map "o r" #'sqrtminusone/rdrview-elfeed-show)

  ;; Keybindings for elfeed-show-mode
  (keymap-set elfeed-show-mode-map "q" #'elfeed-kill-buffer)
  (keymap-set elfeed-show-mode-map "u" #'elfeed-show-tag--unread)
  (keymap-set elfeed-show-mode-map "y" #'elfeed-show-yank)
  ;; <<elfeed-open-youtube-with-mpv>>
  :custom
  ((elfeed-search-filter "@1-week-ago +unread +daily -devto -youtube -hn")
   (elfeed-db-directory "~/.elfeed")
   (elfeed-goodies/wide-threshold 0.2)
   (elfeed-set-timeout 36000)))
#+end_src

#+results:

**** Custom functions

#+begin_src emacs-lisp
  (defun hp/elfeed-entry-line-draw (entry)
    "Print ENTRY to the buffer."
    (let* ((date (elfeed-search-format-date (elfeed-entry-date entry)))
           (title (or (elfeed-meta entry :title) (elfeed-entry-title entry) ""))
           (title-faces (elfeed-search--faces (elfeed-entry-tags entry)))
           (feed (elfeed-entry-feed entry))
           (feed-title
            (when feed
              (or (elfeed-meta feed :title) (elfeed-feed-title feed))))
           (tags (mapcar #'symbol-name (elfeed-entry-tags entry)))
           (tags-str (concat "[" (mapconcat 'identity tags ",") "]"))
           (title-width (- (window-width) elfeed-goodies/feed-source-column-width
                           elfeed-goodies/tag-column-width 4))
           (title-column (elfeed-format-column
                          title (elfeed-clamp
                                 elfeed-search-title-min-width
                                 title-width
                                 title-width)
                          :left))
           (tag-column (elfeed-format-column
                        tags-str (elfeed-clamp (length tags-str)
                                               elfeed-goodies/tag-column-width
                                               elfeed-goodies/tag-column-width)
                        :left))
           (feed-column (elfeed-format-column
                         feed-title (elfeed-clamp elfeed-goodies/feed-source-column-width
                                                  elfeed-goodies/feed-source-column-width
                                                  elfeed-goodies/feed-source-column-width)
                         :left))
           ;; (entry-score (elfeed-format-column (number-to-string (elfeed-score-scoring-get-score-from-entry entry)) 6 :left))
           ;; (entry-authors (concatenate-authors
           ;;                 (elfeed-meta entry :authors)))
           ;; (authors-column (elfeed-format-column entry-authors elfeed-goodies/tag-column-width :left))
           )
      (if (>= (window-width) (* (frame-width) elfeed-goodies/wide-threshold))
          (progn
            ;; (insert (propertize entry-score 'face 'elfeed-search-feed-face) " ")
            (insert (propertize date 'face 'elfeed-search-date-face) " ")
            (insert (propertize feed-column 'face 'elfeed-search-feed-face) " ")
            (insert (propertize tag-column 'face 'elfeed-search-tag-face) " ")
            ;; (insert (propertize authors-column 'face 'elfeed-search-tag-face) " ")
            (insert (propertize title 'face title-faces 'kbd-help title))
            )
        (insert (propertize title 'face title-faces 'kbd-help title))))
    )

#+end_src

xwidget related:

#+begin_src emacs-lisp
  (defun dorneanu/elfeed-search-browse-url-xwidget (&optional use-generic-p)
    "open with xwidget"
    (interactive "P")
    ;; Split window and focus there
    (split-window-right)
    (balance-windows)
    (other-window 1)
    (let ((browse-url-browser-function #'xwidget-webkit-browse-url))
      (elfeed-search-browse-url use-generic-p)))
#+end_src

**** Filter cycling
Cycle through different filters:

#+begin_src emacs-lisp
  (defvar dorneanu/elfeed-custom-filters
    '("@1-week-ago +unread +daily -devto -youtube -hn"
      "@1-week-ago +unread +daily -devto -youtube -hn +blogs"
      "@1-week-ago +unread +daily -devto -youtube -hn +security"
      "@1-week-ago +unread +reddit +top"
      "@1-week-ago +unread -hn +news +lage"
      "@1-week-ago +unread -hn +news +correctiv"
      "@1-week-ago +unread +finance"
      "@1-week-ago +unread +daily -devto +youtube +y1"
      "@1-week-ago +unread +daily -devto +hn +points")
    "List of elfeed filters to cycle through.")

  (defvar dorneanu/elfeed-current-filter-index 0
    "Current index of `my-elfeed-filters` list.")

  ;; Regular expression to match the time filter
  (defvar dorneanu/time-filter-regex "@\\([0-9]+\\)-week-ago"
    "Regex to match the time filter in elfeed.")

  (defun dorneanu/elfeed-cycle-filters-forward ()
    "Cycle forward through `dorneanu/elfeed-custom-filters` and apply the current filter."
    (interactive)
    (setq dorneanu/elfeed-current-filter-index
          (mod (1+ dorneanu/elfeed-current-filter-index)
               (length dorneanu/elfeed-custom-filters)))
    (let ((current-filter (nth dorneanu/elfeed-current-filter-index dorneanu/elfeed-custom-filters)))
      (elfeed-search-set-filter current-filter)
      (message "Elfeed filter set to: %s" current-filter)))

  (defun dorneanu/elfeed-cycle-filters-backward ()
    "Cycle backward through `dorneanu/elfeed-custom-filters` and apply the current filter."
    (interactive)
    (setq dorneanu/elfeed-current-filter-index
          (mod (1- dorneanu/elfeed-current-filter-index)
               (length dorneanu/elfeed-custom-filters)))
    (let ((current-filter (nth dorneanu/elfeed-current-filter-index dorneanu/elfeed-custom-filters)))
      (elfeed-search-set-filter current-filter)
      (message "Elfeed filter set to: %s" current-filter)))

  (defun dorneanu/elfeed-adjust-time-filter (increment)
    "Adjust the time filter in the current elfeed filter.
  INCREMENT can be positive or negative to increase or decrease the time filter."
    (let* ((current-filter (nth dorneanu/elfeed-current-filter-index dorneanu/elfeed-custom-filters))
           (new-filter (replace-regexp-in-string
                        "@\\([0-9]+\\)-week-ago"
                        (lambda (match)
                          (let ((current-weeks (string-to-number (match-string 1 match))))
                            (concat "@" (number-to-string (max 1 (+ current-weeks increment))) "-week-ago")))
                        current-filter)))
      ;; Update the filter list with the new filter
      (setf (nth dorneanu/elfeed-current-filter-index dorneanu/elfeed-custom-filters) new-filter)
      ;; Apply the new filter
      (elfeed-search-set-filter new-filter)
      (message "Elfeed filter set to: %s" new-filter)))

  (defun dorneanu/elfeed-increase-time-filter ()
    "Increase the time filter (e.g., from @1-week-ago to @2-week-ago)."
    (interactive)
    (dorneanu/elfeed-adjust-time-filter 1))

  (defun dorneanu/elfeed-decrease-time-filter ()
    "Decrease the time filter (e.g., from @2-week-ago to @1-week-ago)."
    (interactive)
    (dorneanu/elfeed-adjust-time-filter -1))

  (defun dorneanu/elfeed-cycle-filters ()
    "Cycle through `dorneanu/elfeed-custom-filters` and apply the current filter."
    (interactive)
    (setq dorneanu/elfeed-current-filter-index
          (mod (1+ dorneanu/elfeed-current-filter-index)
               (length dorneanu/elfeed-custom-filters)))
    (let ((current-filter (nth dorneanu/elfeed-current-filter-index dorneanu/elfeed-custom-filters)))
      (elfeed-search-set-filter current-filter)
      (message "Elfeed filter set to: %s" current-filter)))
#+end_src

**** elfeed-goodies
Elfeed-goodies is a package which enhances the Elfeed experience.
Aside from running its setup command as soon as possible, I also set
in this code block all my keybinds for Elfeed here.
#+begin_src emacs-lisp
  (use-package elfeed-goodies
    :defer t
    :after elfeed
    :commands elfeed-goodies/setup
    :straight (:build t)
    :init
    (elfeed-goodies/setup)
    :custom
    (elfeed-goodies/feed-source-column-width 28)
    (elfeed-goodies/tag-column-width 28)
    :config
    (setq elfeed-search-print-entry-function 'hp/elfeed-entry-line-draw))
#+end_src

**** Youtube
I don’t want YouTube videos to be open with my web browser when I
invoke ~elfeed-show-visit~, so I’ll advise this function to make it
possible to modify the behaviour of said function. Oh, and I already
made [[file:../../scripts.md#ytplay][a neat package]] for playing YouTube videos and friends through
[[https://ytdl-org.github.io/youtube-dl/][youtube-dl]] or its superior fork [[https://github.com/yt-dlp/yt-dlp][yt-dlp]] in mpv.

#+name: elfeed-open-youtube-with-mpv
#+begin_src emacs-lisp
  (defun my/elfeed-filter-youtube-videos (orig-fun &rest args)
    "Open with mpv the video leading to PATH"
    (let ((link (elfeed-entry-link elfeed-show-entry)))
      (when link
        (if (string-match-p ".*youtube\.com.*watch.*" link)
            ;; This is a YouTube video, open it with mpv
            (progn
              (require 'ytplay)
              (ytplay link))
          (apply orig-fun args)))))

  (advice-add 'elfeed-show-visit :around #'my/elfeed-filter-youtube-videos)
#+end_src

A future improvement to be made is to let the user chose the
resolution of the video before it is launched. I may not always have
the best internet connection, and viewing 4K videos on a 1080p display
is not something very useful.
**** elfeed-org
Last but not least, my Elfeed configuration is stored in an org file
thanks to ~elfeed-org~.
#+begin_src emacs-lisp
  (use-package elfeed-org
    :after elfeed
    :straight t
    :init
    (elfeed-org)
    :config
    (setq rmh-elfeed-org-files (list (concat org-directory "elfeed.org.gpg"))))
#+end_src
**** elfeed-tube
#+begin_src emacs-lisp
  (use-package elfeed-tube
    :straight t
    :after elfeed
    :config
    (elfeed-tube-setup)
    :bind (:map elfeed-show-mode-map
                ("C-c C-x m" . #'dorneanu/elfeed-play-with-mpv)
                ("C-c C-x f" . elfeed-tube-fetch)
                ([remap save-buffer] . elfeed-tube-save)
                :map elfeed-search-mode-map
                ("C-c C-x m" . #'dorneanu/elfeed-play-with-mpv)
                ("C-c C-x f" . elfeed-tube-fetch)
                ([remap save-buffer] . elfeed-tube-save)))

  ;; https://github.com/skeeto/elfeed/issues/267
  (defun dorneanu/elfeed-play-with-mpv ()
    "Play entry link with mpv."
    (interactive)
    (let ((entry (if (eq major-mode 'elfeed-show-mode) elfeed-show-entry (elfeed-search-selected :single)))
          (quality-arg "")
          (quality-val (completing-read "Max height resolution (0 for unlimited): " '("0" "480" "720" "1080") nil nil)))
      (setq quality-val (string-to-number quality-val))
      (message "Opening %s with height≤%s with mpv..." (elfeed-entry-link entry) quality-val)
      (when (< 0 quality-val)
        (setq quality-arg (format "--ytdl-format=[height<=?%s]" quality-val)))
      (start-process "elfeed-mpv" nil "mpv" quality-arg (elfeed-entry-link entry))))
#+end_src

**** functions
#+begin_src emacs-lisp
  (defun dorneanu/elfeed-search-browse-url-xwidget (&optional use-generic-p)
    "open with xwidget"
    (interactive "P")
    ;; Split window and focus there
    (split-window-right)
    (balance-windows)
    (other-window 1)
    (let ((browse-url-browser-function #'xwidget-webkit-browse-url))
      (elfeed-search-browse-url use-generic-p)))
#+end_src
**** reddigg
Use reddigg to show reddit threads.

#+begin_src emacs-lisp
  (use-package reddigg
    :straight t
    :after (elfeed))

  (defun my/elfeed-reddit-show-comments (&optional link)
    (interactive)
    (require 'reddigg)
    (let* ((entry (if (eq major-mode 'elfeed-show-mode)
                      elfeed-show-entry
                    (elfeed-search-selected :ignore-region)))
           (link (if link link (elfeed-entry-link entry))))
      (reddigg-view-comments link)))
#+end_src

**** hnreader
#+begin_src emacs-lisp
  (use-package hnreader
    :straight t
    :after (elfeed))
#+end_src

Open in same window

#+begin_src emacs-lisp
  (setq hnreader-view-comments-in-same-window nil)
#+end_src

Use hnreader to show HN threads

#+begin_src emacs-lisp
  (defun my/elfeed-hn-show-comments (&optional link)
    (interactive)
    (let* ((entry (if (eq major-mode 'elfeed-show-mode)
                      elfeed-show-entry
                    (elfeed-search-selected :ignore-region)))
           (link (if link link (elfeed-entry-link entry)))
           (content (elfeed-deref (elfeed-entry-content entry)))
           ;; Regex to match the Comments URL
           (comments-url (and content
                              (string-match "Comments URL: <a href=\"\\(https://news.ycombinator.com/item\\?id=[0-9]+\\)\">" content)
                              (match-string 1 content))))
      (message comments-url)
      (setq-local hnreader-view-comments-in-same-window nil)
      (hnreader-promise-comment (format "%s" comments-url))))
#+end_src

Use hnread to show HN threads for a URL at point

#+begin_src emacs-lisp
  (defun my/elfeed-hn-show-comments-at-point ()
    "Kill the url at point."
    (interactive)
    (setq-local hnreader-view-comments-in-same-window t)
    (hnreader-comment (format "%s" (url-get-url-at-point))))
#+end_src
**** COMMENT rdrview
#+begin_src emacs-lisp
  ;; From https://github.com/SqrtMinusOne/dotfiles
  (defun sqrtminusone/rdrview-get (url callback)
    "Get the rdrview representation of URL.

  Call CALLBACK with the output."
    (let* ((buffer (generate-new-buffer "rdrview"))
           (proc (start-process "rdrview" buffer "rdrview"
                                url "-T" "title,sitename,body"
                                "-H")))
      (set-process-sentinel
       proc
       (lambda (process _msg)
         (let ((status (process-status process))
               (code (process-exit-status process)))
           (cond ((and (eq status 'exit) (= code 0))
                  (progn
                    (funcall callback
                             (with-current-buffer (process-buffer process)
                               (buffer-string)))
                    (kill-buffer (process-buffer process))) )
                 ((or (and (eq status 'exit) (> code 0))
                      (eq status 'signal))
                  (let ((err (with-current-buffer (process-buffer process)
                               (buffer-string))))
                    (kill-buffer (process-buffer process))
                    (user-error "Error in rdrview: %s" err)))))))
      proc))

  (defun sqrtminusone/rdrview-parse (dom-string)
    (let ((dom (with-temp-buffer
                 (insert dom-string)
                 (libxml-parse-html-region (point-min) (point-max)))))
      (let (title sitename content (i 0))
        (dolist (child (dom-children (car (dom-by-id dom "readability-page-1"))))
          (when (listp child)
            (cond
             ((eq (car child) 'h1)
              (setq title (dom-text child)))
             ((eq (car child) 'h2)
              (setq sitename (dom-text child)))
             ((eq (car child) 'div)
              (setq content child)))))
        (while (and
                (not (dom-by-tag content 'h1))
                (dom-search
                 content
                 (lambda (el)
                   (when (listp el)
                     (pcase (car el)
                       ('h2 (setf (car el) 'h1))
                       ('h3 (setf (car el) 'h2))
                       ('h4 (setf (car el) 'h3))
                       ('h5 (setf (car el) 'h4))
                       ('h6 (setf (car el) 'h5))))))))
        `((title . ,title)
          (sitename . ,sitename)
          (content . ,(with-temp-buffer
                        (dom-print content)
                        (buffer-string)))))))

  (defvar-local my/elfeed-show-rdrview-html nil)

  (defun sqrtminusone/rdrview-elfeed-show ()
    (interactive)
    (unless elfeed-show-entry
      (user-error "No elfeed entry in this buffer!"))
    (sqrtminusone/rdrview-elfeed-show/rdrview-get
     (elfeed-entry-link elfeed-show-entry)
     (lambda (result)
       (let* ((data (sqrtminusone/rdrview-parse result))
              (inhibit-read-only t)
              (title (elfeed-entry-title elfeed-show-entry))
              (date (seconds-to-time (elfeed-entry-date elfeed-show-entry)))
              (authors (elfeed-meta elfeed-show-entry :authors))
              (link (elfeed-entry-link elfeed-show-entry))
              (tags (elfeed-entry-tags elfeed-show-entry))
              (tagsstr (mapconcat #'symbol-name tags ", "))
              (nicedate (format-time-string "%a, %e %b %Y %T %Z" date))
              (content (alist-get 'content data))
              (feed (elfeed-entry-feed elfeed-show-entry))
              (feed-title (elfeed-feed-title feed))
              (base (and feed (elfeed-compute-base (elfeed-feed-url feed)))))
         (erase-buffer)
         (insert (format (propertize "Title: %s\n" 'face 'message-header-name)
                         (propertize title 'face 'message-header-subject)))
         (when elfeed-show-entry-author
           (dolist (author authors)
             (let ((formatted (elfeed--show-format-author author)))
               (insert
                (format (propertize "Author: %s\n" 'face 'message-header-name)
                        (propertize formatted 'face 'message-header-to))))))
         (insert (format (propertize "Date: %s\n" 'face 'message-header-name)
                         (propertize nicedate 'face 'message-header-other)))
         (insert (format (propertize "Feed: %s\n" 'face 'message-header-name)
                         (propertize feed-title 'face 'message-header-other)))
         (when tags
           (insert (format (propertize "Tags: %s\n" 'face 'message-header-name)
                           (propertize tagsstr 'face 'message-header-other))))
         (insert (propertize "Link: " 'face 'message-header-name))
         (elfeed-insert-link link link)
         (insert "\n")
         (cl-loop for enclosure in (elfeed-entry-enclosures elfeed-show-entry)
                  do (insert (propertize "Enclosure: " 'face 'message-header-name))
                  do (elfeed-insert-link (car enclosure))
                  do (insert "\n"))
         (insert "\n")
         (if content
             (elfeed-insert-html content base)
           (insert (propertize "(empty)\n" 'face 'italic)))
         (setq-local my/elfeed-show-rdrview-html content)
         (goto-char (point-min))))))

#+end_src

** epa-file
Configure GPG assistant
#+begin_src emacs-lisp
  (use-package epa-file
    :config
    (setq
     epa-file-encrypt-to '("B97574F0096F8AFAA099E1FB2FE40B159E04B416")
     password-cache nil
     password-cache-expiry nil
     epa-pinentry-mode 'ask)
    :custom
    (epa-file-select-keys 'silent))
#+end_src
** Email
*** mu4e
**** General config
#+begin_src emacs-lisp
  ;; Make sure we find the mu4e package
  (add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")

  (use-package mu4e
    :straight (:type built-in)
    :commands (mu4e)
    :bind (("C-c a m" . mu4e)
           :map mu4e-main-mode-map
           ("U" . mu4e-update-mail-and-index-background)
           :map mu4e-headers-mode-map
           ("TAB" . mu4e-headers-next-unread)
           ("j" . mu4e-view-headers-next)
           ("k" . mu4e-view-headers-prev)
           ("J" . mu4e-search-maildir)
           ;; ("j" . mu4e-move-to-junk)
           ;; ("M" . mu4e-headers-mark-all-unread-read) ; Mark all as read
           :map mu4e-view-mode-map
           ("A" . mu4e-view-attachment-action)
           ("M-o" . ace-link-mu4e)
           ("o" . ace-link-mu4e)
           ("n" . mu4e-scroll-up)
           ("p" . mu4e-scroll-down)
           ("J" . mu4e-view-headers-next)
           ("K" . mu4e-view-headers-prev)
           ;; ("j" . mu4e-move-to-junk)
           )
    :init
    ;; From https://github.com/Phundrak/dotfiles/blob/master/org/config/emacs.org
    ;; (defun mu4e--main-action-str (name func)
    ;;   "This seems to be needed until evil-collection supports the latest version of mu4e."
    ;;   "mu4e-main-action")
    ;; (remove-hook 'mu4e-main-mode-hook 'evil-collection-mu4e-update-main-view)

    ;; Prefer text over html/ritchtext
    (setq mm-discouraged-alternatives '("text/html" "text/richtext"))

    ;; Use completing-read (which is ivy) instead of ido
    (setq mu4e-completing-read-function 'completing-read)

    ;; set mu4e as default mail client
    (setq mail-user-agent 'mu4e-user-agent)

    ;; SMTP related
    (setq message-send-mail-function        'smtpmail-send-it
          smtpmail-stream-type              'tls)

    :config
    ;; Set mu binary
    (setq mu4e-mu-binary "/usr/bin/mu")

    ;; Use passwords from password-store
    (setq auth-sources '(password-store))
    (setq auth-source-debug t)

    ;; Choose which fields to show
    (setq mu4e-headers-fields
          '(
            (:maildir    . 13)
            (:human-date . 12)
            (:flags      . 6)
            (:from       . 22)
            (:subject    . nil)))

    ;; Refresh mail using isync every 10 minutes
    (setq mu4e-update-interval (* 10 60))

    ;; Command used to retrieve new mails
    (setq mu4e-get-mail-command "mbsync -a")

    ;; Defaults
    (setq mu4e-maildir (getenv "MU4E_MAILDIR"))
    (setq-default mu4e-drafts-folder "/private/Drafts")
    (setq-default mu4e-sent-folder   "/private/Sent")
    (setq-default mu4e-trash-folder  "/private/Trash")

    ;; Set citation settings
    (setq message-citation-line-format "\nOn %a, %b %d, %Y at %r %z, %N wrote:\n")
    (setq message-citation-line-function 'message-insert-formatted-citation-line)

    ;; Fancy stuff
    (setq mu4e-use-fancy-chars t)
    ;; <<mu4e-fancy-marks>>

    ;; And change default threading characters to some "nicer" looking chars
    (setq mu4e-headers-thread-child-prefix '("├>" . "├→ "))
    (setq mu4e-headers-thread-last-child-prefix '("└>" . "└→ "))
    (setq mu4e-headers-thread-connection-prefix '("│" . "│ "))
    (setq mu4e-headers-thread-orphan-prefix '("┬>" . "┬→ "))
    (setq mu4e-headers-thread-single-orphan-prefix '("─>" . "─→ "))

    ;; Also change to some nicer characters for marks
    ;; (setq mu4e-headers-new-mark    '("N" . "📨"))
    (setq mu4e-headers-passed-mark  '("P" . "›"))
    (setq mu4e-headers-replied-mark '("R" . "‹"))
    (setq mu4e-headers-seen-mark   '("S" . ""))
    ;; (setq mu4e-headers-attach-mark '("a" . "📎"))
    (setq mu4e-headers-personal-mark '("p" . ""))
    ;; (setq mu4e-headers-unread-mark '("u" . "📫"))

    ;; Set date format (header view)
    (setq mu4e-headers-date-format "%F")

    ;; How should html context be converted
    ;; (setq mu4e-html2text-command "/usr/bin/w3m -T text/html")
    (setq mu4e-html2text-command "iconv -c -t utf-8 | pandoc -f html -t plain")

    ;; Improve rendering of rich-text messages (html)
    (setq shr-color-visible-luminance-min 80)

    ;; Show email address as well and not only the name
    (setq-default mu4e-view-show-addresses t)

    ;; Don't reply to self
    (setq mu4e-compose-dont-reply-to-self t)

    ;; Setup some handy shortcuts
    ;; you can quickly switch to your Inbox -- press ``ji''
    ;; then, when you want archive some messages, move them to
    ;; the 'All Mail' folder by pressing ``ma''.

    ;; View mail in browser with "a V"
    (add-to-list 'mu4e-view-actions
                 '("ViewInBrowser" . mu4e-action-view-in-browser) t)
    (add-to-list 'mu4e-view-actions
                 '("fViewInChrome" . mu4e-action-view-in-chrome) t)
    (add-to-list 'mu4e-view-actions
                 '("xViewXWidget" . mu4e-action-view-with-xwidget) t)

    (setq mu4e-maildir-shortcuts
          '(
            ("/variomedia/inbox"   . ?v)
            ("/gmail/inbox"    . ?g)
            ("/cashlink/inbox"   . ?c)
            ("/private/Trash"   . ?t)
            ("/private/Drafts"  . ?d)
            ("/private/Junk"    . ?j)
            ("/private/Archive" . ?a)))

    ;; Set contexts
    (dorneanu/set-mu4e-contexts)
    )

  ;; (add-hook 'mu4e-view-mode-hook (lambda () (visual-fill-column-mode)))


#+end_src

**** Bookmarks
#+begin_src emacs-lisp
  (setq mu4e-bookmarks
        `(
          ("maildir:/Sent" "Sent messages" ?s)
          ("flag:unread AND NOT flag:trashed" "Unread messages" ?U)
          ("date:today..now AND NOT flag:trashed" "Today's messages" ?t)
          ("date:7d..now AND NOT flag:trashed" "Last 7 days" ?w)
          ("date:1m..now AND NOT flag:trashed" "Last month" ?m)
          ("date:1y..now AND NOT flag:trashed" "Last year" ?y)
          ("flag:trashed AND NOT flag:trashed" "Trash" ?T)
          ("from:yo@dev.to AND NOT flag:trashed" "dev.to" ?d)
          ("from:jira@*" "Jira" ?j)
          ("from:notifications@github.com" "Github" ?g)
          ;; (,(s-join " "
          ;;           '("OR noreply@tagesspiegel.de"
          ;;             "OR support@lagedernation.org"
          ;;             "OR hello@blinkist.com"
          ;;             "OR info@smarticular.net"
          ;;             "OR newsletter@*"
          ;;             "OR support@xeroshoes.com"))
          ;;  "Newletter" ?n)
          ("mime:image/* AND NOT flag:trashed" "Messages with images" ?p)))
#+end_src

**** Fancy stuff
From https://github.com/Phundrak/dotfiles

#+name: mu4e-fancy-marks-tbl
| Mark      | Flag | Icon        |
|-----------+------+-------------|
| draft     | D    | pencil      |
| flagged   | F    | flag        |
| new       | N    | rss         |
| passed    | P    | check       |
| replied   | R    | reply       |
| seen      | S    | eye         |
| unread    | u    | eye-slash   |
| trashed   | T    | trash       |
| attach    | a    | paperclip   |
| encrypted | x    | lock        |
| signed    | s    | certificate |

#+name: mu4e-fancy-marks-gen
#+header: :tangle no :exports none :results value :cache yes
#+begin_src emacs-lisp :var table=mu4e-fancy-marks-tbl
  (mapconcat (lambda (line)
               (let ((mark (car line))
                     (flag (cadr line))
                     (icon (caddr line)))
                 (format "mu4e-headers-%s-mark `(\"%s\" . ,(all-the-icons-faicon \"%s\" :height 0.8))"
                         mark
                         flag
                         icon)))
             table
             "\n")
#+end_src

#+RESULTS[c6ed5d4bec4c10339a7de52a70822af74d782e62]: mu4e-fancy-marks-gen
#+begin_example
mu4e-headers-draft-mark `("D" . ,(all-the-icons-faicon "pencil" :height 0.8))
mu4e-headers-flagged-mark `("F" . ,(all-the-icons-faicon "flag" :height 0.8))
mu4e-headers-new-mark `("N" . ,(all-the-icons-faicon "rss" :height 0.8))
mu4e-headers-passed-mark `("P" . ,(all-the-icons-faicon "check" :height 0.8))
mu4e-headers-replied-mark `("R" . ,(all-the-icons-faicon "reply" :height 0.8))
mu4e-headers-seen-mark `("S" . ,(all-the-icons-faicon "eye" :height 0.8))
mu4e-headers-unread-mark `("u" . ,(all-the-icons-faicon "eye-slash" :height 0.8))
mu4e-headers-trashed-mark `("T" . ,(all-the-icons-faicon "trash" :height 0.8))
mu4e-headers-attach-mark `("a" . ,(all-the-icons-faicon "paperclip" :height 0.8))
mu4e-headers-encrypted-mark `("x" . ,(all-the-icons-faicon "lock" :height 0.8))
mu4e-headers-signed-mark `("s" . ,(all-the-icons-faicon "certificate" :height 0.8))
#+end_example

Let’s enable them and set them:
#+name: mu4e-fancy-marks
#+begin_src emacs-lisp :tangle no
  (setq mu4e-use-fancy-chars t
        <<mu4e-fancy-marks-gen()>>)
#+end_src

**** View mode
#+name: mu4e-view-mode
#+begin_src emacs-lisp :tangle no
  (add-hook 'mu4e-view-mode-hook (lambda () (visual-fill-column-mode)))
#+end_src

**** Contexts
Set contexts
#+begin_src emacs-lisp
  (defun dorneanu/set-mu4e-contexts ()
    "Set mail contexts for mu4e"
    (interactive)
    (setq mu4e-contexts
          `( ,(make-mu4e-context
               :name "gmail"
               :enter-func (lambda () (mu4e-message "Entering gmail context"))
               :leave-func (lambda () (mu4e-message "Leaving gmail context"))
               ;; we match based on the contact-fields of the message
               :match-func
               (lambda (msg)
                 (when msg
                   (string-prefix-p "/gmail" (mu4e-message-field msg :maildir))))
               :vars `((user-mail-address . ,(password-store-get "mail/gmail/personal/username"))
                       (user-full-name    . "Cyneox")
                       (smtpmail-smtp-user . ,(password-store-get "mail/gmail/personal/username"))
                       (smtpmail-smtp-server  . "smtp.gmail.com")
                       (smtpmail-default-smtp-server  . "smtp.gmail.com")
                       (smtpmail-smtp-service . 465)
                       (smtpmail-stream-type  . ssl)
                       (mu4e-compose-signature . "Cyneox via Gmail")
                       (mu4e-drafts-folder  . "/[Gmail]/drafts")
                       (mu4e-sent-folder  . "/[Gmail]/sent")
                       (mu4e-refile-folder  . "/[Gmail]/All Mail")
                       (mu4e-trash-folder  . "/[Gmail]/bin")))
             ,(make-mu4e-context
               :name "variomedia"
               :enter-func (lambda () (mu4e-message "Switch to the variomedia context"))
               :match-func
               (lambda (msg)
                 (when msg
                   (string-prefix-p "/variomedia" (mu4e-message-field msg :maildir))))
               :vars `((user-mail-address . ,(password-store-get "mail/personal/username"))
                       (user-full-name    . "Victor Dorneanu")
                       (smtpmail-smtp-user . ,(password-store-get "mail/personal/username")) (smtpmail-smtp-server  . "smtp.variomedia.de")
                       (smtpmail-default-smtp-server  . "smtp.variomedia.de")
                       (smtpmail-smtp-service . 465)
                       (smtpmail-stream-type  . ssl)
                       (mu4e-compose-signature . "Victor via Emacs")
                       (mu4e-drafts-folder  . "/variomedia/drafts")
                       (mu4e-sent-folder  . "/variomedia/sent")
                       (mu4e-trash-folder  . "/variomedia/bin")))
             ,(make-mu4e-context
               :name "cashlink"
               :enter-func (lambda () (mu4e-message "Switch to the cashlink context"))
               :match-func
               (lambda (msg)
                 (when msg
                   (string-prefix-p "/cashlink" (mu4e-message-field msg :maildir))))
               :vars `((user-mail-address . ,(password-store-get "mail/gmail/work/username"))
                       (user-full-name    . "Victor Dorneanu")
                       (smtpmail-smtp-user . ,(password-store-get "mail/gmail/work/username"))
                       (smtpmail-smtp-server  . "smtp.gmail.com")
                       (smtpmail-smtp-service . 465)
                       (smtpmail-stream-type  . ssl)
                       (mu4e-drafts-folder  . "/cashlink/drafts")
                       (mu4e-sent-folder  . "/cashlink/sent")
                       (mu4e-trash-folder  . "/cashlink/bin")
                       (mu4e-compose-signature . ,(concat "Victor Dorneanu\n" "Security Architect @ Cashlink\n"))
                       ))))
    )

#+end_src

#+results:
: dorneanu/set-mu4e-contexts
**** Reply
I often want to reply without the original message:
#+begin_src emacs-lisp
  ;; From https://github.com/djcb/mu/issues/2345
  ;; (after! mu4e
  ;;   (defun dorneanu/mu4e-delete-citation ()
  ;;     (delete-region (point) (point-max)))

  ;;   (defun dorneanu/mu4e-reply (prefix)
  ;;     (interactive "P")
  ;;     (setq mu4e-compose-cite-function (if prefix
  ;;                                          #'dorneanu/mu4e-delete-citation
  ;;                                        #'message-cite-original-without-signature))
  ;;     (mu4e-compose-reply))

  ;;   (define-key mu4e-view-mode-map "R" #'dorneanu/mu4e-reply)
  ;;   (define-key mu4e-headers-mode-map "R" #'dorneanu/mu4e-reply)
  ;;   )
#+end_src
** COMMENT gnus
- [ ] Fix pyenv issue
*** nnreddit
#+begin_src emacs-lisp
  (use-package nnreddit
    :straight t
    :after (gnus))

  ;; Applies to first-time Gnus users
  ;; (custom-set-variables '(gnus-select-method (quote (nnreddit ""))))
  (add-to-list 'gnus-secondary-select-methods '(nnreddit ""))

  ;; Primary Mailbox
  (setq gnus-select-method
        '(nnmaildir "Local"
                    (directory "~/Maildir")
                    (nnir-search-engine notmuch)
                    ))

  (setq gnus-asynchronous t)

  (setq-default
   gnus-summary-line-format "%U%R%z %(%&user-date class="comment">;  %-15,15f  %B%s%)\n"
   gnus-user-date-format-alist '((t . "%Y-%m-%d %H:%M"))
   gnus-summary-thread-gathering-function 'gnus-gather-threads-by-references
   gnus-thread-sort-functions '(gnus-thread-sort-by-date)
   gnus-sum-thread-tree-false-root ""
   gnus-sum-thread-tree-indent " "
   gnus-sum-thread-tree-leaf-with-other "├► "
   gnus-sum-thread-tree-root ""
   gnus-sum-thread-tree-single-leaf "╰► "
   gnus-sum-thread-tree-vertical "│")
#+end_src

** VC
*** browse-at-remote
#+begin_src emacs-lisp
  (use-package browse-at-remote
    :straight t
    :bind (("C-c go" . browse-at-remote)
           ("C-c gy" . browse-at-remote-kill))
    )
#+end_src

* Keybindings
:properties:
:header-args:emacs-lisp: :tangle ~/.minemacs.d/config.el
:end:
** navigation
Now some keybindings for the ~Super_L~ key:

#+begin_src emacs-lisp
;; lower case “s” is for super Use windows key (super) for window navigation
(global-set-key (kbd "s-h") #'windmove-left)
(global-set-key (kbd "s-l") #'windmove-right)
(global-set-key (kbd "s-k") #'windmove-up)
(global-set-key (kbd "s-j") #'windmove-down)

;; Tab navigation
(global-set-key (kbd "s-.") #'tab-next)
(global-set-key (kbd "s-,") #'tab-previous)
(global-set-key (kbd "s-1") #'tab-line-switch-to-prev-tab)
(global-set-key (kbd "s-2") #'tab-line-switch-to-next-tab)
#+end_src

Some keybindings for *paragraphs*:

#+begin_src emacs-lisp
  (global-set-key (kbd "s-i") #'forward-paragraph)
  (global-set-key (kbd "s-u") #'backward-paragraph)
#+end_src

For buffers:
#+begin_src emacs-lisp
(keymap-global-set "C-c b h" #'previous-buffer)
(keymap-global-set "C-c b l" #'next-buffer)
#+end_src
** globals
Disable keyboard-escape-quit as it always closes windows in a nasty way:

#+begin_src emacs-lisp
  (keymap-global-unset "<escape>" #'keyboard-escape-quit)
#+end_src
** MacOS
#+begin_src emacs-lisp
  (setq mac-command-modifier      'super
        ns-command-modifier       'meta
        mac-option-modifier       'super
        ns-option-modifier        'super
        mac-right-option-modifier 'none
        ns-right-option-modifier  'none)
#+end_src

** toggles

#+begin_src emacs-lisp
(keymap-global-set "M-g t o" #'olivetti-mode)
(keymap-global-set "M-g t t b" #'tab-bar-mode)
(keymap-global-set "M-g t t n" #'global-tab-line-mode)
(keymap-global-set "M-g t F" #'focus-mode)
(keymap-global-set "M-g t h" #'highlight-indent-guides-mode)
(keymap-global-set "M-g t n" #'display-line-numbers-mode)
(keymap-global-set "M-g t f" #'fringe-mode)
(keymap-global-set "M-g t v" #'visual-line-fill-column-mode)
#+end_src

** COMMENT inserts
#+begin_src emacs-lisp
  (+map!
   ;; ====== Inserts ======
   "ii"     #'org-download-clipboard
   "ioc"    #'dorneanu/org-insert-link-from-clipboard
   "iot"    #'counsel-org-tag)
#+end_src

** hydras
#+begin_src emacs-lisp
(keymap-global-set "M-g t . w" #'+window-adjust-size-transient)
#+end_src
** jumps
#+begin_src emacs-lisp
(keymap-global-set "C-x j c" #'avy-goto-char)
(keymap-global-set "C-x j w" #'avy-goto-word-1)
;; This doesn't fit here
(keymap-global-set "M-j" #'crux-top-join-line)
#+end_src

** projects
#+begin_src emacs-lisp
(keymap-global-set "M-g 0" #'dirvish-side)
(keymap-global-set "C-M-0" #'indent-region)
#+end_src

** COMMENT searches
#+begin_src emacs-lisp
(+map!
  ;; ====== Searches ======
  "srd"   #'my/rg-dotemacs
  "srh"   #'my/rg-org-roam-directory-huberman
  "sro"   #'my/rg-org-roam-directory)
#+end_src
** COMMENT tabs
#+begin_src emacs-lisp
(+map!
  ;; ====== Tabs ======
  "TAB SPC"   #'tab-bar-switch-to-recent-tab)
#+end_src
** COMMENT evil-org
#+begin_src emacs-lisp
(with-eval-after-load 'evil-org-agenda
  ;; Disable SPC key in org-agenda
  ;; (define-key org-agenda-mode-map (kbd "SPC") nil)
  (evil-define-key 'motion org-agenda-mode-map (kbd "SPC") nil))
#+end_src
* Media
** empv
Watch YouTube videos from Emacs using ~mpv~. I also learned you can save the
position and resume whenever the same video is played again (read [[https://unix.stackexchange.com/questions/414639/is-it-possible-to-continue-movies-from-where-one-leaves-in-mpv-as-can-be-done-in][here]]).

#+begin_src emacs-lisp
(use-package empv
  :straight t
  :after (embark browse-url)
  :config

  (setq empv-invidious-instance "https://yewtu.be/")
  (add-to-list 'empv-mpv-args "--ytdl-format=best")

  (defun dorneanu/empv-play-url (url &optional _)
    (interactive)
    (empv-toggle-video)
    (empv-play url)))

;; Handle youtube links using mpv
(with-eval-after-load 'browse-url
  (add-to-list 'browse-url-handlers (cons "^https://\\(www.\\)?youtube.com\\|https://youtu.be" #'dorneanu/empv-play-url)))

#+end_src

* ORG mode
:properties:
:header-args:emacs-lisp: :tangle ~/.minemacs.d/config.el
:end:
All this goes to ~~/.minemacs.d/config.el~:
** org
Basic configuration
#+begin_src emacs-lisp
(use-package org
  :straight (:type built-in)
  :hook ((org-mode . toggle-truncate-lines))
  :custom
  (org-auto-align-tags nil)
  (org-edit-src-content-indentation t) ; indent the content of src blocks
  (org-edit-src-turn-on-auto-save t) ; auto-save org-edit-src
  (org-fontify-quote-and-verse-blocks t)
  (org-id-locations-file (concat minemacs-config-dir "id-locations.el"))
  (org-pretty-entities t)
  (org-pretty-entities-include-sub-superscripts nil)
  (org-special-ctrl-a/e t)
  (org-startup-indented nil)
  (org-element-use-cache nil)
  (org-hide-emphasis-markers t)
  :config
  (setq org-hide-leading-stars             t
        org-hide-macro-markers             t
        org-ellipsis                       "…"
        org-image-actual-width             600
        org-redisplay-inline-images        t
        org-display-inline-images          t
        org-auto-align-tags                t
        org-startup-with-inline-images     "inlineimages"
        org-pretty-entities                t
        org-fontify-whole-heading-line     t
        org-fontify-done-headline          t
        org-fontify-quote-and-verse-blocks t
        org-startup-indented               t
        org-startup-align-all-tables       t
        org-use-property-inheritance       t
        org-list-allow-alphabetical        t
        org-M-RET-may-split-line           nil
        ;; org-src-window-setup               'split-window-below
        org-src-fontify-natively           t
        org-src-tab-acts-natively          t
        org-src-preserve-indentation       t
        org-adapt-indentation              nil
        org-log-done                       'time
        org-directory                      "~/repos/priv/org/"
        org-default-notes-file             (expand-file-name "notes.org" org-directory))

  ;; Set TODO keywords
  (setq org-todo-keywords
        '((sequence
           "TODO(t)"
           "STARTED(s)"
           "NEXT(n)"
           "WIP(p)"
           "WAITING(w!)"
           "|"
           "DONE(d)"
           "CANCELED(c)")
          (sequence
           "PROJ(p)"
           "MEETING(m)"
           "REVIEW(r)"
           "IDEA(i)")))
  ;; "|"
  ;; "STOP(c)"
  ;; "EVENT(m)"


  ;; No blank lines before new entries
  (setq org-blank-before-new-entry
        '((heading . nil)
          (plain-list-item . nil))))
#+end_src

** org-agenda
#+begin_src emacs-lisp
(use-package org-agenda
  :straight (:type built-in)
  :config
  (setq
   ;; Set agenda files
   org-agenda-files (mapcar
                     (lambda (f) (concat org-directory f))
                     '("inbox.org"
                       "work.org.gpg"
                       "private.org.gpg"
                       "projects.org.gpg"))

   org-agenda-file-regexp
   (replace-regexp-in-string "\\\\\\.org" "\\\\.org\\\\(\\\\.gpg\\\\)?"
                             org-agenda-file-regexp)

   ;; Skip unavailable agenda files
   org-agenda-skip-unavailable-files t

   ;; Skip done tasks
   org-agenda-skip-scheduled-if-done t
   org-agenda-skip-deadline-if-done t

   ;; Show warnings for deadlines 7 days in advance.
   org-deadline-warning-days 5
   org-agenda-include-deadlines t
   org-agenda-todo-list-sublevels t

   ;; Set column width for tags in agenda
   org-agenda-tags-column 80


   ;; org-agenda-todo-ignore-scheduled 'all
   ;; org-agenda-todo-ignore-deadlines 'all
   ;; org-agenda-todo-ignore-with-date 'all

   ;; Use straight line as separator between agenda blocks
   ;; https://www.utf8-chartable.de/unicode-utf8-table.pl?start=9472&utf8=dec&unicodeinhtml=dec
   ;; org-agenda-block-separator 9472
   org-agenda-compact-blocks t
   org-agenda-start-day nil ;; i.e. today
   org-agenda-span 1
   org-agenda-start-on-weekday nil

   ;; Clock report settings
   org-agenda-start-with-clockreport-mode t
   org-clock-report-include-clocking-task t
   org-agenda-clockreport-parameter-plist '(:link nil :maxlevel 6 :fileskip0 t :compact nil)

   ;; Time grid
   org-agenda-time-grid
   '((daily today require-timed)
     (0900 01000 1100 1200 1300 1400 1500 1600 1700 1800)
     "-"
     "────────────────")

   ;; http://doc.endlessparentheses.com/Var/org-agenda-prefix-format.html
   org-agenda-prefix-format
   '(
     (agenda . "%5c %4e %?-12t %s")
     (todo   . " %4e %-12c")
     (tags   . " %-22c")
     (search . " %-12c"))

   ;; Append extra files
   org-agenda-files (append org-agenda-files
                            '("~/syncthing/org/2-PARA.org"
                              "~/syncthing/org/01-TDL.org")))

  ;; (add-hook 'org-agenda-mode-hook
  ;;           (lambda ()
  ;;             (visual-line-mode -1)
  ;;             (toggle-truncate-lines 1)
  ;;             (display-line-numbers-mode 0)))
  )
#+end_src
** org-super-agenda
Define custom org agenda commands.
Inspired by https://www.rousette.org.uk/archives/doom-emacs-tweaks-org-journal-and-org-super-agenda/

#+begin_src emacs-lisp
(use-package org-super-agenda
  :straight t)

(with-eval-after-load 'org-agenda
  ;; Enable it
  (org-super-agenda-mode)

  ;; Toggle org links display
  (setq org-link-descriptive t)

  ;; Set agenda custom commands
  (setq org-agenda-custom-commands
        '(
          ("a" "Agenda"
           ((agenda "" ((org-agend-span 'day)
                        (org-super-agenda-groups
                         '(
                           (:name "Today"
                            :time-grid t
                            :date today
                            :scheduled today
                            :order 1)
                           (:discard (:anything))))))
            (tags (concat "wk" (format-time-string "%V")) ((org-agenda-overriding-header  (concat "--\nToDos Week " (format-time-string "%V")))
                                                           (org-super-agenda-groups
                                                            '((:discard (:deadline t))
                                                              (:discard (:todo ("DONE" "CANCELED" "WAITING")))
                                                              (:discard (:not (:todo t)))))))

            (alltodo "" ((org-agenda-overriding-header "")
                         (org-agenda-prefix-format '(
                                                     (agenda . "%7c %4e %?-12t %s")
                                                     (todo . " %-8c [%-4e] %?-12t %s")
                                                     (tags   . " %-22c")
                                                     (search . " %-12c")))

                         (org-super-agenda-groups
                          '(
                            (:log t)
                            (:discard (:tag "inactive"))
                            (:discard (:tag "jira"))
                            (:name "Started"
                             :todo ("STARTED")
                             :order 1)
                            (:name "Quickies"
                             :and (:effort< "0:15" :not (:tag "recurring")))

                            (:name "This Week"
                             :auto-property "week")

                            (:name "Overdue"
                             :deadline past
                             :scheduled past
                             :order 2)
                            (:name "Soon"
                             :deadline feature
                             :scheduled feature
                             :order 2)
                            (:name "Waiting"
                             :todo "WAITING"
                             :order 2)
                            (:name "To refile"
                             :category "inbox"
                             :todo ""
                             :order 10)
                            (:name "Next to do"
                             :todo "NEXT"
                             :order 20)
                            ;; (:name "WIP"
                            ;;  :todo ("WIP")
                            ;;  :order 40)
                            (:discard (:anything))))))
            (alltodo "" ((org-agenda-overriding-header "")
                         (org-agenda-hide-tags-regexp "project\\|ticket\\|active")
                         (org-agenda-prefix-format '((todo . " %-8c [%-4e] %?-12t %s")))
                         (org-super-agenda-groups
                          '(
                            (:log t)
                            (:discard (:tag "inactive"))
                            (:name "Projects"
                             :auto-property "project"
                             :todo t
                             :order 1)
                            (:discard (:anything))))))))


          ("r" "Resonance"
           ((alltodo "" ((org-agenda-overriding-header "Resonance calendar")
                         (org-super-agenda-groups
                          '(
                            (:discard (:not (:tag ("video" "article"))))
                            (:and (:tag))
                            (:auto-parent t)
                            (:discard (:anything)))))))))))


#+end_src
** org-refile
Some extras copied from Doom Emacs:

#+begin_src emacs-lisp
(defun +org-headline-avy ()
  "TODO"
  (require 'avy)
  (save-excursion
    (when-let* ((org-reverse-note-order t)
                (pos (avy-with avy-goto-line (avy-jump (rx bol (1+ "*") (1+ blank))))))
      (when (integerp (car pos))
        ;; If avy is aborted with "C-g", it returns `t', so we know it was NOT
        ;; aborted when it returns an int. If it doesn't return an int, we
        ;; return nil.
        (copy-marker (car pos))))))

(defun +org/goto-visible ()
  "TODO"
  (interactive)
  (goto-char (+org-headline-avy)))
#+end_src

Now settings for ~org-refile~:

#+begin_src emacs-lisp
(with-eval-after-load 'org
  ;; Refiling
 (setq org-refile-use-cache t)
 (setq org-refile-targets '((nil :maxlevel . 9)
                            (org-agenda-files :maxlevel . 9)))

  ;; Allow refile to create parent tasks with confirmation
  (setq org-refile-allow-creating-parent-nodes 'confirm)
  (setq org-refile-use-outline-path 'file)       ; Show filename for refiling
  (setq org-outline-path-complete-in-steps nil)  ; Refile in a single go

  ;; Exclude DONE state tasks from refile targets
  (defun dorneanu/verify-refile-target ()
    "Exclude todo keywords with a done state from refile targets."
    (not (member (nth 2 (org-heading-components)) org-done-keywords)))
  (setq org-refile-target-verify-function 'dorneanu/verify-refile-target)

  ;; Some custom elisp functions
  (defun dorneanu/org-refile-anywhere (&optional goto default-buffer rfloc msg)
    "A version of `org-refile' which allows refiling to any subtree."
    (interactive "P")
    (let ((org-refile-target-verify-function))
      (org-refile goto default-buffer rfloc msg)))

  (defun dorneanu/org-agenda-refile-anywhere (&optional goto rfloc no-update)
    "A version of `org-agenda-refile' which allows refiling to any subtree."
    (interactive "P")
    (let ((org-refile-target-verify-function))
      (org-agenda-refile goto rfloc no-update)))

  ;; These are from Doom Emacs: https://github.com/doomemacs/doomemacs/blob/master/modules/lang/org/autoload/org-refile.el
  (defun +org/refile-to-current-file (arg &optional file)
    "Refile current heading to elsewhere in the current buffer.
If prefix ARG, copy instead of move."
    (interactive "P")
    (let ((org-refile-targets `((,file :maxlevel . 10)))
          (org-refile-use-outline-path t)
          (org-refile-keep arg)
          current-prefix-arg)
      (call-interactively #'org-refile)))

  (defun +org/refile-to-visible ()
    "Refile current heading as first child of visible heading selected with Avy."
    (interactive)
    (when-let (marker (+org-headline-avy))
      (let* ((buffer (marker-buffer marker))
             (filename
              (buffer-file-name (or (buffer-base-buffer buffer)
                                    buffer)))
             (heading
              (org-with-point-at marker
                (org-get-heading 'no-tags 'no-todo)))
             ;; Won't work with target buffers whose filename is nil
             (rfloc (list heading filename nil marker))
             (org-after-refile-insert-hook (cons #'org-reveal org-after-refile-insert-hook)))
        (org-refile nil nil rfloc))))

  (defun +org/refile-to-last-location (arg)
    "Refile current heading to the last node you refiled to.
If prefix ARG, copy instead of move."
    (interactive "P")
    (or (assoc (plist-get org-bookmark-names-plist :last-refile)
               bookmark-alist)
        (user-error "No saved location to refile to"))
    (let ((org-refile-keep arg)
          (completing-read-function
           (lambda (_p _coll _pred _rm _ii _h default &rest _)
             default)))
      (org-refile)))

  ;; Save all buffers after refilling
  (advice-add 'org-refile :after (lambda (&rest _) (org-save-all-org-buffers))))


#+end_src
** org-modern
#+begin_src emacs-lisp
(use-package org-modern
  :straight t
  ;; :hook (org-mode . org-modern-mode)
  ;; :hook (org-agenda-finalize . org-modern-agenda)
  ;; :custom-face
  ;; ;; force monospaced font for tags
  ;; (org-modern-tag ((t (:inherit org-verbatim :foreground "black" :background "lightgray" :box "black"))))
  :custom
  (org-modern-star '("◉" "○" "◈" "◇" "✳" "◆" "✸" "▶"))
  (org-modern-table-vertical 5)
  (org-modern-table-horizontal 2)
  (org-modern-list '((?+ . "➤") (?- . "–") (?* . "•")))
  (org-modern-block-fringe nil)
  (org-modern-checkbox nil) ;; not that interesting! maybe it depends on the used font
  (org-modern-todo-faces
   ;; tweak colors, and force it to be monospaced, useful when using `mixed-pitch-mode'.
   '(("idea" . (:inherit org-verbatim :weight semi-bold :foreground "white" :background "goldenrod"))
     ("next" . (:inherit org-verbatim :weight semi-bold :foreground "white" :background "indianred1"))
     ("strt" . (:inherit org-verbatim :weight semi-bold :foreground "white" :background "orangered"))
     ("wait" . (:inherit org-verbatim :weight semi-bold :foreground "white" :background "coral"))
     ("kill" . (:inherit org-verbatim :weight semi-bold :foreground "white" :background "darkgreen"))
     ("proj" . (:inherit org-verbatim :weight semi-bold :foreground "white" :background "limegreen"))
     ("hold" . (:inherit org-verbatim :weight semi-bold :foreground "white" :background "orange"))
     ("done" . (:inherit org-verbatim :weight semi-bold :foreground "black" :background "lightgray")))))
#+end_src

#+results:

** org-timeblock                                                       :todo:
**
#+begin_src emacs-lisp
(use-package org-timeblock
  :straight t
  :after (org org-agenda)
  :bind (:map org-timeblock-mode-map
              ("M-n" . org-timeblock-forward-block)
              ("M-p" . org-timeblock-backward-block)
              ("M-s" . org-timeblock-schedule)
              ("M-c i" . org-timeblock-clock-in)
              ("M-c t" . org-timeblock-todo)
              ("r" . org-timeblock-redraw-buffers)
              ("s" . org-timeblock-switch-view))
  :config
  (setq org-timeblock-n-days-view 2
        org-timeblock-scale-options '(8 . 17)))

(defun dorneanu/org-setup-org-timeblock()
  (interactive)
  (add-hook `org-agenda-mode-hook #'org-timeblock-redraw-buffers)
  (split-window-right)
  (balance-windows)
  (other-window 1)
  (org-timeblock))
#+end_src
** org-roam
#+begin_src emacs-lisp
(use-package org-roam
  :straight t
  :custom
  (org-roam-directory "~/repos/roam")
  (org-roam-node-display-template (concat "${title:*} " (propertize "${tags:20}" 'face 'org-tag)))
  ;; (org-roam-directory (expand-file-name "org/roam/" (getenv "HOME")))
  ;; (org-roam-completion-everywhere t)
  :config
  (org-roam-db-autosync-mode 1)
  (setq org-roam-capture-templates
        '(("d" "default" plain
           "%?"
           :if-new (file+head "topics/${slug}.org" "#+title: ${title}\n")
           :unnarrowed t)
          ("j" "Journal" plain "%?"
           :if-new (file+head "journal/%<%Y-%m-%d>.org"
                    "#+title: %<%Y-%m-%d>\n#+filetags: journal\n#+date: %<%Y-%m-%d>\n")
           :immediate-finish t
           :unnarrowed t)
          ("b" "book" plain "%?"
           :if-new
           (file+head "books/${slug}.org" "#+title: ${title}\n#+filetags: book\n")
           :immediate-finish t
           :unnarrowed t)
          ;; Idea from https://daryl.wakatara.com/emacs-gtd-flow-evolved/
          ("r" "Rez" plain "%?"
           :target (file+head "rez/%<%Y>/${slug}.org"
                    "#+TITLE: ${title}
      ,#+CREATED: %u

      ,* ${title}
      :properties:
      :url:
      :end:

      ,* Actions
      ,* Quotes
      ,* Notes
      ") :unnarrowed t)
          ("x" "Blog" plain "%?"
           :if-new (file+head "blog/%<%Y-%m-%d>-${slug}.org" "#+SETUPFILE: setup.org\n#+TITLE: ${title}\n#+CREATED: %<%Y-%m-%d>\n#+HUGO_DRAFT: true\n\n")
           :unnarrowed t)
          ))
  )
#+end_src

** org-babel
#+begin_src emacs-lisp
;; Install ob-go
(use-package ob-go
  :straight t)

(use-package jq-mode
  :straight t)

(org-babel-do-load-languages
 'org-babel-load-languages
 '((sql . t)
   (go . t)))
#+end_src
** counsel-org-tag
Use counsel-org-tag (I couldn't find any alternative for consult):

#+begin_src emacs-lisp
(global-set-key [remap org-set-tags-command] #'counsel-org-tag)
#+end_src
** COMMENT keybindings
#+begin_src emacs-lisp
(+map!
  ;; ====== ORG ======
  "os"    #'org-sort
  "orv"   #'+org/refile-to-visible
  "ocr"   #'org-clock-report
  "oci"   #'org-clock-in
  "oco"   #'org-clock-out
  "ocq"   #'org-clock-out
  "ocm"   #'dorneanu/org-clock-enter-manually
  )
#+end_src
** packages
*** org-re-reveal
Use [[https://oer.gitlab.io/org-re-reveal/][org-re-reveal]] for creating presentations using [[https://revealjs.com/][revealjs]].
#+begin_src emacs-lisp
(use-package org-re-reveal
   :straight t)
#+end_src
** exporters
*** hugo
#+begin_src emacs-lisp
(use-package ox-hugo
  :defer t
  :after ox
  :straight t)
#+end_src
** custom elisp
*** Enter clock data manually
From https://mbork.pl/2023-03-20_Manually_entering_clocking_data

#+begin_src emacs-lisp
(defun dorneanu/org-clock-enter-manually (begin end)
  "Enter a clock item manually."
  (interactive (list (org-read-date t t) (org-read-date t t)))
  (save-excursion
    (org-clock-find-position nil)
    (insert-before-markers-and-inherit "\n")
    (backward-char 1)
    (insert-and-inherit org-clock-string " ")
    (org-insert-time-stamp begin t t)
    (org-insert-time-stamp end t t "--")
    (org-evaluate-time-range t)))
#+end_src
*** Auto clock-in when task is started
#+begin_src emacs-lisp
;; From https://github.com/svetlyak40wt/dot-emacs/blob/master/.emacs.d/lib/org-auto-clock.el
;; Auto clock-in when task is marked STARTED
(defun wicked/org-clock-in-if-starting ()
  "Clock in when the task is marked STARTED."
  (when (and (string= org-state "STARTED")
             (not (string= org-last-state org-state)))
    (org-clock-in)))

(defun wicked/org-clock-out-if-waiting ()
  "Clock out when the task is marked WAITING or WIP (Work in Progress)."
  (when (and (or (string= org-state "WAITING")
                 (string= org-state "WIP"))
             (equal (marker-buffer org-clock-marker) (current-buffer))
             (< (point) org-clock-marker)
             (> (save-excursion (outline-next-heading) (point))
                org-clock-marker)
             (not (string= org-last-state org-state)))
    (org-clock-out)))

(with-eval-after-load 'org
  (add-hook 'org-after-todo-state-change-hook #'wicked/org-clock-in-if-starting)
  (defadvice org-clock-in (after wicked activate)
    "Set this task's status to 'STARTED'."
    (org-todo "STARTED"))
  (add-hook 'org-after-todo-state-change-hook #'wicked/org-clock-out-if-waiting))
#+end_src
*** Create ORG heading from clipboard link
#+begin_src emacs-lisp
(cl-defun dorneanu/org-insert-link-from-clipboard (&optional (url (org-web-tools--get-first-url)))
  "Extend org-web-tools to create to take URL from clipboard or kill-ring"
  (interactive)
  (require 'org-web-tools)
  (if-let ((dom (plz 'get url :as (lambda ()
                                    (libxml-parse-html-region (point-min) (point-max)))))
           (title (cl-caddr (car (dom-by-tag dom 'title)))))
      (insert (format "%s ◦ [[%s][%s]]" (format-time-string "%Y-%m-%d") url (org-web-tools--cleanup-title title)))))
#+end_src

** misc
*** org-download
Insert images easily into ORG mode files

#+begin_src emacs-lisp
(use-package org-download
  :straight t
  :after org
  :hook (org-mode . org-download-enable))

;; Drag-and-drop to `dired`
(add-hook 'dired-mode-hook 'org-download-enable)
#+end_src
*** org-web-tools
#+begin_src emacs-lisp
(use-package org-web-tools
  :straight t)
#+end_src
* internal :no-export:
